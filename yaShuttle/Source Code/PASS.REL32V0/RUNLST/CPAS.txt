
                                              EXTERNAL SYMBOL DICTIONARY                                       PAGE    1
SYMBOL   TYPE  ID  ADDR  LENGTH  LD ID                                                         AP101S 3.0 09.37 07/22/05
CPAS      SD 0001 000000 000050
#QSTBYTE  ER 0002
#QGTBYTE  ER 0003
#LCPAS    SD 0004 000050 000002

         CPAS--CHARACTER ASSIGN,PARTITIONED OUTPUT                                                             PAGE    2
  LOC  OBJECT CODE   ADR1 ADR2      SOURCE STATEMENT                                           AP101S 3.0 09.37 07/22/05
                                  2 *
                                  3 * WHEN DATA_REMOTE IS IN EFFECT, THE LDM INSTRUCTIONS ARE NEEDED
                                  4 * AROUND THE CALL TO THIS RTL ROUTINE BECAUSE R1/R3 IS USED AS
                                  5 * A BASE REGISTER. (CR12620)
                                  6 *
                                  7          MACRO                                                          00000200
                                  8          WORKAREA                                                       00000300
                                  9 PADBLANK DS    H                                                        00000400
                                 10          MEND                                                           00000500
                                 11 CPAS     AMAIN                                                          00000600
                                 12+***********************************************************************
                                 13+*
                                 14+*        PRIMARY ENTRY POINT
                                 15+*
                                 16+***********************************************************************
00000                            17+CPAS     CSECT                                                          01-AMAIN
00000                            18+STACK    DSECT                                                          01-AMAIN
                                 19+*        DS    18H            STANDARD STACK AREA DEFINITION
00000                            20+         DS    F              PSW (LEFT HALF)                           01-AMAIN
00002                            21+         DS    2F             R0,R1                                     01-AMAIN
00006                            22+ARG2     DS    F              R2                                        01-AMAIN
00008                            23+         DS    F              R3                                        01-AMAIN
0000A                            24+ARG4     DS    F              R4                                        01-AMAIN
0000C                            25+ARG5     DS    F              R5                                        01-AMAIN
0000E                            26+ARG6     DS    F              R6                                        01-AMAIN
00010                            27+ARG7     DS    F              R7                                        01-AMAIN
                                 28+*        END OF STANDARD STACK AREA
00012                            29+PADBLANK DS    H                                                        02-00009
00013 C9FB
00014                            30+STACKEND DS    0F             END OF COMBINED STACK AREA                01-AMAIN
00000                            31+CPAS     CSECT                                                          01-AMAIN
0000000                          32+         USING STACK,0        ADDRESS STACK AREA                        01-AMAIN
00000 B624 0000      0009 0000   33+         NIST  9(0),0         CLEAR ON ERROR INFO (LCL DATA PTR)        01-AMAIN
                                 35 *                                                                       00000700
                                 36 * ASSIGNS C1 TO A PARTITION OF C2$(I TO J).                             00000800
                                 37 *                                                                       00000900
                                 38          INPUT R4,            CHARACTER(C1)                            X00001000
                                                   R5,            INTEGER(I) SP                            X00001100
                                                   R6             INTEGER(J) SP                             00001200
0000004                          39+R4       EQU   4                                                        01-INPUT
0000005                          40+R5       EQU   5                                                        01-INPUT
0000006                          41+R6       EQU   6                                                        01-INPUT
                                 43          OUTPUT R2            CHARACTER(C2)                             00001300
0000002                          44+R2       EQU   2                                                        01-OUTPU
                                 46          WORK  R1,R3,R7,F0                                              00001400
0000001                          47+R1       EQU   1                                                        01-WORK
0000003                          48+R3       EQU   3                                                        01-WORK
0000007                          49+R7       EQU   7                                                        01-WORK
0000000                          50+F0       EQU   0                                                        01-WORK
                                 52 *                                                                       00001500
                                 53 * ALGORITHM:                                                            00001600
                                 54 *   IF I <= 0 THEN                                                      00001700
                                 55 *     DO;                                                               00001800
                                 56 *       I = 1;                                                          00001900
                                 57 *       SEND ERROR$(4:17);                                              00002000
                                 58 *     END;                                                              00002100
                                 59 *   IF J > MAXIMUM_LENGTH(C2) THEN                                      00002200
                                 60 *     DO;                                                               00002300
                                 61 *       J = MAX_LENGTH(C2);                                             00002400
                                 62 *       SEND ERROR$(4:17);                                              00002500
                                 63 *     END;                                                              00002600
                                 64 *   IF J > CURRENT_LENGTH((C2) THEN                                     00002700
                                 65 *     DESCRIPTOR(C2) = MAX_LENGTH(C2) || J;                             00002800
                                 66 *   LENGTH_OF_PARTITION = J - I + 1;                                    00002900
                                 67 *   IF LENGTH_OF_PARTITION < 0 THEN                                     00003000
                                 68 *     DO;                                                               00003100
                                 69 *       SEND ERROR$(4:17);                                              00003200
                                 70 *       RETURN;                                                         00003300
                                 71 *     END;                                                              00003400
                                 72 *   ELSE                                                                00003500
                                 73 *     IF LENGTH_OF_PARTITION = 0 THEN                                   00003600
                                 74 *       RETURN;  /* IF PARTITION LENGTH IS 0 THEN NOOP */               00003700
                                 75 *   NUMBER_OF_BLANKS = I - CURRENT_LENGTH(C2) - 1;                      00003800
                                 76 *   IF NUMBER_OF_BLANKS <= 0 THEN                                       00003900
                                 77 *     DO;                                                               00004000
                                 78 *       I = SHR(I + 1,1);                                               00004100
         CPAS--CHARACTER ASSIGN,PARTITIONED OUTPUT                                                             PAGE    3
  LOC  OBJECT CODE   ADR1 ADR2      SOURCE STATEMENT                                           AP101S 3.0 09.37 07/22/05
                                 79 *       NAME(C1) = NAME(C1 + I);                                        00004200
                                 80 *     END;                                                              00004300
                                 81 *   ELSE                                                                00004400
                                 82 *     DO;                                                               00004500
                                 83 *       NAME(C2) = NAME(C2) + SHR(CURRENT_LENGTH(C2) + 2,1);            00004600
                                 84 *       DO FOR K = 1 TO NUMBER_OF_BLANKS;                               00004700
                                 85 *         C2$(K) = HEX'0020';                                           00004800
                                 86 *       END;                                                            00004900
                                 87 *     END;                                                              00005000
                                 88 *   LENGTH_OF_PARTITION = LENGTH_OF_PARTITION + 1;                      00005100
                                 89 *   DO FOR L = 1 TO LENGTH_OF_PARTITION;                                00005200
                                 90 *     C2$(K + L) = C1$(L);                                              00005300
                                 91 *   END;                                                                00005400
                                 92 *                                                                       00005500
00002 77E7                       93          XR    R7,R7          CLEAR R7                                  00005600
00003 BF48           0012        94          STH   R7,PADBLANK    SET PADBLANK = 0                          00005700
00004 19E2                       95          LR    R1,R2          PUT ADDR(C2) INTO R1                      00005800
00005 1AE4                       96          LR    R2,R4          PUT ADDR(C1) INTO R2 FOR ADDRESSABILITY   00005900
00006 1DE5                       97          LR    R5,R5          SET CONDITION CODE                        00006000
00007 D90C           000B 0003   98          BP    L1             FIRST CHAR CAN'T HAVE NEG POSITION        00006100
00008 BDE3                0003   99          LFXI  R5,1           FIXUP: SET I = 1                          00006200
                                100          AERROR 17            I <= 0                                    00006300
                                101+*********ISSUE SEND ERROR SVC******************************************
00009 C9FB 0050      0050       102+         SVC   AERROR1        ISSUE SEND ERROR SVC                      01-AERRO
                                103+*********SEND ERROR SVC RETURNS CONTROL FOR STANDARD FIXUP*************
0000B 9B01           0000       104 L1       LH    R3,0(R1)       GET DESCRIPTOR OF DESTINATION             00006400
0000C B6E3 FF00           FF00  105          NHI   R3,X'FF00'     GET MAX LENGTH OF C2                      00006500
0000E F322                0008  106          SRL   R3,8           (SRL SUPPLIES LEADING ZEROES)             00006600
0000F 16E3                      107          CR    R6,R3          COMPARE J WITH MAXIMUM LENGTH OF C2       00006700
00010 DE0C           0014 0003  108          BLE   L5             ELSE FIXUP: J = MAXIMUM LENGTH            00006800
00011 1EE3                      109          LR    R6,R3          FIXUP IS MAXLEN                           00006900
                                110          AERROR 17            J > MAXLENGTH(C2)                         00007000
                                111+*********ISSUE SEND ERROR SVC******************************************
00012 C9FB 0050      0050       112+         SVC   AERROR1        ISSUE SEND ERROR SVC                      01-AERRO
                                113+*********SEND ERROR SVC RETURNS CONTROL FOR STANDARD FIXUP*************
00014 9B01           0000       114 L5       LH    R3,0(R1)       GET C2 DESCRIPTOR                         00007100
00015 B6E3 00FF           00FF  115          NHI   R3,X'00FF'     MASK OFF MAXIMUM LENGTH                   00007200
00017 16E3                      116 L2       CR    R6,R3          COMPARE J WITH CURRENT LENGTH OF C2       00007300
00018 DE18           001F 0006  117          BLE   L3             IF <= THEN GO TO L3                       00007400
00019 B101 00FF      0000 00FF  118          ZB    0(R1),X'00FF'  ELSE ZERO CURRENT LENGTH OF C2            00007500
0001B 8601           0000       119          AH    R6,0(R1)       GET MAXIMUM LENGTH OF C2 || J             00007600
0001C BE01           0000       120          STH   R6,0(R1)       RESET C2 DESCRIPTOR                       00007700
0001D B6E6 00FF           00FF  121          NHI   R6,X'00FF'     GET BACK J                                00007800
0001F 0EE5                      122 L3       SR    R6,R5          J-I+1=                                    00007900
00020 B0E6 0001           0001  123          AHI   R6,1           LENGTH OF PARTITION                       00008000
00022 DC34           0030 000D  124          BZ    L6             IF LENGTH OF PARTITION = 0 THEN NO ASSIGN 00008100
00023 D90C           0027 0003  125          BP    L4             IF >= 0 THEN GO TO L4                     00008200
                                126          AERROR 17            LENGTH OF PARTITION < 0                   00008300
                                127+*********ISSUE SEND ERROR SVC******************************************
00024 C9FB 0050      0050       128+         SVC   AERROR1        ISSUE SEND ERROR SVC                      01-AERRO
                                129+*********SEND ERROR SVC RETURNS CONTROL FOR STANDARD FIXUP*************
00026 DFA0           004F 0028  130          B     EXIT                                                     00008400
00027 9F02           0000       131 L4       LH    R7,0(R2)       GET DESCRIPTOR OF C1                      00008500
00028 B6E7 00FF           00FF  132          NHI   R7,X'00FF'     GET CURRENT LENGTH OF C1                  00008600
0002A 1CE7                      133          LR    R4,R7          SAVE CURRENT LENGTH OF C1 IN R4           00008700
                                134 *                             (IT MIGHT BE NEEDED)                      00008800
0002B 0FE6                      135          SR    R7,R6          GET CURRENT LENGTH(C1) - PARTITION LENGTH 00008900
0002C DD0C           0030 0003  136          BNM   L6             IF >=0 THEN GO TO L6                      00009000
0002D 1EE4                      137          LR    R6,R4          ELSE # OF CHARS TO STORE = LENGTH OF C1   00009100
0002E EFEF                      138          LCR   R7,R7          COMPUTE # OF RIGHT PAD BLANKS             00009200
0002F BF48           0012       139          STH   R7,PADBLANK    SAVE THIS NUMBER ON STACK                 00009300
00030 1FE5                      140 L6       LR    R7,R5          R7 <- I                                   00009400
00031 0FE3                      141          SR    R7,R3          I - CURRENT_LENGTH(C2) - 1 =              00009500
00032 B0E7 FFFF          FFFFF  142          AHI   R7,-1          # OF BLANKS                               00009600
00034 D914           003A 0005  143          BP    B2             IF > 0 THEN GO TO B2                      00009700
00035 B0E5 FFFF          FFFFF  144          AHI   R5,-1          I - 1 / 2 =                               00009800
00037 F506                0001  145          SRL   R5,1           # HALFWRDS TO I                           00009900
00038 01E5                      146          AR    R1,R5          RESET STBYTE PTR                          00010000
00039 DF1C           0041 0007  147          B     CSTC           START STORING CHARACTERS                  00010100
0003A F306                0001  148 B2       SRL   R3,1           # HALFWRDS TO ORIG CURRLEN                00010200
0003B 01E3                      149          AR    R1,R3          RESET STBYTE PTR                          00010300
                                150 *                                                                       00010400
                                151 * THE FOLLOWING LOOP PADS WITH PRECEDING BLANKS                         00010500
                                152 *                                                                       00010600
0003C EDF3 0020      0020       153 BST      LHI   R5,X'0020'     ' ' TO BE STORED                          00010700
                                154          ABAL  STBYTE                                                   00010800
                                155+         EXTRN #QSTBYTE                                                 01-ABAL
0003E E4F7                      156+         DC  X'E4F7'          CALL INTRINSIC INDIRECTLY                 01-ABAL
0003F 3800                      157+         DC  Y(#QSTBYTE+X'3800')                                       X01-ABAL
                                   +                              THROUGH QCON
         CPAS--CHARACTER ASSIGN,PARTITIONED OUTPUT                                                             PAGE    4
  LOC  OBJECT CODE   ADR1 ADR2      SOURCE STATEMENT                                           AP101S 3.0 09.37 07/22/05
00040 DF17           003C 0005  158          BCTB  R7,BST                                                   00010900
                                159 *                                                                       00011000
                                160 * THE FOLLWOING LOOP STORES THE CHARS OF C1 INTO C2                     00011100
                                161 *                                                                       00011200
00041 1EE6                      162 CSTC     LR    R6,R6          SET CONDITION CODE                        00011300
00042 DC14           0048 0005  163          BZ    STRPAD                                                   00011400
                                164 CST      ABAL  GTBYTE                                                   00011500
                                165+         EXTRN #QGTBYTE                                                 01-ABAL
00043 E4F7                      166+CST      DC  X'E4F7'          CALL INTRINSIC INDIRECTLY                 01-ABAL
00044 3800                      167+         DC  Y(#QGTBYTE+X'3800')                                       X01-ABAL
                                   +                              THROUGH QCON
                                168          ABAL  STBYTE                                                   00011600
00045 E4F7                      169+         DC  X'E4F7'          CALL INTRINSIC INDIRECTLY                 01-ABAL
00046 3800                      170+         DC  Y(#QSTBYTE+X'3800')                                       X01-ABAL
                                   +                              THROUGH QCON
00047 DE17           0043 0005  171          BCTB  R6,CST                                                   00011700
00048 9F48           0012       172 STRPAD   LH    R7,PADBLANK    GET # RIGHT PAD CHARS                     00011800
00049 DC14           004F 0005  173          BZ    EXIT           IF ZERO THEN RETURN                       00011900
                                174 *                                                                       00012000
                                175 * THE FOLLOWING LOOP STORES RIGHT PADDING BLANKS                        00012100
                                176 *                                                                       00012200
0004A EDF3 0020      0020       177 PADRIGHT LHI   R5,X'0020'     ELSE LOAD UP DEU BLANK                    00012300
                                178          ABAL  STBYTE                                                   00012400
0004C E4F7                      179+         DC  X'E4F7'          CALL INTRINSIC INDIRECTLY                 01-ABAL
0004D 3800                      180+         DC  Y(#QSTBYTE+X'3800')                                       X01-ABAL
                                   +                              THROUGH QCON
0004E DF17           004A 0005  181          BCTB  R7,PADRIGHT                                              00012500
                                182 EXIT     AEXIT                                                          00012600
                                183+*********RETURN TO CALLER**********************************************
0004F                           184+EXIT     DS    0H                                                       01-AEXIT
0004F 97E8                      185+$RET1    SRET  7,0            RETURN TO CALLER                          01-AEXIT
                                186+***********************************************************************
                                188          ACLOSE                                                         00012700
00050                           189+         LTORG                                                          02-ERRPA
                                190+****************ERROR PARAMETER AREA***********************************
00050                           191+#LCPAS   CSECT                                                          02-ERRPA
                                192+***  CPAS SENDS THE FOLLOWING ERROR                                     02-ERRPA
                                194+***  ERROR NUMBER 17 IN GROUP 4                                         02-ERRPA
00050 0014                      196+AERROR1  DC    H'20'          SVC CODE FOR SEND ERROR                   02-ERRPA
00051 0411                      197+         DC    Y(4*256+17)                      8 BIT GROUP AND NUMBER  02-ERRPA
                                198+****************END OF ERROR PARAMETER AREA****************************
                                199+         END                                                            01-ACLOS

                                                 RELOCATION DICTIONARY                                         PAGE    5
 POS.ID   REL.ID   FLAGS   ADDRESS                                                             AP101S 3.0 09.37 07/22/05
  0001     0002     00     00003F
  0001     0002     00     000046
  0001     0002     00     00004D
  0001     0003     00     000044
  0001     0004     00     00000A
  0001     0004     00     000013
  0001     0004     00     000025

                                             CROSS REFERENCE                                                   PAGE    6
SYMBOL    LEN    VALUE   DEFN   REFERENCES                                                     AP101S 3.0 09.37 07/22/05
AERROR1      1   000050   196    102   112   128
ARG2         2   000006    22
ARG4         2   00000A    24
ARG5         2   00000C    25
ARG6         2   00000E    26
ARG7         2   000010    27
B2           1   00003A   148    143
BST          2   00003C   153    158
CPAS         1 00000000    17     31
CST          1   000043   166    171
CSTC         1   000041   162    147
EXIT         1   00004F   184    130   173
F0           1 00000000    50
L1           2   00000B   104     98
L2           1   000017   116
L3           1   00001F   122    117
L4           2   000027   131    125
L5           2   000014   114    108
L6           1   000030   140    124   136
PADBLANK     1   000012    29     94   139   172
PADRIGHT     2   00004A   177    181
R1           1 00000001    47     95   104   104   114   114   118   119   119   120   120   146   149
R2           1 00000002    44     95    96   131   131
R3           1 00000003    48    104   105   106   107   109   114   115   116   141   148   149
R4           1 00000004    39     96   133   137
R5           1 00000005    40     97    97    99   122   140   144   145   146   153   177
R6           1 00000006    41    107   109   116   119   120   121   122   123   135   137   162   162   171
R7           1 00000007    49     93    93    94   131   132   133   135   138   138   139   140   141   142   158   172
                                 181
STACK        1 00000000    18     32
STACKEND     2   000014    30
STRPAD       2   000048   172    163
$RET1        1   00004F   185
#LCPAS       1 00000050   191
#QGTBYTE     1 00000000   165    167
#QSTBYTE     1 00000000   155    157   170   180

                                  DIAGNOSTIC CROSS REFERENCE AND ASSEMBLER SUMMARY                             PAGE    7
                                                                                               AP101S 3.0 09.37 07/22/05
     NO STATEMENTS FLAGGED IN THIS ASSEMBLY
   OVERRIDING PARAMETERS-  ESD,RLD,SYSPARM=PASS
   OPTIONS FOR THIS ASSEMBLY
    NODECK,LOAD,LIST,XREF,NORENT,TEST,NOMULT,ALGN,ESD ,RLD ,NOSREF,LINECT= 80,MSGLEVEL=   0,SYSPARM= PASS
   NO OVERRIDING DD NAMES
     132 CARDS FROM SYSIN     418 CARDS FROM SYSLIB
     271 LINES OUTPUT          15 CARDS OUTPUT
