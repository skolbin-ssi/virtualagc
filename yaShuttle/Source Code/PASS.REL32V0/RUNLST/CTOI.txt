
                                              EXTERNAL SYMBOL DICTIONARY                                       PAGE    1
SYMBOL   TYPE  ID  ADDR  LENGTH  LD ID                                                         AP101S 3.0 09.37 07/22/05
CTOI      SD 0001 000000 000068
CTOK      LD      000004        0001
CTOH      LD      00000A        0001
#QGTBYTE  ER 0002
#LCTOI    SD 0003 000068 000002

         CTOI--CHARACTER TO INTEGER AND BIT CONVERSION                                                         PAGE    2
  LOC  OBJECT CODE   ADR1 ADR2      SOURCE STATEMENT                                           AP101S 3.0 09.37 07/22/05
                                  2 *
                                  3 * WHEN DATA_REMOTE IS IN EFFECT, THE LDM INSTRUCTIONS ARE NOT NEEDED
                                  4 * AROUND THE CALL TO THIS RTL ROUTINE BECAUSE R1/R3 IS NOT USED AS
                                  5 * A BASE REGISTER. (CR12620)
                                  6 *
                                  7          MACRO                                                          00000200
                                  8          WORKAREA                                                       00000300
                                  9 SWITCH   DS    H                                                        00000400
                                 10          MEND                                                           00000500
                                 11 *                                                                       00000600
                                 12 CTOI     AMAIN                                                          00000700
                                 13+***********************************************************************
                                 14+*
                                 15+*        PRIMARY ENTRY POINT
                                 16+*
                                 17+***********************************************************************
00000                            18+CTOI     CSECT                                                          01-AMAIN
00000                            19+STACK    DSECT                                                          01-AMAIN
                                 20+*        DS    18H            STANDARD STACK AREA DEFINITION
00000                            21+         DS    F              PSW (LEFT HALF)                           01-AMAIN
00002                            22+         DS    2F             R0,R1                                     01-AMAIN
00006                            23+ARG2     DS    F              R2                                        01-AMAIN
00008                            24+         DS    F              R3                                        01-AMAIN
0000A                            25+ARG4     DS    F              R4                                        01-AMAIN
0000C                            26+ARG5     DS    F              R5                                        01-AMAIN
0000E                            27+ARG6     DS    F              R6                                        01-AMAIN
00010                            28+ARG7     DS    F              R7                                        01-AMAIN
                                 29+*        END OF STANDARD STACK AREA
00012                            30+SWITCH   DS    H                                                        02-00009
00013 C9FB
00014                            31+STACKEND DS    0F             END OF COMBINED STACK AREA                01-AMAIN
00000                            32+CTOI     CSECT                                                          01-AMAIN
0000000                          33+         USING STACK,0        ADDRESS STACK AREA                        01-AMAIN
00000 B624 0000      0009 0000   34+         NIST  9(0),0         CLEAR ON ERROR INFO (LCL DATA PTR)        01-AMAIN
                                 36 *                                                                       00000800
                                 37 * CONVERT A CHARACTER STRING, C1, TO A DOUBLE PRECISION INTEGER         00000900
                                 38 *   WHERE C1 CONTAINS DECIMAL CHARACTERS AND '-' AND '+'.               00001000
                                 39 *                                                                       00001100
                                 40          INPUT R2             CHARACTER(C1)                             00001200
0000002                          41+R2       EQU   2                                                        01-INPUT
                                 43          OUTPUT R5            INTEGER DP                                00001300
0000005                          44+R5       EQU   5                                                        01-OUTPU
                                 46          WORK  R3,R4,R6,F0                                              00001400
0000003                          47+R3       EQU   3                                                        01-WORK
0000004                          48+R4       EQU   4                                                        01-WORK
0000006                          49+R6       EQU   6                                                        01-WORK
0000000                          50+F0       EQU   0                                                        01-WORK
                                 52 *                                                                       00001500
                                 53 * ALGORITHM:                                                            00001600
                                 54 *   GO TO MERGE;                                                        00001700
                                 55 *                                                                       00001800
00002 A148           0012        56          ZH    SWITCH                                                   00001900
00003 DF2C           000F 000B   57          B     MERGE                                                    00002000
                                 58 *                                                                       00002100
                                 59 CTOK     AENTRY                                                         00002200
                                 60+***********************************************************************
                                 61+*
                                 62+*        SECONDARY ENTRY POINT
                                 63+*
                                 64+***********************************************************************
00004                            65+CTOK     DS    0H                                                       01-AENTR
                                 66+         ENTRY CTOK                                                     01-AENTR
00004 B624 0000      0009 0000   67+         NIST  9(0),0         CLEAR ERROR VECTOR POINTER                01-AENTR
                                 69 *                                                                       00002300
                                 70 * CONVERT A CHARACTER STRING, C1, TO A BIT STRING WHERE C1 CONTAINS     00002400
                                 71 *   DECIMAL CHARACTERS.                                                 00002500
                                 72 *                                                                       00002600
                                 73          INPUT R2             CHARACTER(C1)                             00002700
                                 75          OUTPUT R5            BIT(32)                                   00002800
                                 77          WORK  R3,R4,R6,F0                                              00002900
                                 79 *                                                                       00003000
                                 80 * ALGORITHM:                                                            00003100
         CTOI--CHARACTER TO INTEGER AND BIT CONVERSION                                                         PAGE    3
  LOC  OBJECT CODE   ADR1 ADR2      SOURCE STATEMENT                                           AP101S 3.0 09.37 07/22/05
                                 81 *   KTYPE = ON;                                                         00003200
                                 82 *   GO TO MERGE;                                                        00003300
                                 83 *                                                                       00003400
00006 A148           0012        84          ZH    SWITCH                                                   00003500
00007 B248 1000      0012 1000   85          SB    SWITCH,KTYPE                                             00003600
00009 DF14           000F 0005   86          B     MERGE                                                    00003700
                                 87 *                                                                       00003800
                                 88 CTOH     AENTRY                                                         00003900
                                 89+***********************************************************************
                                 90+*
                                 91+*        SECONDARY ENTRY POINT
                                 92+*
                                 93+***********************************************************************
0000A                            94+CTOH     DS    0H                                                       01-AENTR
                                 95+         ENTRY CTOH                                                     01-AENTR
0000A B624 0000      0009 0000   96+         NIST  9(0),0         CLEAR ERROR VECTOR POINTER                01-AENTR
                                 98 *                                                                       00004000
                                 99 * CONVERT A CHARACTER STRING, C1, TO A SINGLE PRECISION INTEGER         00004100
                                100 *   WHERE C1 CONTAINS DECIMAL CHARACTERS & '-' & '+'.                   00004200
                                101 *                                                                       00004300
                                102          INPUT R2             CHARACTER(C1)                             00004400
                                104          OUTPUT R5            INTEGER SP                                00004500
                                106          WORK  R3,R4,R6,F0                                              00004600
                                108 *                                                                       00004700
                                109 * ALGORITHM:                                                            00004800
                                110 *   HTYPE = ON;                                                         00004900
                                111 * MERGE:                                                                00005000
                                112 *   TEMP = 0;                                                           00005100
                                113 *   CURR_LEN = CURRENT_LENGTH(C1);                                      00005200
                                114 *   DO WHILE TRUE;                                                      00005300
                                115 *     IF C1$(2 AT 1) = '  ' THEN                                        00005400
                                116 *       DO;                                                             00005500
                                117 *         NAME(C1) = NAME(C1) + 1;                                      00005600
                                118 *         CURR_LEN = CURR_LEN - 2;                                      00005700
                                119 *         IF CURR_LEN > 0 THEN                                          00005800
                                120 *           REPEAT;                                                     00005900
                                121 *         ELSE                                                          00006000
                                122 *           DO;                                                         00006100
                                123 *             SEND ERROR$(4:22);                                        00006200
                                124 *             RETURN 0;                                                 00006300
                                125 *           END;                                                        00006400
                                126 *       END;                                                            00006500
                                127 *     ELSE                                                              00006600
                                128 *       EXIT;                                                           00006700
                                129 *   END;                                                                00006800
                                130 *   CURR_CHAR = GTBYTE;                                                 00006900
                                131 *   IF CURR_CHAR = ' ' THEN                                             00007000
                                132 *     DO;                                                               00007100
                                133 *       CURR_LEN = CURR_LEN - 1;                                        00007200
                                134 *       IF CURR_LEN = 0 THEN                                            00007300
                                135 *         DO;                                                           00007400
                                136 *           SEND ERROR$(4:22);                                          00007500
                                137 *           RETURN 0;                                                   00007600
                                138 *         END;                                                          00007700
                                139 *       CURR_CHAR = GTBYTE;                                             00007800
                                140 *     END;                                                              00007900
                                141 *   IF CURR_CHAR < '0' THEN                                             00008000
                                142 *     DO;                                                               00008100
                                143 *       IF KTYPE THEN                                                   00008200
                                144 *         DO;                                                           00008300
                                145 *           SEND ERROR$(4:22);                                          00008400
                                146 *           RETURN 0;                                                   00008500
                                147 *         END;                                                          00008600
                                148 *       IF CURR_CHAR = '+' THEN                                         00008700
                                149 *         ;                                                             00008800
                                150 *       ELSE                                                            00008900
                                151 *         IF CURR_CHAR = '-' THEN                                       00009000
                                152 *           VALID_SIGN = ON;                                            00009100
                                153 *         ELSE                                                          00009200
                                154 *           DO;                                                         00009300
                                155 *             SEND ERROR$(4:22);                                        00009400
                                156 *             RETURN 0;                                                 00009500
                                157 *           END;                                                        00009600
                                158 *     END;                                                              00009700
                                159 *   ELSE                                                                00009800
                                160 *     DO;                                                               00009900
         CTOI--CHARACTER TO INTEGER AND BIT CONVERSION                                                         PAGE    4
  LOC  OBJECT CODE   ADR1 ADR2      SOURCE STATEMENT                                           AP101S 3.0 09.37 07/22/05
                                161 *       IF CURR_CHAR > 9 THEN                                           00010000
                                162 *         DO;                                                           00010100
                                163 *           SEND ERROR$(4:22);                                          00010200
                                164 *           RETURN 0;                                                   00010300
                                165 *         END;                                                          00010400
                                166 *       VALID_DIGIT = ON;                                               00010500
                                167 *       TEMP = TEMP + DIGIT;                                            00010600
                                168 *     END;                                                              00010700
                                169 *   CURR_CHAR = GET_CHAR;                                               00010800
                                170 *   CURR_LEN = CURR_LEN - 1;                                            00010900
                                171 *   DO WHILE CURR_LEN > 0;                                              00011000
                                172 *     IF CURR_CHAR < '0' THEN                                           00011100
                                173 *       DO;                                                             00011200
                                174 *         IF VALID_DIGIT THEN                                           00011300
                                175 *           DO;                                                         00011400
                                176 *             DO WHILE TRUE;                                            00011500
                                177 *               IF CURR_CHAR = ' ' THEN                                 00011600
                                178 *                 CURR_LEN = CURR_LEN - 1;                              00011700
                                179 *               ELSE                                                    00011800
                                180 *                 DO;                                                   00011900
                                181 *                   SEND ERROR$(4:22);                                  00012000
                                182 *                   RETURN 0;                                           00012100
                                183 *                 END;                                                  00012200
                                184 *             END;                                                      00012300
                                185 *             RETURN TEMP;                                              00012400
                                186 *           END;                                                        00012500
                                187 *         ELSE                                                          00012600
                                188 *           DO;                                                         00012700
                                189 *             SEND ERROR$(4:22);                                        00012800
                                190 *             RETURN 0;                                                 00012900
                                191 *           END;                                                        00013000
                                192 *       END;                                                            00013100
                                193 *     ELSE                                                              00013200
                                194 *       IF CURR_CHAR > '9' THEN                                         00013300
                                195 *         DO;                                                           00013400
                                196 *           SEND ERROR$(4:22);                                          00013500
                                197 *           RETURN 0;                                                   00013600
                                198 *         END;                                                          00013700
                                199 *       ELSE                                                            00013800
                                200 *         DO;                                                           00013900
                                201 *           VALID_DIGIT = ON;                                           00014000
                                202 *           TEMP = TEMP + DIGIT;                                        00014100
                                203 *           CURR_LEN = CURR_LEN - 1;                                    00014200
                                204 *         END;                                                          00014300
                                205 *   END;                                                                00014400
                                206 *   IF HTYPE THEN                                                       00014500
                                207 *     TEMP = SLL(TEMP,16);                                              00014600
                                208 *  IF VALID_SING THEN                                                   00014700
                                209 *     TEMP = - TEMP;                                                    00014800
                                210 *  RETURN TEMP;                                                         00014900
                                211 *                                                                       00015000
0000C A148           0012       212          ZH    SWITCH                                                   00015100
0000D B248 8000      0012 8000  213          SB    SWITCH,HTYPE                                             00015200
                                214 *                                                                       00015300
0000F 76E6                      215 MERGE    XR    R6,R6          CLEAR R6 (WILL BE USED AS ACCUMULATOR)    00015400
00010 9B02           0000       216          LH    R3,0(R2)       GET C1 DESCRIPTOR                         00015500
00011 B6E3 00FF           00FF  217          NHI   R3,X'00FF'     LENGTH IN BYTES IN R3                     00015600
00013 EA02           0000       218          LA    R2,0(R2)       MAKE SURE LOW HALF=0                      00015700
                                219 *                                                                       00015800
                                220 * STRIP LEADING BLANKS                                                  00015900
                                221 *                                                                       00016000
00014 9D06           0001       222 LSTRP    LH    R5,1(R2)       GET FIRST 2 CHARS                         00016100
00015 B5E5 2020           2020  223          CHI   R5,X'2020'     COMPARE WITH TWO BLANKS                   00016200
00017 DB18           001E 0006  224          BNE   CK1            BUMP C1 PTR                               00016300
00018 EA06           0001       225          LA    R2,1(R2)                                                 00016400
00019 B0E3 FFFE           FFFE  226          AHI   R3,X'FFFE'     ADD -2 TO LENGTH                          00016500
0001B D922           0014 0008  227          BP    LSTRP          ELSE ERROR                                00016600
0001C C7F7 0043      0061 0043  228          B     ERROR                                                    00016700
                                229 *                                                                       00016800
0001E E2FB 8000      8000       230 CK1      IAL   R2,X'8000'     SET RIGHT HALF BIT FOR GTBYTE             00016900
00020 F522                0008  231          SRL   R5,8           PUT FIRST CHAR IN LOWER BYTE              00017000
00021 B6E5 FFFF           FFFF  232          NHI   R5,X'FFFF'     MASK OUT RIGHT HALF OF REG.               00017100
00023 B5E5 0020           0020  233          CHI   R5,X'20'       COMPARE WITH ' '                          00017200
00025 DB18           002C 0006  234          BNE   SIGN1          IF ^= THEN CHECK WHAT IT COULD BE         00017300
00026 D3F7 0002      002A 0002  235          BCT   R3,SIGN        GO TO CHECK FOR SIGN AND REDUCE           00017400
                                236 *                             LENGTH BY ONE                             00017500
00028 C7F7 0037      0061 0037  237          B     ERROR          ELSE ERROR                                00017600
                                238 *                                                                       00017700
                                239 * CHECK SIGN                                                            00017800
                                240 *                                                                       00017900
         CTOI--CHARACTER TO INTEGER AND BIT CONVERSION                                                         PAGE    5
  LOC  OBJECT CODE   ADR1 ADR2      SOURCE STATEMENT                                           AP101S 3.0 09.37 07/22/05
                                241 SIGN     ABAL  GTBYTE         NEXT CHARACTER IN R5                      00018000
                                242+         EXTRN #QGTBYTE                                                 01-ABAL
0002A E4F7                      243+SIGN     DC  X'E4F7'          CALL INTRINSIC INDIRECTLY                 01-ABAL
0002B 3800                      244+         DC  Y(#QGTBYTE+X'3800')                                       X01-ABAL
                                   +                              THROUGH QCON
0002C B5E5 0030           0030  245 SIGN1    CHI   R5,X'30'       C'0'                                      00018100
0002E DD3C           003E 000F  246          BNL   CHK9           IF CHAR >= '0' THEN CHECK AGAINST '9'     00018200
0002F B348 1000      0012 1000  247          TB    SWITCH,KTYPE   TEST SWITCH FOR K TYPE                    00018300
00031 D9BC           0061 002F  248          BO    ERROR          IF BIT@DEC THEN INVALID CHARACTER         00018400
00032 B5E5 002B           002B  249          CHI   R5,X'2B'       C'+'                                      00018500
00034 DC54           004A 0015  250          BE    GETB           GET NEXT CHARACTER IF '+'                 00018600
00035 B5E5 002D           002D  251          CHI   R5,X'2D'       C'-'                                      00018700
00037 DBA4           0061 0029  252          BNE   ERROR          INVALID CHARACTER IF NOT '-'              00018800
00038 B248 2000      0012 2000  253          SB    SWITCH,VSIGN   SET MINUS FLAG AND                        00018900
0003A DF3C           004A 000F  254          B     GETB           GET NEXT CHARACTER                        00019000
                                255 *                                                                       00019100
                                256 *  MAIN CHARACTER TO INTEGER CONVERSION LOOP                            00019200
                                257 *                                                                       00019300
0003B B5E5 0030           0030  258 NOSIGNS  CHI   R5,X'30'       C'0'                                      00019400
0003D DA64           0057 0019  259          BL    NOTNUM                                                   00019500
0003E B5E5 0039           0039  260 CHK9     CHI   R5,X'39'       C'9'                                      00019600
00040 D980           0061 0020  261          BH    ERROR                                                    00019700
00041 B248 4000      0012 4000  262          SB    SWITCH,VDIGIT  SET FLAG FOR VALID DIGIT ENCOUNTERED      00019800
00043 46F7 0021      0066 0021  263          M     R6,F10         MULTIPLY ACCUMULATOR BY CONSTANT          00019900
00045 FE10                0004  264          SLDL  R6,4                                                     00020000
00046 B6E5 000F           000F  265          NHI   R5,X'000F'     GET LAST PART OF DIGIT                    00020100
00048 F542                0010  266          SRL   R5,16          PUT IN LOWER HALF OF REG                  00020200
00049 06E5                      267          AR    R6,R5          PUT RESULT IN WITH ACCUMULATOR            00020300
                                268 GETB     ABAL  GTBYTE         GET NEXT CHAR                             00020400
0004A E4F7                      269+GETB     DC  X'E4F7'          CALL INTRINSIC INDIRECTLY                 01-ABAL
0004B 3800                      270+         DC  Y(#QGTBYTE+X'3800')                                       X01-ABAL
                                   +                              THROUGH QCON
0004C DB4B           003B 0012  271          BCT   R3,NOSIGNS     BRANCH BACK TO TESTING                    00020500
                                272 *                                                                       00020600
0004D B348 8000      0012 8000  273 OUT      TB    SWITCH,HTYPE   SEE IF HALFWORD ENTRY                     00020700
0004F DC04           0051 0001  274          BZ    STO            IF ZERO THEN CHECK SIGN                   00020800
00050 F640                0010  275          SLL   R6,16          ELSE CONVERT TO HALFWORD                  00020900
                                276 *                                                                       00021000
00051 B348 2000      0012 2000  277 STO      TB    SWITCH,VSIGN   TEST FOR VALID SIGN                       00021100
00053 DC04           0055 0001  278          BZ    STR            IF VSIGN NOT ON THEN DONE                 00021200
00054 EEEE                      279          LACR  R6,R6          ELSE COMPLEMENT                           00021300
00055 3618           000C       280 STR      ST    R6,ARG5                                                  00021400
                                281 EXIT     AEXIT                                                          00021500
                                282+*********RETURN TO CALLER**********************************************
00056                           283+EXIT     DS    0H                                                       01-AEXIT
00056 97E8                      284+$RET1    SRET  7,0            RETURN TO CALLER                          01-AEXIT
                                285+***********************************************************************
                                287 *                                                                       00021600
00057 B348 4000      0012 4000  288 NOTNUM   TB    SWITCH,VDIGIT  TEST FOR A VALID DIGIT                    00021700
00059 DC1C           0061 0007  289          BZ    ERROR          IF NOT ON THEN ERROR                      00021800
0005A B5E5 0020           0020  290 ENDLOOP  CHI   R5,X'20'       COMPARE WITH ' '                          00021900
0005C DB10           0061 0004  291          BNE   ERROR          IF ^= THEN ERROR                          00022000
                                292          ABAL  GTBYTE         GET NEXT BYTE                             00022100
0005D E4F7                      293+         DC  X'E4F7'          CALL INTRINSIC INDIRECTLY                 01-ABAL
0005E 3800                      294+         DC  Y(#QGTBYTE+X'3800')                                       X01-ABAL
                                   +                              THROUGH QCON
0005F DB1B           005A 0006  295          BCT   R3,ENDLOOP     FINISH UP CHARS                           00022200
00060 DF52           004D 0014  296          B     OUT                                                      00022300
                                297 *                                                                       00022400
                                298 ERROR    AERROR 22            INTERNAL CONVERSION ERROR                 00022500
                                299+*********ISSUE SEND ERROR SVC******************************************
00061 C9FB 0068      0068       300+ERROR    SVC   AERROR1        ISSUE SEND ERROR SVC                      01-AERRO
                                301+*********SEND ERROR SVC RETURNS CONTROL FOR STANDARD FIXUP*************
00063 0EE6                      302          SR    R6,R6                                                    00022600
00064 DF42           0055 0010  303          B     STR                                                      00022700
                                304 *                                                                       00022800
0008000                         305 HTYPE    EQU   X'8000'                                                  00022900
0004000                         306 VDIGIT   EQU   X'4000'                                                  00023000
0002000                         307 VSIGN    EQU   X'2000'                                                  00023100
0001000                         308 KTYPE    EQU   X'1000'                                                  00023200
00065 C9FB
00066 50000000                  309 F10      DC    F'0.625'                                                 00023300
                                310          ACLOSE                                                         00023400
00068                           311+         LTORG                                                          02-ERRPA
                                312+****************ERROR PARAMETER AREA***********************************
00068                           313+#LCTOI   CSECT                                                          02-ERRPA
                                314+***  CTOI SENDS THE FOLLOWING ERROR                                     02-ERRPA
         CTOI--CHARACTER TO INTEGER AND BIT CONVERSION                                                         PAGE    6
  LOC  OBJECT CODE   ADR1 ADR2      SOURCE STATEMENT                                           AP101S 3.0 09.37 07/22/05
                                316+***  ERROR NUMBER 22 IN GROUP 4                                         02-ERRPA
00068 0014                      318+AERROR1  DC    H'20'          SVC CODE FOR SEND ERROR                   02-ERRPA
00069 0416                      319+         DC    Y(4*256+22)                      8 BIT GROUP AND NUMBER  02-ERRPA
                                320+****************END OF ERROR PARAMETER AREA****************************
                                321+         END                                                            01-ACLOS

                                                 RELOCATION DICTIONARY                                         PAGE    7
 POS.ID   REL.ID   FLAGS   ADDRESS                                                             AP101S 3.0 09.37 07/22/05
  0001     0002     00     00002B
  0001     0002     00     00004B
  0001     0002     00     00005E
  0001     0003     00     000062

                                             CROSS REFERENCE                                                   PAGE    8
SYMBOL    LEN    VALUE   DEFN   REFERENCES                                                     AP101S 3.0 09.37 07/22/05
AERROR1      1   000068   318    300
ARG2         2   000006    23
ARG4         2   00000A    25
ARG5         2   00000C    26    280
ARG6         2   00000E    27
ARG7         2   000010    28
CHK9         2   00003E   260    246
CK1          2   00001E   230    224
CTOH         1   00000A    94     95
CTOI         1 00000000    18     32
CTOK         1   000004    65     66
ENDLOOP      2   00005A   290    295
ERROR        2   000061   300    228   237   248   252   261   289   291
EXIT         1   000056   283
F0           1 00000000    50
F10          2   000066   309    263
GETB         1   00004A   269    250   254
HTYPE        1 00008000   305    213   273
KTYPE        1 00001000   308     85   247
LSTRP        2   000014   222    227
MERGE        1   00000F   215     57    86
NOSIGNS      2   00003B   258    271
NOTNUM       2   000057   288    259
OUT          2   00004D   273    296
R2           1 00000002    41    216   216   218   218   218   222   222   225   225   225   230
R3           1 00000003    47    216   217   226   235   271   295
R4           1 00000004    48
R5           1 00000005    44    222   223   231   232   233   245   249   251   258   260   265   266   267   290
R6           1 00000006    49    215   215   263   264   267   275   279   279   280   302   302
SIGN         1   00002A   243    235
SIGN1        2   00002C   245    234
STACK        1 00000000    19     33
STACKEND     2   000014    31
STO          2   000051   277    274
STR          2   000055   280    278   303
SWITCH       1   000012    30     56    84    85   212   213   247   253   262   273   277   288
VDIGIT       1 00004000   306    262   288
VSIGN        1 00002000   307    253   277
$RET1        1   000056   284
#LCTOI       1 00000068   313
#QGTBYTE     1 00000000   242    244   270   294

                                  DIAGNOSTIC CROSS REFERENCE AND ASSEMBLER SUMMARY                             PAGE    9
                                                                                               AP101S 3.0 09.37 07/22/05
     NO STATEMENTS FLAGGED IN THIS ASSEMBLY
   OVERRIDING PARAMETERS-  ESD,RLD,SYSPARM=PASS
   OPTIONS FOR THIS ASSEMBLY
    NODECK,LOAD,LIST,XREF,NORENT,TEST,NOMULT,ALGN,ESD ,RLD ,NOSREF,LINECT= 80,MSGLEVEL=   0,SYSPARM= PASS
   NO OVERRIDING DD NAMES
     239 CARDS FROM SYSIN     484 CARDS FROM SYSLIB
     390 LINES OUTPUT          17 CARDS OUTPUT
