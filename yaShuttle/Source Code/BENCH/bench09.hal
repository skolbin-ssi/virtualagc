 BITS: PROGRAM;
   REPLACE ITER_MAX BY "300";
   REPLACE STORAGE_MAX BY "500";
   REPLACE STORAGE_CRIT BY "192";
C
C VARIABLES FOR RANDOM NUMBER GENERATOR
C
  DECLARE RM INTEGER DOUBLE INITIAL(2**20);
  DECLARE FM SCALAR DOUBLE CONSTANT(2**20);
  DECLARE RA INTEGER DOUBLE CONSTANT(2**10 + 3);
  DECLARE RX INTEGER DOUBLE INITIAL(566387);
C
C LOCAL VARIABLES:
C
  DECLARE SCALAR DOUBLE, LIMIT;
  DECLARE BIT_TYPES ARRAY(3) CHARACTER(5) INITIAL(' 32/1',' 32/2',
    ' 32/3');
  DECLARE INTEGER DOUBLE, BIT_NDXD, ITER_NDX, FAIL_CTR INITIAL(0);
  DECLARE INTEGER DOUBLE, IVALUE, POWERS ARRAY(31) INITIAL(1.0,*);
  DECLARE INTEGER SINGLE, BIT_CNT, IDEX1, IDEX2, IDEX3,
    BIT_NDX, IARRAY, BIT_LOC;
  DECLARE INTEGER DOUBLE, ISUB, IARRAYD, BIT_LOCD,
    STORAGE_CNT INITIAL(0), STORAGE_NDX, REAL_IVALUE;
  DECLARE ARRAY(STORAGE_MAX) BIT(32) REMOTE,
    IVALUE_DATA INITIAL(BIN'0');
  DECLARE ARRAY(STORAGE_MAX) INTEGER DOUBLE REMOTE,
    IVALUE_ARR INITIAL(0);
  DECLARE BOOLEAN, SUCCESS_FLAG INITIAL(FALSE);
  DECLARE BITVAR32_1 ARRAY(64) BIT(32) INITIAL(BIN'0');
  DECLARE BITVAR32_2 ARRAY(8,8) BIT(32) INITIAL(BIN'0');
  DECLARE BITVAR32_3 ARRAY(4,4,4) BIT(32) INITIAL(BIN'0');
  DECLARE MSKVAR32_1 ARRAY(64) BIT(32) INITIAL(BIN'0');
  DECLARE MSKVAR32_2 ARRAY(8,8) BIT(32) INITIAL(BIN'0');
  DECLARE MSKVAR32_3 ARRAY(4,4,4) BIT(32) INITIAL(BIN'0');
C
 I_RANDFUNC: PROCEDURE (LOWLIM, HIGHLIM) ASSIGN (OUTVAL);
  DECLARE SCALAR DOUBLE, LOWLIM, HIGHLIM;
  DECLARE INTEGER DOUBLE, OUTVAL;
  DECLARE SCALAR DOUBLE, TEMP, TEMP1;
  RX = MOD(RA RX,RM);
  TEMP = RX/FM;
  TEMP1 = (1 - TEMP) LOWLIM + TEMP (HIGHLIM + .999999);
  OUTVAL = FLOOR(TEMP1);
  CLOSE I_RANDFUNC;
C
 STUFF_BIT32: PROCEDURE;
   DO CASE IARRAY;
     DO;
       DO FOR TEMPORARY IX = 1 TO BIT_CNT;
         IF MSKVAR32_1$(IDEX1:BIT_LOC + IX - 1) = BIN'1'
           THEN RETURN;
       END;
       DO FOR TEMPORARY IX = 1 TO BIT_CNT;
         MSKVAR32_1$(IDEX1:BIT_LOC + IX - 1) = BIN'1';
       END;
       SUCCESS_FLAG = TRUE;
       DO CASE BIT_CNT;
         BITVAR32_1$(IDEX1:1 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:2 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:3 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:4 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:5 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:6 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:7 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:8 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:9 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:10 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:11 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:12 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:13 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:14 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:15 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:16 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:17 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:18 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:19 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:20 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:21 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:22 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:23 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:24 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:25 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:26 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:27 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:28 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:29 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:30 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:31 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_1$(IDEX1:32 AT BIT_LOC) = BIT(IVALUE);
       END;
     END;
     DO;
       DO FOR TEMPORARY IX = 1 TO BIT_CNT;
         IF MSKVAR32_2$(IDEX1,IDEX2:BIT_LOC + IX - 1) = BIN'1'
           THEN RETURN;
       END;
       DO FOR TEMPORARY IX = 1 TO BIT_CNT;
         MSKVAR32_2$(IDEX1,IDEX2:BIT_LOC + IX - 1) = BIN'1';
       END;
       SUCCESS_FLAG = TRUE;
       DO CASE BIT_CNT;
         BITVAR32_2$(IDEX1,IDEX2:1 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:2 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:3 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:4 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:5 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:6 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:7 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:8 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:9 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:10 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:11 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:12 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:13 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:14 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:15 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:16 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:17 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:18 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:19 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:20 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:21 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:22 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:23 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:24 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:25 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:26 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:27 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:28 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:29 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:30 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:31 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_2$(IDEX1,IDEX2:32 AT BIT_LOC) = BIT(IVALUE);
       END;
     END;
     DO;
       DO FOR TEMPORARY IX = 1 TO BIT_CNT;
         IF MSKVAR32_3$(IDEX1,IDEX2,IDEX3:BIT_LOC + IX - 1) = BIN'1'
           THEN RETURN;
       END;
       DO FOR TEMPORARY IX = 1 TO BIT_CNT;
         MSKVAR32_3$(IDEX1,IDEX2,IDEX3:BIT_LOC + IX - 1) = BIN'1';
       END;
       SUCCESS_FLAG = TRUE;
       DO CASE BIT_CNT;
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:1 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:2 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:3 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:4 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:5 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:6 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:7 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:8 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:9 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:10 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:11 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:12 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:13 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:14 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:15 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:16 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:17 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:18 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:19 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:20 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:21 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:22 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:23 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:24 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:25 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:26 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:27 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:28 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:29 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:30 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:31 AT BIT_LOC) = BIT(IVALUE);
         BITVAR32_3$(IDEX1,IDEX2,IDEX3:32 AT BIT_LOC) = BIT(IVALUE);
       END;
     END;
   END;
 CLOSE STUFF_BIT32;
 FETCH_BIT32: PROCEDURE;
   DO CASE IARRAY;
     DO CASE BIT_CNT;
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:1 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:2 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:3 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:4 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:5 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:6 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:7 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:8 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:9 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:10 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:11 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:12 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:13 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:14 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:15 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:16 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:17 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:18 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:19 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:20 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:21 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:22 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:23 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:24 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:25 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:26 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:27 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:28 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:29 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:30 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:31 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_1$(IDEX1:32 AT BIT_LOC);
     END;
     DO CASE BIT_CNT;
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:1 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:2 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:3 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:4 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:5 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:6 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:7 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:8 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:9 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:10 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:11 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:12 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:13 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:14 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:15 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:16 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:17 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:18 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:19 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:20 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:21 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:22 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:23 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:24 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:25 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:26 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:27 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:28 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:29 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:30 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:31 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_2$(IDEX1,IDEX2:32 AT BIT_LOC);
     END;
     DO CASE BIT_CNT;
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:1 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:2 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:3 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:4 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:5 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:6 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:7 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:8 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:9 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:10 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:11 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:12 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:13 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:14 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:15 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:16 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:17 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:18 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:19 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:20 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:21 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:22 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:23 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:24 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:25 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:26 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:27 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:28 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:29 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:30 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:31 AT BIT_LOC);
       SUBBIT(IVALUE) = BITVAR32_3$(IDEX1,IDEX2,IDEX3:32 AT BIT_LOC);
     END;
   END;
 CLOSE FETCH_BIT32;
 STUFF_DUMMY: PROCEDURE;
 CLOSE STUFF_DUMMY;
 CALC_IDEX123: PROCEDURE;
   IDEX2, IDEX3 = 0;
   DO CASE IARRAY;
     DO;
       IDEX1 = ISUB;
     END;
     DO;
       IDEX1 = DIV(ISUB - 1,8) + 1;
       IDEX2 = ISUB - 8 (IDEX1 - 1);
     END;
     DO;
       IDEX1 = DIV(ISUB - 1,16) + 1;
       IDEX2 = DIV(ISUB - 16 (IDEX1 - 1) - 1, 4) + 1;
       IDEX3 = ISUB - 16 (IDEX1 - 1) - 4 (IDEX2 - 1);
     END;
   END;
 CLOSE CALC_IDEX123;
C
 STUFF_BIT_SUB: PROCEDURE;
   BIT_NDX = 1;
C
C NOW GENERATE A SECOND RANDOM INTEGER OF THE CORRECT SIZE, PLUS A
C SUBSCRIPT IN THE RANGE 1-64, PLUS A SELECTION INTEGER IN THE RANGE
C 1-3.
C
   IF STORAGE_CNT <= STORAGE_CRIT/2 THEN
     LIMIT = 2**31-1;
   ELSE
     LIMIT = 2**8-1;
   CALL I_RANDFUNC(0,LIMIT) ASSIGN(IVALUE);
   CALL I_RANDFUNC(1,64) ASSIGN(ISUB);
   CALL I_RANDFUNC(1,3) ASSIGN(IARRAYD);
   IARRAY = IARRAYD;
   CALL CALC_IDEX123;
C
C DETERMINE HOW MANY BITS ARE NECESSARY TO HOLD THE VALUE
C
   BIT_CNT = 1;
   IF IVALUE > 0 THEN
     DO FOR TEMPORARY IX = 31 TO 1 BY -1 WHILE BIT_CNT = 1;
       IF POWERS$(IX) <= IVALUE THEN BIT_CNT = IX;
     END;
C
C DETERMINE STARTING LOCATION WITHIN THE BIT STRING
C
   CALL I_RANDFUNC(1,33-BIT_CNT) ASSIGN(BIT_LOCD);
   BIT_LOC = BIT_LOCD;
C
C NOW STUFF THE BIT STRING AWAY
C
   SUCCESS_FLAG = FALSE;
   CALL STUFF_BIT32;
   IF SUCCESS_FLAG THEN DO;
     STORAGE_CNT = STORAGE_CNT + 1;
     IVALUE_DATA$(STORAGE_CNT:1 TO 3) = BIT(BIT_NDX);
     IVALUE_DATA$(STORAGE_CNT:4 TO 5) = BIT(IARRAY);
     IVALUE_DATA$(STORAGE_CNT:6 TO 12) = BIT(ISUB);
     IVALUE_DATA$(STORAGE_CNT:13 TO 18) = BIT(BIT_CNT);
     IVALUE_DATA$(STORAGE_CNT:19 TO 24) = BIT(BIT_LOC);
     IVALUE_ARR$(STORAGE_CNT) = IVALUE;
   END;
 CLOSE STUFF_BIT_SUB;
C
 FETCH_BIT_SUB: PROCEDURE;
   SUBBIT(BIT_NDX) = IVALUE_DATA$(STORAGE_NDX:1 TO 3);
   SUBBIT(IARRAY) = IVALUE_DATA$(STORAGE_NDX:4 TO 5);
   SUBBIT(ISUB) = IVALUE_DATA$(STORAGE_NDX:6 TO 12);
   CALL CALC_IDEX123;
   SUBBIT(BIT_CNT) = IVALUE_DATA$(STORAGE_NDX:13 TO 18);
   SUBBIT(BIT_LOC) = IVALUE_DATA$(STORAGE_NDX:19 TO 24);
   REAL_IVALUE = IVALUE_ARR$(STORAGE_NDX);
C
   CALL FETCH_BIT32;
   IF IVALUE NOT = REAL_IVALUE THEN DO;
     FAIL_CTR = FAIL_CTR + 1;
     WRITE(6) BIT_TYPES$(3(BIT_NDX-1)+IARRAY:), BIT_CNT, BIT_LOC,
       REAL_IVALUE, IVALUE;
   END;
 CLOSE FETCH_BIT_SUB;
C
C INITIALIZE OUR POWERS OF 2 ARRAY
C
   DO FOR TEMPORARY IX = 2 TO 31;
     POWERS$(IX) = 2 POWERS$(IX - 1);
   END;
C
C CYCLE THE TEST CASE 'N' TIMES
C
   WRITE(6) '*** TEST INITIATED *** --',ITER_MAX,' ITERATIONS';
   DO FOR ITER_NDX = 1 TO ITER_MAX WHILE STORAGE_CNT < STORAGE_MAX;
     CALL STUFF_BIT_SUB;
   END;
   WRITE(6) 'ITER_NDX = ', ITER_NDX, 'STORAGE_CNT = ', STORAGE_CNT;
   WRITE(6)
 'TYPE/DIM      BIT_CNT         BIT_LOC         DESIRED          ACTUAL'
  ;
   DO FOR STORAGE_NDX = 1 TO STORAGE_CNT;
     CALL FETCH_BIT_SUB;
   END;
C
C WE ARE DONE WITH THE TEST: SUMMARIZE THE RESULTS
C
  WRITE(6) '*** TEST COMPLETED ***';
  IF FAIL_CTR = 0 THEN
    DO;
      WRITE(6) 'TEST SUCCESSFUL -- ALL BIT STRINGS UNPACKED CORRECTLY';
    END;
  ELSE
    DO;
      WRITE(6) '*** TEST FAILURE --',FAIL_CTR,
        'BIT STRINGS UNPACKED INCORRECTLY';
    END;
  CLOSE BITS;
