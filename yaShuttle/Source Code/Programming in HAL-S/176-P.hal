C/ Adapted from PDF p. 176 of "Programming in HAL/S".

C/ Normally, if READ_ACC() were really a function in a separate 
C/ compilation unit, its template and that of SUPER_VECTOR (its return
C/ type) would be read in from the template library with a 
C/ "D INCLUDE TEMPLATE compoolname" directive.  In this case,
C/ though, there's no such function, and the following lines mimic
C/ what could be in such an included template, without having to 
C/ actually create any such function.  Of course, that means
C/ that while this sample file can be compiled, the object code could
C/ not be executed without actually supplying a READ_ACC() function too.
  DUMMY_COMPOOL: EXTERNAL COMPOOL;
     STRUCTURE SUPER_VECTOR:
        1 V VECTOR,
        1 STATUS BOOLEAN,
        1 TIMETAG SCALAR;
  CLOSE DUMMY_COMPOOL;
  READ_ACC: EXTERNAL FUNCTION(N) SUPER_VECTOR-STRUCTURE;
     DECLARE N INTEGER;
  CLOSE READ_ACC;

  P:
  PROGRAM;
     STRUCTURE STATEVEC:
        1 POSITION SUPER_VECTOR-STRUCTURE,
        1 VELOCITY SUPER_VECTOR-STRUCTURE,
        1 ACCEL SUPER_VECTOR-STRUCTURE;
     DECLARE STATE STATEVEC-STRUCTURE;
     STRUCTURE S2:
        1 STATE STATEVEC-STRUCTURE,
        1 ATTITUDE_INFO ARRAY(3) VECTOR DOUBLE;
     DECLARE STATE2 S2-STRUCTURE;
     REPLACE TEST_DATA BY "1";
     DECLARE CYCLE INTEGER INITIAL(0);
     DECLARE DELTA_T CONSTANT(1 / 10);  /*TIME BETWEEN SAMPLES*/
          
     STATE2.STATE.ACCEL = READ_ACC(17);

C  ASSUME THAT 17 SELECTS THE CORRECT ACCELEROMETER

     CALL INTEGRATE(STATE2.STATE.ACCEL) ASSIGN(STATE2.STATE.VELOCITY);
     CALL INTEGRATE(STATE2.STATE.VELOCITY) 
                                        ASSIGN(STATE2.STATE.POSITION);
     CYCLE = CYCLE + 1;
     FILE(TEST_DATA, CYCLE) = STATE2.STATE; /*SAVE FOR POST PROCESSING*/
  INTEGRATE:
  PROCEDURE(INPUT) ASSIGN(OUTPUT);
     DECLARE SUPER_VECTOR-STRUCTURE,
                INPUT, OUTPUT;
E               .
M    IF INPUT.STATUS = FALSE THEN
        DO;
E                   .
M         OUTPUT.STATUS = FALSE;
           RETURN;
        END;
     OUTPUT.TIMETAG = INPUT.TIMETAG;
E           -          -         -
M    OUTPUT.V = OUTPUT.V + INPUT.V DELTA_T;
  CLOSE INTEGRATE;
  CLOSE P;
  
  