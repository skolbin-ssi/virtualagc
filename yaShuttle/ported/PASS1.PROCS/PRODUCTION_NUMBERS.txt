1	<COMPILATION>::= <COMPILE LIST> _|_
2	<COMPILE LIST>::=<BLOCK DEFINITION>
3	<COMPILE LIST>::= <COMPILE LIST> <BLOCK DEFINITION>
4	<ARITH EXP> ::= <TERM>
5	<ARITH EXP> ::= + <TERM>
6	<ARITH EXP> ::= -1 <TERM>
7	<ARITH EXP> ::= <ARITH EXP> + <TERM>
8	<ARITH EXP> ::= <ARITH EXP> -1 <TERM>
9	<TERM> ::= <PRODUCT>
10	<TERM> ::= <PRODUCT> / <TERM>
11	<PRODUCT> ::= <FACTOR>
12	<PRODUCT> ::= <FACTOR> * <PRODUCT>
13	<PRODUCT> ::= <FACTOR> . <PRODUCT>
14	<PRODUCT> ::= <FACTOR> <PRODUCT>
15	<FACTOR> ::= <PRIMARY>
16	<FACTOR>  ::=  <PRIMARY>  <**>  <FACTOR>
17	<**>  ::=  **
18	<PRE PRIMARY>  ::=  (  <ARITH EXP>  )
19	<PRE PRIMARY> ::= <NUMBER>
20	<PRE PRIMARY> ::= <COMPOUND NUMBER>
21	<ARITH FUNC HEAD>  ::=  <ARITH FUNC>
22	<ARITH FUNC HEAD>  ::=  <ARITH CONV> <SUBSCRIPT>
23	<ARITH CONV>  ::=  INTEGER
24	<ARITH CONV>  ::=  SCALAR
25	<ARITH CONV>  ::=  VECTOR
26	<ARITH CONV>  ::=  MATRIX
27	<PRIMARY> ::= <ARITH VAR>
28	<PRE PRIMARY>  ::=  <ARITH FUNC HEAD> ( <CALL LIST> )
29	<PRIMARY>  ::=  <MODIFIED ARITH FUNC>
30	<PRIMARY>  ::=  <ARITH INLINE DEF>  <BLOCK BODY>  <CLOSING>  ;
31	<PRIMARY> ::= <PRE PRIMARY>
32	<PRIMARY> ::= <PRE PRIMARY> <QUALIFIER>
33	<OTHER STATEMENT>  ::=  <ON PHRASE> <STATEMENT>
34	<OTHER STATEMENT> ::= <IF STATEMENT>
35	<OTHER STATEMENT>  ::= <LABEL DEFINITION> <OTHER STATEMENT>
36	<STATEMENT> ::= <BASIC STATEMENT>
37	<STATEMENT>  ::=  <OTHER STATEMENT>
38	<ANY STATEMENT>  ::= <STATEMENT>
39	<ANY STATEMENT>::= <BLOCK DEFINITION>
40	<BASIC STATEMENT>  ::= <LABEL DEFINITION> <BASIC STATEMENT>
41	<BASIC STATEMENT>::=<ASSIGNMENT>
42	<BASIC STATEMENT>::= EXIT ;
43	<BASIC STATEMENT>  ::=  EXIT  <LABEL>  ;
44	<BASIC STATEMENT>::= REPEAT ;
45	<BASIC STATEMENT>  ::=  REPEAT  <LABEL>  ;
46	<BASIC STATEMENT>  ::=  GO TO  <LABEL>  ;
47	<BASIC STATEMENT>::= ;
48	<BASIC STATEMENT>::= <CALL KEY> ;
49	<BASIC STATEMENT>::= <CALL KEY> (<CALL LIST>) ;
50	<BASIC STATEMENT>::=<CALL KEY><ASSIGN>(<CALL ASSIGN LIST>);
51	<BASIC STATEMENT>::=<CALL KEY>(<CALL LIST>)<ASSIGN>(<CALL ASSIGN LIST>);
52	<BASIC STATEMENT>::= RETURN ;
53	<BASIC STATEMENT>::= RETURN <EXPRESSION> ;
54	<BASIC STATEMENT>::= <DO GROUP HEAD> <ENDING> ;
55	<BASIC STATEMENT>::= <READ KEY>;
56	<BASIC STATEMENT>::= <READ PHRASE> ;
57	<BASIC STATEMENT>::= <WRITE KEY> ;
58	<BASIC STATEMENT>::= <WRITE PHRASE> ;
59	<BASIC STATEMENT>::= <FILE EXP> = <EXPRESSION> ;
60	<BASIC STATEMENT>::= <VARIABLE> = <FILE EXP> ;
61	<BASIC STATEMENT>  ::=  <WAIT KEY>  FOR DEPENDENT ;
62	<BASIC STATEMENT>::= <WAIT KEY><ARITH EXP>;
63	<BASIC STATEMENT> ::=  <WAIT KEY> UNTIL <ARITH EXP> ;
64	<BASIC STATEMENT>::= <WAIT KEY> FOR <BIT EXP> ;
65	<BASIC STATEMENT>::= <TERMINATOR> ;
66	<BASIC STATEMENT>::= <TERMINATOR> <TERMINATE LIST>;
67	<BASIC STATEMENT>::= UPDATE PRIORITY TO <ARITH EXP>;
68	<BASIC STATEMENT>  ::=  UPDATE PRIORITY  <LABEL VAR>  TO  <ARITH EXP>;
69	<BASIC STATEMENT>::= <SCHEDULE PHRASE>;
70	<BASIC STATEMENT>::=<SCHEDULE PHRASE><SCHEDULE CONTROL>;
71	<BASIC  STATEMENT>  ::=  <SIGNAL CLAUSE>  ;
72	<BASIC STATEMENT>  ::=  SEND ERROR <SUBSCRIPT>  ;
73	<BASIC STATEMENT>  ::=  <ON CLAUSE>  ;
74	<BASIC STATEMENT>  ::=  <ON CLAUSE> AND <SIGNAL CLAUSE> ;
75	<BASIC STATEMENT>  ::=  OFF ERROR <SUBSCRIPT>  ;
76	<BASIC STATEMENT>  ::=  <% MACRO NAME> ;
77	<BASIC STATEMENT>  ::=  <% MACRO HEAD> <% MACRO ARG> ) ;
78	<% MACRO HEAD>  ::=  <% MACRO NAME> (
79	<% MACRO HEAD>  ::=  <% MACRO HEAD> <% MACRO ARG> ,
80	<% MACRO ARG>  ::=  <NAME VAR>
81	<% MACRO ARG>  ::=  <CONSTANT>
82	<BIT PRIM>  ::=  <BIT VAR>
83	<BIT PRIM>  ::=  <LABEL VAR>
84	<BIT PRIM>  ::=  <EVENT VAR>
85	<BIT PRIM>  ::=  <BIT CONST>
86	<BIT PRIM>  ::=  (  <BIT EXP>  )
87	<BIT PRIM>  ::=  <MODIFIED BIT FUNC>
88	<BIT PRIM>  ::=  <BIT INLINE DEF> <BLOCK BODY> <CLOSING>  ;
89	<BIT PRIM>  ::=  <SUBBIT HEAD>  <EXPRESSION>  )
90	<BIT PRIM>  ::=  <BIT FUNC HEAD>  (  <CALL LIST>  )
91	<BIT FUNC HEAD>  ::= <BIT FUNC>
92	<BIT FUNC HEAD>  ::=  BIT  <SUB OR QUALIFIER>
93	<BIT CAT> ::= <BIT PRIM>
94	<BIT CAT>  ::=  <BIT CAT>  <CAT>  <BIT PRIM>
95	<BIT CAT> ::= <NOT> <BIT PRIM>
96	<BIT CAT> ::= <BIT CAT> <CAT> <NOT> <BIT PRIM>
97	<BIT FACTOR> ::= <BIT CAT>
98	<BIT FACTOR> ::= <BIT FACTOR> <AND> <BIT CAT>
99	<BIT EXP> ::= <BIT FACTOR>
100	<BIT EXP> ::= <BIT EXP> <OR> <BIT FACTOR>
101	<RELATIONAL OP> ::= =
102	<RELATIONAL OP> ::= <NOT> =
103	<RELATIONAL OP> ::= <
104	<RELATIONAL OP> ::= >
105	<RELATIONAL OP> ::= <  =
106	<RELATIONAL OP> ::= >  =
107	<RELATIONAL OP> ::= <NOT> <
108	<RELATIONAL OP> ::= <NOT> >
109	<COMPARISON> ::= <ARITH EXP> <RELATIONAL OP> <ARITH EXP>
110	<COMPARISON> ::= <CHAR EXP> <RELATIONAL OP> <CHAR EXP>
111	<COMAPRISON> ::= <BIT CAT> <RELATIONAL OP> <BIT CAT>
112	<COMPARISON>  ::=  <STRUCTURE EXP> <RELATIONAL OP> <STRUCTURE EXP>
113	<COMPARISON>  ::=  <NAME EXP>  <RELATIONAL OP>  <NAME EXP>
114	<RELATIONAL FACTOR>  ::=  <REL PRIM>
115	<RELATIONAL FACTOR> ::= <RELATIONAL FACTOR> <AND> <REL PRIM>
116	<RELATIONAL EXP> ::= <RELATIONAL FACTOR>
117	<RELATIONAL EXP> ::= < RELATIONAL EXP> <OR> < RELATIONAL FACTOR>
118	<REL PRIM> ::= (1 <RELATIONAL EXP> )
119	<REL PRIM> ::= <NOT> (1 <RELATIONAL EXP> )
120	<REL PRIM> ::=  <COMPARISON>
121	<CHAR PRIM> ::= <CHAR VAR>
122	<CHAR PRIM>  ::=  <CHAR CONST>
123	<CHAR PRIM>  ::=  <MODIFIED CHAR FUNC>
124	<CHAR PRIM>  ::=  <CHAR INLINE DEF> <BLOCK BODY> <CLOSING>  ;
125	<CHAR PRIM>  ::=  <CHAR FUNC HEAD>  (  <CALL LIST>  )
126	<CHAR PRIM>  ::=  (  <CHAR EXP>  )
127	<CHAR FUNC HEAD>  ::=  <CHAR FUNC>
128	<CHAR FUNC HEAD>  ::=  CHARACTER  <SUB OR QUALIFIER>
129	<SUB OR QUALIFIER>  ::=  <SUBSCRIPT>
130	<SUB OR QUALIFIER>  ::=  <BIT QUALIFIER>
131	<CHAR EXP> ::= <CHAR PRIM>
132	<CHAR EXP> ::= <CHAR EXP> <CAT> <CHAR PRIM>
133	<CHAR EXP> ::= <CHAR EXP> <CAT> <ARITH EXP>
134	<CHAR EXP>  ::=  <ARITH EXP>  <CAT>  <ARITH EXP>
135	<CHAR EXP> ::= <ARITH EXP> <CAT> <CHAR PRIM>
136	<ASSIGNMENT>::=<VARIABLE><=1><EXPRESSION>
137	<ASSIGNMENT>::=<VARIABLE>,<ASSIGNMENT>
138	<IF STATEMENT>::= <IF CLAUSE> <STATEMENT>
139	<IF STATEMENT>::=<TRUE PART> <STATEMENT>
140	<TRUE PART>::=<IF CLAUSE><BASIC STATEMENT> ELSE
141	<IF CLAUSE>  ::=  <IF> <RELATIONAL EXP> THEN
142	<IF CLAUSE>  ::=  <IF> <BIT EXP> THEN
143	<IF>  ::=  IF
144	<DO GROUP HEAD>::= DO ;
145	<DO GROUP HEAD>::= DO <FOR LIST> ;
146	<DO GROUP HEAD>::= DO <FOR LIST> <WHILE CLAUSE> ;
147	<DO GROUP HEAD>::= DO <WHILE CLAUSE> ;
148	<DO GROUP HEAD>::= DO CASE  <ARITH EXP> ;
149	<DO GROUP HEAD>  ::=  <CASE ELSE>  <STATEMENT>
150	<DO GROUP HEAD>::= <DO GROUP HEAD> <ANY STATEMENT>
151	<DO GROUP HEAD>  ::=  <DO GROUP HEAD>  <TEMPORARY STMT>
152	<CASE ELSE>  ::=  DO CASE <ARITH EXP> ; ELSE
153	<WHILE KEY>::= WHILE
154	<WHILE KEY>::= UNTIL
155	<WHILE CLAUSE>::=<WHILE KEY> <BIT EXP>
156	<WHILE CLAUSE>::= <WHILE KEY> <RELATIONAL EXP>
157	<FOR LIST>::= <FOR KEY>  <ARITH EXP><ITERATION CONTROL>
158	<FOR LIST> = <FOR KEY>  <ITERATION BODY>
159	<ITERATION BODY>::= <ARITH EXP>
160	<ITERATION BODY>::= <ITERATION BODY>,<ARITH EXP>
161	<ITERATION CONTROL>::= TO <ARITH EXP>
162	<ITERATION CONTROL>::= TO <ARITH EXP> BY <ARITH EXP>
163	<FOR KEY>::= FOR <ARITH VAR> =
164	<FOR KEY>  ::=  FOR TEMPORARY  <IDENTIFIER>  =
165	<ENDING>::= END
166	<ENDING>::= END <LABEL>
167	<ENDING>::= <LABEL DEFINITION> <ENDING>
168	<ON PHRASE>  ::= ON ERROR  <SUBSCRIPT>
169	<ON CLAUSE>  ::=  ON ERROR <SUBSCRIPT>  SYSTEM
170	<ON CLAUSE>  ::=  ON ERROR <SUBSCRIPT> IGNORE
171	<SIGNAL CLAUSE>  ::=  SET <EVENT VAR>
172	<SIGNAL CLAUSE>  ::=  RESET <EVENT VAR>
173	<SIGNAL CLAUSE>  ::= SIGNAL <EVENT VAR>
174	<FILE EXP>  ::=  <FILE HEAD>  ,  <ARITH EXP>  )
175	<FILE HEAD>  ::=  FILE  (  <NUMBER>
176	<CALL KEY>  ::=  CALL  <LABEL VAR>
177	<CALL LIST> ::= <LIST EXP>
178	<CALL LIST> ::= <CALL LIST> , <LIST EXP>
179	<CALL ASSIGN LIST> ::= <VARIABLE>
180	<CALL ASSIGN LIST> ::= <CALL ASSIGN LIST> , <VARIABLE>
181	<EXPRESSION> ::= <ARITH EXP>
182	<EXPRESSION> ::= <BIT EXP>
183	<EXPRESSION> ::= <CHAR EXP>
184	<EXPRESSION>  ::=  <STRUCTURE EXP>
185	<EXPRESSION>  ::=  <NAME EXP>
186	<STRUCTURE EXP>  ::=  <STRUCTURE VAR>
187	<STRUCTURE EXP>  ::=  <MODIFIED STRUCT FUNC>
188	<STRUCTURE EXP>  ::=  <STRUC INLINE DEF> <BLOCK BODY> <CLOSING> ;
189	<STRUCTURE EXP>  ::=  <STRUCT FUNC HEAD>  (  <CALL LIST>  )
190	<STRUCT FUNC HEAD>  ::=  <STRUCT FUNC>
191	<LIST EXP> ::= <EXPRESSION>
192	<LIST EXP>  ::=  <ARITH EXP>  #  <EXPRESSION>
193	<VARIABLE> ::= <ARITH VAR>
194	<VARIABLE> ::= <STRUCTURE VAR>
195	<VARIABLE> ::= <BIT VAR>
196	<VARIABLE  ::=  <EVENT VAR>
197	<VARIABLE>  ::=  <SUBBIT HEAD>  <VARIABLE>  )
198	<VARIABLE> ::= <CHAR VAR>
199	<VARIABLE>  ::=  <NAME KEY>  (  <NAME VAR>  )
200	<NAME VAR>  ::=  <VARIABLE>
201	<NAME VAR>  ::=  <LABEL VAR>
202	<NAME VAR>  ::=  <MODIFIED ARITH FUNC>
203	<NAME VAR>  ::=  <MODIFIED BIT FUNC>
204	<NAME VAR>  ::=  <MODIFIED CHAR FUNC>
205	<NAME VAR>  ::=  <MODIFIED STRUCT FUNC>
206	<NAME EXP>  ::=  <NAME KEY>  (  <NAME VAR>  )
207	<NAME EXP>  ::=  NULL
208	<NAME EXP>  ::=  <NAME KEY> ( NULL )
209	<NAME KEY>  ::=  NAME
210	<LABEL VAR>  ::=  <PREFIX>  <LABEL>  <SUBSCRIPT>
211	<MODIFIED ARITH FUNC>  ::=  <PREFIX>  <NO ARG ARITH FUNC> <SUBSCRIPT>
212	<MODIFIED BIT FUNC>  ::=  <PREFIX>  <NO ARG BIT FUNC>  <SUBSCRIPT>
213	<MODIFIED CHAR FUNC>  ::=  <PREFIX> <NO ARG CHAR FUNC>  <SUBSCRIPT>
214	<MODIFIED STRUCT FUNC> ::= <PREFIX> <NO ARG STRUCT FUNC> <SUBSCRIPT>
215	<STRUCTURE VAR>  ::=  <QUAL STRUCT>  <SUBSCRIPT>
216	<ARITH VAR>  ::=  <PREFIX>  <ARITH ID>  <SUBSCRIPT>
217	<CHAR VAR>  ::=  <PREFIX>  <CHAR ID>  <SUBSCRIPT>
218	<BIT VAR>  ::=  <PREFIX>  <BIT ID>  <SUBSCRIPT>
219	<EVENT VAR>  ::=  <PREFIX>  (EVENT ID>  <SUBSCRIPT>
220	<QUAL STRUCT>  ::=  <STRUCTURE ID>
221	<QUAL STRUCT>  ::=  <QUAL STRUCT>  .  <STRUCTURE ID>
222	<PREFIX>  ::=  <EMPTY>
223	<PREFIX>  ::=  <QUAL STRUCT>  .
224	<SUBBIT HEAD>::= <SUBBIT KEY> <SUBSCRIPT>(
225	<SUBBIT KEY> ::= SUBBIT
226	<SUBSCRIPT> ::= <SUB HEAD> )
227	<SUBSCRIPT>  ::=  <QUALIFIER>
228	<SUBSCRIPT> ::= <$> <NUMBER>
229	<SUBSCRIPT> ::= <$> <ARITH VAR>
230	<SUBSCRIPT>  ::=  <EMPTY>
231	<SUB START>  ::=  <$> (
232	<SUB START>  ::=  <$>  (  @  <PREC SPEC>  ,
233	<SUB START> ::= <SUB HEAD> ;
234	<SUB START> ::= <SUB HEAD> :
235	<SUB START> ::= <SUB HEAD> ,
236	<SUB HEAD> ::= <SUB START>
237	<SUB HEAD> ::= <SUB START> <SUB>
238	<SUB> ::= <SUB EXP>
239	<SUB> ::= *
240	<SUB> ::= <SUB RUN HEAD><SYB EXP>
241	<SUB> ::= <ARITH EXP> AT <SUB EXP>
242	<SUB RUN HEAD> ::= <SUB EXP> TO
243	<SUB EXP> ::= <ARITH EXP>
244	<SUB EXP> ::= <# EXPRESSION>
245	<# EXPRESSION>  ::=  #
246	<# EXPRESSION> ::= <# EXPRESSION> + <TERM>
247	<# EXPRESSION> ::= <# EXPRESSION> -1 <TERM>
248	<=1> ::= =
249	<$> ::= $
250	<AND> ::= &
251	<AND> ::= AND
252	<OR> ::= |
253	<OR> ::= OR
254	<NOT> ::= not 
255	<NOT> ::= NOT
256	<CAT> ::= +
257	<CAT> ::= CAT
258	<QUALIFIER>  ::=  <$>  (  @  <PREC SPEC>  )
259	<QUALIFIER> ::= <$> ( <SCALE HEAD> <ARITH EXP> )
260	<QUALIFIER>::=<$>(@<PREC SPEC>,<SCALE HEAD><ARITH EXP>)
261	<SCALE HEAD>  ::=  @
262	<SCALE HEAD> ::=  @ @
263	<BIT QUALIFIER> ::= <$(> @ <RADIX> )
264	<RADIX> ::= HEX
265	<RADIX> ::= OCT
266	<RADIX> ::= BIN
267	<RADIX> ::= DEC
268	<BIT CONST HEAD> ::= <RADIX>
269	<BIT CONST HEAD>  ::=  <RADIX>  (  <NUMBER>  )
270	<BIT CONST> ::= <BIT CONST HEAD> <CHAR STRING>
271	<BIT CONST> ::= TRUE
272	<BIT CONST> ::= FALSE
273	<BIT CONST> ::= ON
274	<BIT CONST> ::= OFF
275	<CHAR CONST>  ::=  <CHAR STRING>
276	<CHAR CONST>  ::=  CHAR  (  <NUMBER>  )  <CHAR STRING>
277	<IO CONTROL>  ::=  SKIP  (  <ARITH EXP>  )
278	<IO CONTROL>  ::=  TAB  (  <ARITH EXP>  )
279	<IO CONTROL>  ::=  COLUMN  (  <ARITH EXP>  )
280	<IO CONTROL>  ::=  LINE  (  <ARITH EXP>  )
281	<IO CONTROL>  ::=  PAGE  (  <ARITH EXP>  )
282	<READ PHRASE>  ::=  <READ KEY>  <READ ARG>
283	<READ PHRASE>  ::=  <READ PHRASE>  ,  <READ ARG>
284	<WRITE PHRASE>  ::=  <WRITE KEY>  <WRITE ARG>
285	<WRITE PHRASE>  ::=  <WRITE PHRASE>  ,  <WRITE ARG>
286	<READ ARG>  ::=  <VARIABLE>
287	<READ ARG>  ::=  <IO CONTROL>
288	<WRITE ARG>  ::=  <EXPRESSION>
289	<WRITE ARG>  ::=  <IO CONTROL>
290	<READ KEY>  ::=  READ  (  <NUMBER>  )
291	<READ KEY>  ::=  READALL  (  <NUMBER>  )
292	<WRITE KEY>  ::=  WRITE  (  <NUMBER>  )
293	<BLOCK DEFINITION> ::= <BLOCK STMT> <BLOCK BODY> <CLOSING> ;
294	<BLOCK BODY>  ::= <EMPTY>
295	<BLOCK BODY>  ::=  <DECLARE GROUP>
296	<BLOCK BODY>  ::=  <BLOCK BODY>  <ANY STATEMENT>
297	<ARITH INLINE DEF>  ::=  FUNCTION <ARITH SPEC>  ;
298	<ARITH INLINE DEF>  ::=  FUNCTION  ;
299	<BIT INLINE DEF>  ::=  FUNCTION <BIT SPEC>  ;
300	<CHAR INLINE DEF>  ::=  FUNCTION <CHAR SPEC>  ;
301	<STRUC INLINE DEF>  ::=  FUNCTION <STRUCT SPEC>  ;
302	<BLOCK STMT>  ::=  <BLOCK STMT TOP>  ;
303	<BLOCK STMT TOP> ::= <BLOCK STMT TOP> ACCESS
304	<BLOCK STMT TOP>  ::= <BLOCK STMT TOP> RIGID
305	<BLOCK STMT TOP>  ::=  <BLOCK STMT HEAD>
306	<BLOCK STMT TOP>  ::=  <BLOCK STMT HEAD>  EXCLUSIVE
307	<BLOCK STMT TOP>  ::=  <BLOCK STMT HEAD>  REENTRANT
308	<LABEL DEFINITION>  ::=  <LABEL>  :
309	<LABEL EXTERNAL>  ::=  <LABEL DEFINITION>
310	<LABEL EXTERNAL>  ::=  <LABEL DEFINITION>  EXTERNAL
311	<BLOCK STMT HEAD>  ::=  <LABEL EXTERNAL>  PROGRAM
312	<BLOCK STMT HEAD>  ::=  <LABEL EXTERNAL>  COMPOOL
313	<BLOCK STMT HEAD>  ::=  <LABEL DEFINITION>  TASK
314	<BLOCK STMT HEAD>  ::=  <LABEL DEFINITION>  UPDATE
315	<BLOCK STMT HEAD>  ::=  UPDATE
316	<BLOCK STMT HEAD>  ::=  <FUNCTION NAME>
317	<BLOCK STMT HEAD>  ::=  <FUNCTION NAME>  <FUNC STMT BODY>
318	<BLOCK STMT HEAD>  ::=  <PROCEDURE NAME>
319	<BLOCK STMT HEAD>  ::=  <PROCEDURE NAME>  <PROC STMT BODY>
320	<FUNCTION NAME>  ::=  <LABEL EXTERNAL>  FUNCTION
321	<PROCEDURE NAME>  ::=  <LABEL EXTERNAL>  PROCEDURE
322	<FUNC STMT BODY>  ::=  <PARAMETER LIST>
323	<FUNC STMT BODY>  ::=  <TYPE SPEC>
324	<FUNC STMT BODY>  ::=  <PARAMETER LIST>  <TYPE SPEC>
325	<PROC STMT BODY>  ::=  <PARAMETER LIST>
326	<PROC STMT BODY>  ::=  <ASSIGN LIST>
327	<PROC STMT BODY>  ::=  <PARAMETER LIST>  < ASSIGN LIST>
328	<PARAMETER LIST>  ::=  <PARAMETER HEAD>  <IDENTIFIER>  )
329	<PARAMETER HEAD>  ::=  (
330	<PARAMETER HEAD>  ::=  <PARAMETER HEAD>  <IDENTIFIER>  ,
331	<ASSIGN LIST>  ::=  <ASSIGN>  <PARAMETER LIST>
332	<ASSIGN>  ::=  ASSIGN
333	<DECLARE ELEMENT>  ::=  <DECLARE STATEMENT>
334	<DECLARE ELEMENT>  ::=  <REPLACE STMT>  ;
335	<DECLARE ELEMENT>  ::=  <STRUCTURE STMT>
336	<DECLARE ELEMENT>  ::=  EQUATE  EXTERNAL  <IDENTIFIER>  TO <VARIABLE>  ;
337	<REPLACE STMT>  ::=  REPLACE  <REPLACE HEAD>  BY  <TEXT>
338	<REPLACE HEAD>  ::=  <IDENTIFIER>
339	<REPLACE HEAD>  ::=  <IDENTIFIER>  (  <ARG LIST>  )
340	<ARG LIST>  ::=  <IDENTIFIER>
341	<ARG LIST>  ::=  <ARG LIST>  ,  <IDENTIFIER>
342	<TEMPORARY STMT>  ::=  TEMPORARY  <DECLARE BODY>  ;
343	<DECLARE STATEMENT>  ::=  DECLARE  <DECLARE BODY>  ;
344	<DECLARE BODY>  ::=  <DECLARATION LIST>
345	<DECLARE BODY>  ::=  <ATTRIBUTES> , <DECLARATION LIST>
346	<DECLARATION LIST>  ::=  <DECLARATION>
347	<DECLARATION LIST>  ::=  <DCL LIST ,>   <DECLARATION>
348	<DCL LIST ,>  ::=  <DECLARATION LIST>  ,
349	<DECLARE GROUP>  ::=  <DECLARE ELEMENT>
350	<DECLARE GROUP>  ::=  <DECLARE GROUP>  <DECLARE ELEMENT>
351	<STRUCTURE STMT>  ::=  STRUCTURE <STRUCT STMT HEAD> <STRUCT STMT TAIL>
352	<STRUCT STMT HEAD>  ::=  <IDENTIFIER>  :  <LEVEL>
353	<STRUCT STMT HEAD>  ::=  <IDENTIFIER> <MINOR ATTR LIST> : <LEVEL>
354	<STRUCT STMT HEAD> ::= <STRUCT STMT HEAD> <DECLARATION> , <LEVEL>
355	<STRUCT STMT TAIL>  ::=  <DECLARATION>  ;
356	<STRUCT SPEC> ::= <STRUCT TEMPLATE> <STRUCT SPEC BODY>
357	<STRUCT SPEC BODY> ::= - STRUCTURE
358	<STRUCT SPEC BODY> ::= <STRUCT SPEC HEAD> <LITERAL EXP OR*> )
359	<STRUCT SPEC HEAD> ::= - STRUCTURE (
360	<DECLARATION>  ::=  <NAME ID>
361	<DECLARATION>  ::=  <NAME ID>  <ATTRIBUTES>
362	<NAME ID>   ::=  <IDENTIFIER>
363	<NAME ID>  ::=  <IDENTIFIER> NAME
364	<ATTRIBUTES> ::= <ARRAY SPEC> <TYPE & MINOR ATTR>
365	<ATTRIBUTES> ::= <ARRAY SPEC>
366	<ATTRIBUTES> ::= <TYPE & MINOR ATTR>
367	<ARRAY SPEC> ::= <ARRAY HEAD> <LITERAL EXP OR *> )
368	<ARRAY SPEC>  ::=  FUNCTION
369	<ARRAY SPEC>  ::=  PROCEDURE
370	<ARRAY SPEC>  ::= PROGRAM
371	<ARRAY SPEC>  ::=  TASK
372	<ARRAY HEAD> ::= ARRAY (
373	<ARRAY HEAD> ::= <ARRAY HEAD> <LITERAL_EXP OR *> ,
374	<TYPE & MINOR ATTR> ::= <TYPE SPEC>
375	<TYPE & MINOR ATTR> ::= <TYPE SPEC> <MINOR ATTR LIST>
376	<TYPE & MINOR ATTR> ::= <MINOR ATTR LIST>
377	<TYPE SPEC> ::= <STRUCT SPEC>
378	<TYPE SPEC>  ::=  <BIT SPEC>
379	<TYPE SPEC>  ::=  <CHAR SPEC>
380	<TYPE SPEC>  ::=  <ARITH SPEC>
381	<TYPE SPEC>  ::=  EVENT
382	<BIT SPEC>  ::=  BOOLEAN
383	<BIT SPEC>  ::=  BIT  (  <LITERAL EXP OR *>  )
384	<CHAR SPEC>  ::=  CHARACTER  (  <LITERAL EXP OR *>  )
385	<ARITH SPEC>  ::=  <PREC SPEC>
386	<ARITH SPEC>  ::=  <SQ DQ NAME>
387	<ARITH SPEC>  ::=  <SQ DQ NAME>  <PREC SPEC>
388	<SQ DQ NAME> ::= <DOUBLY QUAL NAME HEAD> <LITERAL EXP OR *> )
389	<SQ DQ NAME> ::= INTEGER
390	<SQ DQ NAME> ::= SCALAR
391	<SQ DQ NAME> ::= VECTOR
392	<SQ DQ NAME> ::= MATRIX
393	<DOUBLY QUAL NAME HEAD> ::= VECTOR (
394	<DOUBLY QUAL NAME HEAD>  ::=  MATRIX  (  <LITERAL EXP OR *>  ,
395	<LITERAL EXP OR *> ::= <ARITH EXP>
396	<LITERAL EXP OR *> ::= *
397	<PREC_SPEC> ::= SINGLE
398	<PREC SPEC> ::= DOUBLE
399	<MINOR ATTR LIST> ::= <MINOR ATTRIBUTE>
400	<MINOR ATTR LIST> ::= <MINOR ATTR LIST> <MINOR ATTRIBUTE>
401	<MINOR ATTRIBUTE> ::= STATIC
402	<MINOR ATTRIBUTE> ::= AUTOMATIC
403	<MINOR ATTRIBUTE> ::= DENSE
404	<MINOR ATTRIBUTE> ::= ALIGNED
405	<MINOR ATTRIBUTE> ::= ACCESS
406	<MINOR ATTRIBUTE>  ::=  LOCK ( <LITERAL EXP OR *> )
407	<MINOR ATTRIBUTE>  ::=  REMOTE
408	<MINOR ATTRIBUTE> ::= RIGID
409	<MINOR ATTRIBUTE> ::= <INIT/CONST HEAD> <REPEATED CONSTANT> )
410	<MINOR ATTRIBUTE> ::= <INIT/CONST HEAD> * )
411	<MINOR ATTRIBUTE> ::= LATCHED
412	<MINOR ATTRIBUTE>  ::=  NONHAL  (  <LEVEL>  )
413	<INIT/CONST HEAD> ::= INITIAL (
414	<INIT/CONST HEAD> ::= CONSTANT (
415	<INIT/CONST HEAD>  ::=  <INIT/CONST HEAD>  <REPEATED CONSTANT>  ,
416	<REPEATED CONSTANT>  ::=  <EXPRESSION>
417	<REPEATED CONSTANT>  ::=  <REPEAT HEAD>  <VARIABLE>
418	<REPEATED CONSTANT>  ::=  <REPEAT HEAD>  <CONSTANT>
419	<REPEATED CONSTANT>  ::=  <NESTED REPEAT HEAD>  <REPEATED CONSTANT>  )
420	<REPEATED CONSTANT>  ::=  <REPEAT HEAD>
421	<REPEAT HEAD>  ::=  <ARITH EXP>  #
422	<NESTED REPEAT HEAD>  ::=  <REPEAT HEAD>  (
423	<NESTED REPEAT HEAD>  ::=  <NESTED REPEAT HEAD>  <REPEATED CONSTANT>  ,
424	<CONSTANT>  ::=  <NUMBER>
425	<CONSTANT>  ::=  <COMPOUND NUMBER>
426	<CONSTANT>  ::=  <BIT CONST>
427	<CONSTANT>  ::=  <CHAR CONST>
428	<NUMBER> ::= <SIMPLE NUMBER>
429	<NUMBER> ::= <LEVEL>
430	<CLOSING> ::= CLOSE
431	<CLOSING> ::= CLOSE <LABEL>
432	<CLOSING> ::= <LABEL DEFINITION> <CLOSING>
433	<TERMINATOR>::= TERMINATE
434	<TERMINATOR>::= CANCEL
435	<TERMINATE LIST>  ::=  <LABEL VAR>
436	<TERMINATE LIST>  ::=  <TERMINATE LIST>  ,  <LABEL VAR>
437	<WAIT KEY>::= WAIT
438	<SCHEDULE HEAD>  ::=  SCHEDULE  <LABEL VAR>
439	<SCHEDULE HEAD>::= <SCHEDULE HEAD> AT <ARITH EXP>
440	<SCHEDULE HEAD>::= <SCHEDULE HEAD> IN <ARITH EXP>
441	<SCHEDULE HEAD>::=<SCHEDULE HEAD> ON <BIT EXP>
442	<SCHEDULE PHRASE>::=<SCHEDULE HEAD>
443	<SCHEDULE PHRASE>::=<SCHEDULE HEAD> PRIORITY (<ARITH EXP>)
444	<SCHEDULE PHRASE>  ::=  <SCHEDULE PHRASE>  DEPENDENT
445	<SCHEDULE CONTROL>::= <STOPPING>
446	<SCHEDULE CONTROL>::= <TIMING>
447	<SCHEDULE CONTROL>::= <TIMING><STOPPING>
448	<TIMING>  ::=  <REPEAT> EVERY <ARITH EXP>
449	<TIMING>  ::=  <REPEAT> AFTER <ARITH EXP>
450	<TIMING>  ::=  <REPEAT>
451	<REPEAT>  ::=  , REPEAT
452	<STOPPING>::=<WHILE KEY><ARITH EXP>
453	<STOPPING>::=<WHILE KEY><BIT EXP>
454	INSURANCE
455	INSURANCE
456	INSURANCE
457	INSURANCE
458	INSURANCE
