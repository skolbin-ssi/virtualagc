#ifndef ABSYN_HEADER
#define ABSYN_HEADER

/* C++ Abstract Syntax Interface generated by the BNF Converter.*/

/********************   TypeDef Section    ********************/
typedef int Integer;
typedef char Char;
typedef double Double;
typedef char* String;
typedef char* Ident;
typedef char* NeqToken;
typedef char* LeToken;
typedef char* GeToken;
typedef char* NoArgUserFuncIdentifierToken;
typedef char* BitIdentifierToken;
typedef char* BitFunctionIdentifierToken;
typedef char* CharFunctionIdentifierToken;
typedef char* CharIdentifierToken;
typedef char* StructIdentifierToken;
typedef char* StructFunctionIdentifierToken;
typedef char* LabelToken;
typedef char* EventToken;
typedef char* ArithFieldToken;
typedef char* IdentifierToken;
typedef char* StringToken;
typedef char* TextToken;
typedef char* LevelToken;
typedef char* NumberToken;
typedef char* CompoundToken;


/********************   Forward Declarations    ********************/

struct DECLARE_BODY_;
typedef struct DECLARE_BODY_ *DECLARE_BODY;
struct ATTRIBUTES_;
typedef struct ATTRIBUTES_ *ATTRIBUTES;
struct DECLARATION_;
typedef struct DECLARATION_ *DECLARATION;
struct ARRAY_SPEC_;
typedef struct ARRAY_SPEC_ *ARRAY_SPEC;
struct TYPE_AND_MINOR_ATTR_;
typedef struct TYPE_AND_MINOR_ATTR_ *TYPE_AND_MINOR_ATTR;
struct IDENTIFIER_;
typedef struct IDENTIFIER_ *IDENTIFIER;
struct SQ_DQ_NAME_;
typedef struct SQ_DQ_NAME_ *SQ_DQ_NAME;
struct DOUBLY_QUAL_NAME_HEAD_;
typedef struct DOUBLY_QUAL_NAME_HEAD_ *DOUBLY_QUAL_NAME_HEAD;
struct ARITH_CONV_;
typedef struct ARITH_CONV_ *ARITH_CONV;
struct DECLARATION_LIST_;
typedef struct DECLARATION_LIST_ *DECLARATION_LIST;
struct NAME_ID_;
typedef struct NAME_ID_ *NAME_ID;
struct ARITH_EXP_;
typedef struct ARITH_EXP_ *ARITH_EXP;
struct TERM_;
typedef struct TERM_ *TERM;
struct PLUS_;
typedef struct PLUS_ *PLUS;
struct MINUS_;
typedef struct MINUS_ *MINUS;
struct PRODUCT_;
typedef struct PRODUCT_ *PRODUCT;
struct FACTOR_;
typedef struct FACTOR_ *FACTOR;
struct EXPONENTIATION_;
typedef struct EXPONENTIATION_ *EXPONENTIATION;
struct PRIMARY_;
typedef struct PRIMARY_ *PRIMARY;
struct ARITH_VAR_;
typedef struct ARITH_VAR_ *ARITH_VAR;
struct PRE_PRIMARY_;
typedef struct PRE_PRIMARY_ *PRE_PRIMARY;
struct NUMBER_;
typedef struct NUMBER_ *NUMBER;
struct LEVEL_;
typedef struct LEVEL_ *LEVEL;
struct COMPOUND_NUMBER_;
typedef struct COMPOUND_NUMBER_ *COMPOUND_NUMBER;
struct SIMPLE_NUMBER_;
typedef struct SIMPLE_NUMBER_ *SIMPLE_NUMBER;
struct MODIFIED_ARITH_FUNC_;
typedef struct MODIFIED_ARITH_FUNC_ *MODIFIED_ARITH_FUNC;
struct SHAPING_HEAD_;
typedef struct SHAPING_HEAD_ *SHAPING_HEAD;
struct CALL_LIST_;
typedef struct CALL_LIST_ *CALL_LIST;
struct LIST_EXP_;
typedef struct LIST_EXP_ *LIST_EXP;
struct EXPRESSION_;
typedef struct EXPRESSION_ *EXPRESSION;
struct ARITH_ID_;
typedef struct ARITH_ID_ *ARITH_ID;
struct NO_ARG_ARITH_FUNC_;
typedef struct NO_ARG_ARITH_FUNC_ *NO_ARG_ARITH_FUNC;
struct ARITH_FUNC_;
typedef struct ARITH_FUNC_ *ARITH_FUNC;
struct BIT_FUNC_;
typedef struct BIT_FUNC_ *BIT_FUNC;
struct SUBSCRIPT_;
typedef struct SUBSCRIPT_ *SUBSCRIPT;
struct QUALIFIER_;
typedef struct QUALIFIER_ *QUALIFIER;
struct SCALE_HEAD_;
typedef struct SCALE_HEAD_ *SCALE_HEAD;
struct PREC_SPEC_;
typedef struct PREC_SPEC_ *PREC_SPEC;
struct SUB_START_;
typedef struct SUB_START_ *SUB_START;
struct SUB_HEAD_;
typedef struct SUB_HEAD_ *SUB_HEAD;
struct SUB_;
typedef struct SUB_ *SUB;
struct SUB_RUN_HEAD_;
typedef struct SUB_RUN_HEAD_ *SUB_RUN_HEAD;
struct SUB_EXP_;
typedef struct SUB_EXP_ *SUB_EXP;
struct POUND_EXPRESSION_;
typedef struct POUND_EXPRESSION_ *POUND_EXPRESSION;
struct BIT_EXP_;
typedef struct BIT_EXP_ *BIT_EXP;
struct BIT_FACTOR_;
typedef struct BIT_FACTOR_ *BIT_FACTOR;
struct BIT_CAT_;
typedef struct BIT_CAT_ *BIT_CAT;
struct OR_;
typedef struct OR_ *OR;
struct CHAR_VERTICAL_BAR_;
typedef struct CHAR_VERTICAL_BAR_ *CHAR_VERTICAL_BAR;
struct AND_;
typedef struct AND_ *AND;
struct BIT_PRIM_;
typedef struct BIT_PRIM_ *BIT_PRIM;
struct CAT_;
typedef struct CAT_ *CAT;
struct NOT_;
typedef struct NOT_ *NOT;
struct BIT_VAR_;
typedef struct BIT_VAR_ *BIT_VAR;
struct LABEL_VAR_;
typedef struct LABEL_VAR_ *LABEL_VAR;
struct EVENT_VAR_;
typedef struct EVENT_VAR_ *EVENT_VAR;
struct BIT_CONST_HEAD_;
typedef struct BIT_CONST_HEAD_ *BIT_CONST_HEAD;
struct BIT_CONST_;
typedef struct BIT_CONST_ *BIT_CONST;
struct RADIX_;
typedef struct RADIX_ *RADIX;
struct CHAR_STRING_;
typedef struct CHAR_STRING_ *CHAR_STRING;
struct SUBBIT_HEAD_;
typedef struct SUBBIT_HEAD_ *SUBBIT_HEAD;
struct SUBBIT_KEY_;
typedef struct SUBBIT_KEY_ *SUBBIT_KEY;
struct BIT_FUNC_HEAD_;
typedef struct BIT_FUNC_HEAD_ *BIT_FUNC_HEAD;
struct BIT_ID_;
typedef struct BIT_ID_ *BIT_ID;
struct LABEL_;
typedef struct LABEL_ *LABEL;
struct EVENT_;
typedef struct EVENT_ *EVENT;
struct SUB_OR_QUALIFIER_;
typedef struct SUB_OR_QUALIFIER_ *SUB_OR_QUALIFIER;
struct BIT_QUALIFIER_;
typedef struct BIT_QUALIFIER_ *BIT_QUALIFIER;
struct CHAR_EXP_;
typedef struct CHAR_EXP_ *CHAR_EXP;
struct CHAR_PRIM_;
typedef struct CHAR_PRIM_ *CHAR_PRIM;
struct CHAR_FUNC_HEAD_;
typedef struct CHAR_FUNC_HEAD_ *CHAR_FUNC_HEAD;
struct CHAR_VAR_;
typedef struct CHAR_VAR_ *CHAR_VAR;
struct CHAR_CONST_;
typedef struct CHAR_CONST_ *CHAR_CONST;
struct CHAR_FUNC_;
typedef struct CHAR_FUNC_ *CHAR_FUNC;
struct CHAR_ID_;
typedef struct CHAR_ID_ *CHAR_ID;
struct NAME_EXP_;
typedef struct NAME_EXP_ *NAME_EXP;
struct NAME_KEY_;
typedef struct NAME_KEY_ *NAME_KEY;
struct NAME_VAR_;
typedef struct NAME_VAR_ *NAME_VAR;
struct VARIABLE_;
typedef struct VARIABLE_ *VARIABLE;
struct STRUCTURE_EXP_;
typedef struct STRUCTURE_EXP_ *STRUCTURE_EXP;
struct STRUCT_FUNC_HEAD_;
typedef struct STRUCT_FUNC_HEAD_ *STRUCT_FUNC_HEAD;
struct STRUCTURE_VAR_;
typedef struct STRUCTURE_VAR_ *STRUCTURE_VAR;
struct STRUCT_FUNC_;
typedef struct STRUCT_FUNC_ *STRUCT_FUNC;
struct QUAL_STRUCT_;
typedef struct QUAL_STRUCT_ *QUAL_STRUCT;
struct STRUCTURE_ID_;
typedef struct STRUCTURE_ID_ *STRUCTURE_ID;
struct ASSIGNMENT_;
typedef struct ASSIGNMENT_ *ASSIGNMENT;
struct EQUALS_;
typedef struct EQUALS_ *EQUALS;
struct STATEMENT_;
typedef struct STATEMENT_ *STATEMENT;
struct BASIC_STATEMENT_;
typedef struct BASIC_STATEMENT_ *BASIC_STATEMENT;
struct OTHER_STATEMENT_;
typedef struct OTHER_STATEMENT_ *OTHER_STATEMENT;
struct IF_STATEMENT_;
typedef struct IF_STATEMENT_ *IF_STATEMENT;
struct IF_CLAUSE_;
typedef struct IF_CLAUSE_ *IF_CLAUSE;
struct TRUE_PART_;
typedef struct TRUE_PART_ *TRUE_PART;
struct IF_;
typedef struct IF_ *IF;
struct THEN_;
typedef struct THEN_ *THEN;
struct RELATIONAL_EXP_;
typedef struct RELATIONAL_EXP_ *RELATIONAL_EXP;
struct RELATIONAL_FACTOR_;
typedef struct RELATIONAL_FACTOR_ *RELATIONAL_FACTOR;
struct REL_PRIM_;
typedef struct REL_PRIM_ *REL_PRIM;
struct COMPARISON_;
typedef struct COMPARISON_ *COMPARISON;
struct ANY_STATEMENT_;
typedef struct ANY_STATEMENT_ *ANY_STATEMENT;
struct ON_PHRASE_;
typedef struct ON_PHRASE_ *ON_PHRASE;
struct ON_CLAUSE_;
typedef struct ON_CLAUSE_ *ON_CLAUSE;
struct LABEL_DEFINITION_;
typedef struct LABEL_DEFINITION_ *LABEL_DEFINITION;
struct CALL_KEY_;
typedef struct CALL_KEY_ *CALL_KEY;
struct ASSIGN_;
typedef struct ASSIGN_ *ASSIGN;
struct CALL_ASSIGN_LIST_;
typedef struct CALL_ASSIGN_LIST_ *CALL_ASSIGN_LIST;
struct DO_GROUP_HEAD_;
typedef struct DO_GROUP_HEAD_ *DO_GROUP_HEAD;
struct ENDING_;
typedef struct ENDING_ *ENDING;
struct READ_KEY_;
typedef struct READ_KEY_ *READ_KEY;
struct WRITE_KEY_;
typedef struct WRITE_KEY_ *WRITE_KEY;
struct READ_PHRASE_;
typedef struct READ_PHRASE_ *READ_PHRASE;
struct WRITE_PHRASE_;
typedef struct WRITE_PHRASE_ *WRITE_PHRASE;
struct READ_ARG_;
typedef struct READ_ARG_ *READ_ARG;
struct WRITE_ARG_;
typedef struct WRITE_ARG_ *WRITE_ARG;
struct FILE_EXP_;
typedef struct FILE_EXP_ *FILE_EXP;
struct FILE_HEAD_;
typedef struct FILE_HEAD_ *FILE_HEAD;
struct IO_CONTROL_;
typedef struct IO_CONTROL_ *IO_CONTROL;
struct WAIT_KEY_;
typedef struct WAIT_KEY_ *WAIT_KEY;
struct TERMINATOR_;
typedef struct TERMINATOR_ *TERMINATOR;
struct TERMINATE_LIST_;
typedef struct TERMINATE_LIST_ *TERMINATE_LIST;
struct SCHEDULE_HEAD_;
typedef struct SCHEDULE_HEAD_ *SCHEDULE_HEAD;
struct SCHEDULE_PHRASE_;
typedef struct SCHEDULE_PHRASE_ *SCHEDULE_PHRASE;
struct SCHEDULE_CONTROL_;
typedef struct SCHEDULE_CONTROL_ *SCHEDULE_CONTROL;
struct TIMING_;
typedef struct TIMING_ *TIMING;
struct REPEAT_;
typedef struct REPEAT_ *REPEAT;
struct STOPPING_;
typedef struct STOPPING_ *STOPPING;
struct SIGNAL_CLAUSE_;
typedef struct SIGNAL_CLAUSE_ *SIGNAL_CLAUSE;
struct PERCENT_MACRO_NAME_;
typedef struct PERCENT_MACRO_NAME_ *PERCENT_MACRO_NAME;
struct PERCENT_MACRO_HEAD_;
typedef struct PERCENT_MACRO_HEAD_ *PERCENT_MACRO_HEAD;
struct PERCENT_MACRO_ARG_;
typedef struct PERCENT_MACRO_ARG_ *PERCENT_MACRO_ARG;
struct CASE_ELSE_;
typedef struct CASE_ELSE_ *CASE_ELSE;
struct WHILE_KEY_;
typedef struct WHILE_KEY_ *WHILE_KEY;
struct WHILE_CLAUSE_;
typedef struct WHILE_CLAUSE_ *WHILE_CLAUSE;
struct FOR_LIST_;
typedef struct FOR_LIST_ *FOR_LIST;
struct ITERATION_BODY_;
typedef struct ITERATION_BODY_ *ITERATION_BODY;
struct ITERATION_CONTROL_;
typedef struct ITERATION_CONTROL_ *ITERATION_CONTROL;
struct FOR_KEY_;
typedef struct FOR_KEY_ *FOR_KEY;
struct TEMPORARY_STMT_;
typedef struct TEMPORARY_STMT_ *TEMPORARY_STMT;
struct CONSTANT_;
typedef struct CONSTANT_ *CONSTANT;
struct ARRAY_HEAD_;
typedef struct ARRAY_HEAD_ *ARRAY_HEAD;
struct MINOR_ATTR_LIST_;
typedef struct MINOR_ATTR_LIST_ *MINOR_ATTR_LIST;
struct MINOR_ATTRIBUTE_;
typedef struct MINOR_ATTRIBUTE_ *MINOR_ATTRIBUTE;
struct INIT_OR_CONST_HEAD_;
typedef struct INIT_OR_CONST_HEAD_ *INIT_OR_CONST_HEAD;
struct REPEATED_CONSTANT_;
typedef struct REPEATED_CONSTANT_ *REPEATED_CONSTANT;
struct REPEAT_HEAD_;
typedef struct REPEAT_HEAD_ *REPEAT_HEAD;
struct NESTED_REPEAT_HEAD_;
typedef struct NESTED_REPEAT_HEAD_ *NESTED_REPEAT_HEAD;
struct DCL_LIST_COMMA_;
typedef struct DCL_LIST_COMMA_ *DCL_LIST_COMMA;
struct LITERAL_EXP_OR_STAR_;
typedef struct LITERAL_EXP_OR_STAR_ *LITERAL_EXP_OR_STAR;
struct TYPE_SPEC_;
typedef struct TYPE_SPEC_ *TYPE_SPEC;
struct BIT_SPEC_;
typedef struct BIT_SPEC_ *BIT_SPEC;
struct CHAR_SPEC_;
typedef struct CHAR_SPEC_ *CHAR_SPEC;
struct STRUCT_SPEC_;
typedef struct STRUCT_SPEC_ *STRUCT_SPEC;
struct STRUCT_SPEC_BODY_;
typedef struct STRUCT_SPEC_BODY_ *STRUCT_SPEC_BODY;
struct STRUCT_TEMPLATE_;
typedef struct STRUCT_TEMPLATE_ *STRUCT_TEMPLATE;
struct STRUCT_SPEC_HEAD_;
typedef struct STRUCT_SPEC_HEAD_ *STRUCT_SPEC_HEAD;
struct ARITH_SPEC_;
typedef struct ARITH_SPEC_ *ARITH_SPEC;
struct COMPILATION_;
typedef struct COMPILATION_ *COMPILATION;
struct BLOCK_DEFINITION_;
typedef struct BLOCK_DEFINITION_ *BLOCK_DEFINITION;
struct BLOCK_STMT_;
typedef struct BLOCK_STMT_ *BLOCK_STMT;
struct BLOCK_STMT_TOP_;
typedef struct BLOCK_STMT_TOP_ *BLOCK_STMT_TOP;
struct BLOCK_STMT_HEAD_;
typedef struct BLOCK_STMT_HEAD_ *BLOCK_STMT_HEAD;
struct LABEL_EXTERNAL_;
typedef struct LABEL_EXTERNAL_ *LABEL_EXTERNAL;
struct CLOSING_;
typedef struct CLOSING_ *CLOSING;
struct BLOCK_BODY_;
typedef struct BLOCK_BODY_ *BLOCK_BODY;
struct FUNCTION_NAME_;
typedef struct FUNCTION_NAME_ *FUNCTION_NAME;
struct PROCEDURE_NAME_;
typedef struct PROCEDURE_NAME_ *PROCEDURE_NAME;
struct FUNC_STMT_BODY_;
typedef struct FUNC_STMT_BODY_ *FUNC_STMT_BODY;
struct PROC_STMT_BODY_;
typedef struct PROC_STMT_BODY_ *PROC_STMT_BODY;
struct DECLARE_GROUP_;
typedef struct DECLARE_GROUP_ *DECLARE_GROUP;
struct DECLARE_ELEMENT_;
typedef struct DECLARE_ELEMENT_ *DECLARE_ELEMENT;
struct PARAMETER_;
typedef struct PARAMETER_ *PARAMETER;
struct PARAMETER_LIST_;
typedef struct PARAMETER_LIST_ *PARAMETER_LIST;
struct PARAMETER_HEAD_;
typedef struct PARAMETER_HEAD_ *PARAMETER_HEAD;
struct DECLARE_STATEMENT_;
typedef struct DECLARE_STATEMENT_ *DECLARE_STATEMENT;
struct ASSIGN_LIST_;
typedef struct ASSIGN_LIST_ *ASSIGN_LIST;
struct TEXT_;
typedef struct TEXT_ *TEXT;
struct REPLACE_STMT_;
typedef struct REPLACE_STMT_ *REPLACE_STMT;
struct REPLACE_HEAD_;
typedef struct REPLACE_HEAD_ *REPLACE_HEAD;
struct ARG_LIST_;
typedef struct ARG_LIST_ *ARG_LIST;
struct STRUCTURE_STMT_;
typedef struct STRUCTURE_STMT_ *STRUCTURE_STMT;
struct STRUCT_STMT_HEAD_;
typedef struct STRUCT_STMT_HEAD_ *STRUCT_STMT_HEAD;
struct STRUCT_STMT_TAIL_;
typedef struct STRUCT_STMT_TAIL_ *STRUCT_STMT_TAIL;
struct INLINE_DEFINITION_;
typedef struct INLINE_DEFINITION_ *INLINE_DEFINITION;
struct ARITH_INLINE_;
typedef struct ARITH_INLINE_ *ARITH_INLINE;
struct ARITH_INLINE_DEF_;
typedef struct ARITH_INLINE_DEF_ *ARITH_INLINE_DEF;
struct BIT_INLINE_;
typedef struct BIT_INLINE_ *BIT_INLINE;
struct BIT_INLINE_DEF_;
typedef struct BIT_INLINE_DEF_ *BIT_INLINE_DEF;
struct CHAR_INLINE_;
typedef struct CHAR_INLINE_ *CHAR_INLINE;
struct CHAR_INLINE_DEF_;
typedef struct CHAR_INLINE_DEF_ *CHAR_INLINE_DEF;
struct STRUC_INLINE_DEF_;
typedef struct STRUC_INLINE_DEF_ *STRUC_INLINE_DEF;


/********************   Abstract Syntax Classes    ********************/

struct DECLARE_BODY_
{
  int line_number, char_number;
  enum { is_AAdeclareBody_declarationList, is_ABdeclareBody_attributes_declarationList } kind;
  union
  {
    struct { DECLARATION_LIST declaration_list_; } aadeclarebody_declarationlist_;
    struct { ATTRIBUTES attributes_; DECLARATION_LIST declaration_list_; } abdeclarebody_attributes_declarationlist_;
  } u;
};

DECLARE_BODY make_AAdeclareBody_declarationList(DECLARATION_LIST p0);
DECLARE_BODY make_ABdeclareBody_attributes_declarationList(ATTRIBUTES p0, DECLARATION_LIST p1);

struct ATTRIBUTES_
{
  int line_number, char_number;
  enum { is_AAattributes_arraySpec_typeAndMinorAttr, is_ABattributes_arraySpec, is_ACattributes_typeAndMinorAttr } kind;
  union
  {
    struct { ARRAY_SPEC array_spec_; TYPE_AND_MINOR_ATTR type_and_minor_attr_; } aaattributes_arrayspec_typeandminorattr_;
    struct { ARRAY_SPEC array_spec_; } abattributes_arrayspec_;
    struct { TYPE_AND_MINOR_ATTR type_and_minor_attr_; } acattributes_typeandminorattr_;
  } u;
};

ATTRIBUTES make_AAattributes_arraySpec_typeAndMinorAttr(ARRAY_SPEC p0, TYPE_AND_MINOR_ATTR p1);
ATTRIBUTES make_ABattributes_arraySpec(ARRAY_SPEC p0);
ATTRIBUTES make_ACattributes_typeAndMinorAttr(TYPE_AND_MINOR_ATTR p0);

struct DECLARATION_
{
  int line_number, char_number;
  enum { is_AAdeclaration_nameId, is_ABdeclaration_nameId_attributes, is_ACdeclaration_labelToken, is_ACdeclaration_labelToken_type_minorAttrList, is_ACdeclaration_labelToken_procedure_minorAttrList, is_ADdeclaration_labelToken_procedure, is_ACdeclaration_labelToken_function_minorAttrList, is_ADdeclaration_labelToken_function_minorAttrList, is_ADdeclaration_labelToken_function, is_AEdeclaration_labelToken_function, is_AEdeclaration_eventToken_event, is_AFdeclaration_eventToken_event_minorAttrList, is_AGdeclaration_eventToken, is_AHdeclaration_eventToken_minorAttrList } kind;
  union
  {
    struct { NAME_ID name_id_; } aadeclaration_nameid_;
    struct { ATTRIBUTES attributes_; NAME_ID name_id_; } abdeclaration_nameid_attributes_;
    struct { LabelToken labeltoken_; } acdeclaration_labeltoken_;
    struct { LabelToken labeltoken_; TYPE_AND_MINOR_ATTR type_and_minor_attr_; } acdeclaration_labeltoken_type_minorattrlist_;
    struct { LabelToken labeltoken_; MINOR_ATTR_LIST minor_attr_list_; } acdeclaration_labeltoken_procedure_minorattrlist_;
    struct { LabelToken labeltoken_; } addeclaration_labeltoken_procedure_;
    struct { LabelToken labeltoken_; TYPE_AND_MINOR_ATTR type_and_minor_attr_; } acdeclaration_labeltoken_function_minorattrlist_;
    struct { NoArgUserFuncIdentifierToken noarguserfuncidentifiertoken_; TYPE_AND_MINOR_ATTR type_and_minor_attr_; } addeclaration_labeltoken_function_minorattrlist_;
    struct { LabelToken labeltoken_; } addeclaration_labeltoken_function_;
    struct { NoArgUserFuncIdentifierToken noarguserfuncidentifiertoken_; } aedeclaration_labeltoken_function_;
    struct { EventToken eventtoken_; } aedeclaration_eventtoken_event_;
    struct { EventToken eventtoken_; MINOR_ATTR_LIST minor_attr_list_; } afdeclaration_eventtoken_event_minorattrlist_;
    struct { EventToken eventtoken_; } agdeclaration_eventtoken_;
    struct { EventToken eventtoken_; MINOR_ATTR_LIST minor_attr_list_; } ahdeclaration_eventtoken_minorattrlist_;
  } u;
};

DECLARATION make_AAdeclaration_nameId(NAME_ID p0);
DECLARATION make_ABdeclaration_nameId_attributes(NAME_ID p0, ATTRIBUTES p1);
DECLARATION make_ACdeclaration_labelToken(LabelToken p0);
DECLARATION make_ACdeclaration_labelToken_type_minorAttrList(LabelToken p0, TYPE_AND_MINOR_ATTR p1);
DECLARATION make_ACdeclaration_labelToken_procedure_minorAttrList(LabelToken p0, MINOR_ATTR_LIST p1);
DECLARATION make_ADdeclaration_labelToken_procedure(LabelToken p0);
DECLARATION make_ACdeclaration_labelToken_function_minorAttrList(LabelToken p0, TYPE_AND_MINOR_ATTR p1);
DECLARATION make_ADdeclaration_labelToken_function_minorAttrList(NoArgUserFuncIdentifierToken p0, TYPE_AND_MINOR_ATTR p1);
DECLARATION make_ADdeclaration_labelToken_function(LabelToken p0);
DECLARATION make_AEdeclaration_labelToken_function(NoArgUserFuncIdentifierToken p0);
DECLARATION make_AEdeclaration_eventToken_event(EventToken p0);
DECLARATION make_AFdeclaration_eventToken_event_minorAttrList(EventToken p0, MINOR_ATTR_LIST p1);
DECLARATION make_AGdeclaration_eventToken(EventToken p0);
DECLARATION make_AHdeclaration_eventToken_minorAttrList(EventToken p0, MINOR_ATTR_LIST p1);

struct ARRAY_SPEC_
{
  int line_number, char_number;
  enum { is_AAarraySpec_arrayHead_literalExpOrStar, is_ABarraySpec_function, is_ACarraySpec_procedure, is_ADarraySpec_program, is_AEarraySpec_task } kind;
  union
  {
    struct { ARRAY_HEAD array_head_; LITERAL_EXP_OR_STAR literal_exp_or_star_; } aaarrayspec_arrayhead_literalexporstar_;
  } u;
};

ARRAY_SPEC make_AAarraySpec_arrayHead_literalExpOrStar(ARRAY_HEAD p0, LITERAL_EXP_OR_STAR p1);
ARRAY_SPEC make_ABarraySpec_function(void);
ARRAY_SPEC make_ACarraySpec_procedure(void);
ARRAY_SPEC make_ADarraySpec_program(void);
ARRAY_SPEC make_AEarraySpec_task(void);

struct TYPE_AND_MINOR_ATTR_
{
  int line_number, char_number;
  enum { is_AAtypeAndMinorAttr_typeSpec, is_ABtypeAndMinorAttr_typeSpec_minorAttrList, is_ACtypeAndMinorAttr_minorAttrList } kind;
  union
  {
    struct { TYPE_SPEC type_spec_; } aatypeandminorattr_typespec_;
    struct { MINOR_ATTR_LIST minor_attr_list_; TYPE_SPEC type_spec_; } abtypeandminorattr_typespec_minorattrlist_;
    struct { MINOR_ATTR_LIST minor_attr_list_; } actypeandminorattr_minorattrlist_;
  } u;
};

TYPE_AND_MINOR_ATTR make_AAtypeAndMinorAttr_typeSpec(TYPE_SPEC p0);
TYPE_AND_MINOR_ATTR make_ABtypeAndMinorAttr_typeSpec_minorAttrList(TYPE_SPEC p0, MINOR_ATTR_LIST p1);
TYPE_AND_MINOR_ATTR make_ACtypeAndMinorAttr_minorAttrList(MINOR_ATTR_LIST p0);

struct IDENTIFIER_
{
  int line_number, char_number;
  enum { is_AAidentifier } kind;
  union
  {
    struct { IdentifierToken identifiertoken_; } aaidentifier_;
  } u;
};

IDENTIFIER make_AAidentifier(IdentifierToken p0);

struct SQ_DQ_NAME_
{
  int line_number, char_number;
  enum { is_AAsQdQName_doublyQualNameHead_literalExpOrStar, is_ABsQdQName_arithConv } kind;
  union
  {
    struct { DOUBLY_QUAL_NAME_HEAD doubly_qual_name_head_; LITERAL_EXP_OR_STAR literal_exp_or_star_; } aasqdqname_doublyqualnamehead_literalexporstar_;
    struct { ARITH_CONV arith_conv_; } absqdqname_arithconv_;
  } u;
};

SQ_DQ_NAME make_AAsQdQName_doublyQualNameHead_literalExpOrStar(DOUBLY_QUAL_NAME_HEAD p0, LITERAL_EXP_OR_STAR p1);
SQ_DQ_NAME make_ABsQdQName_arithConv(ARITH_CONV p0);

struct DOUBLY_QUAL_NAME_HEAD_
{
  int line_number, char_number;
  enum { is_AAdoublyQualNameHead_vector, is_ABdoublyQualNameHead_matrix_literalExpOrStar } kind;
  union
  {
    struct { LITERAL_EXP_OR_STAR literal_exp_or_star_; } abdoublyqualnamehead_matrix_literalexporstar_;
  } u;
};

DOUBLY_QUAL_NAME_HEAD make_AAdoublyQualNameHead_vector(void);
DOUBLY_QUAL_NAME_HEAD make_ABdoublyQualNameHead_matrix_literalExpOrStar(LITERAL_EXP_OR_STAR p0);

struct ARITH_CONV_
{
  int line_number, char_number;
  enum { is_AAarithConv_integer, is_ABarithConv_scalar, is_ACarithConv_vector, is_ADarithConv_matrix } kind;
  union
  {
  } u;
};

ARITH_CONV make_AAarithConv_integer(void);
ARITH_CONV make_ABarithConv_scalar(void);
ARITH_CONV make_ACarithConv_vector(void);
ARITH_CONV make_ADarithConv_matrix(void);

struct DECLARATION_LIST_
{
  int line_number, char_number;
  enum { is_AAdeclaration_list, is_ABdeclaration_list } kind;
  union
  {
    struct { DECLARATION declaration_; } aadeclaration_list_;
    struct { DCL_LIST_COMMA dcl_list_comma_; DECLARATION declaration_; } abdeclaration_list_;
  } u;
};

DECLARATION_LIST make_AAdeclaration_list(DECLARATION p0);
DECLARATION_LIST make_ABdeclaration_list(DCL_LIST_COMMA p0, DECLARATION p1);

struct NAME_ID_
{
  int line_number, char_number;
  enum { is_AAnameId_identifier, is_ABnameId_identifier_name, is_ACnameId_bitId, is_ADnameId_charId, is_AEnameId_bitFunctionIdentifierToken, is_AFnameId_charFunctionIdentifierToken, is_AGnameId_structIdentifierToken, is_AHnameId_structFunctionIdentifierToken } kind;
  union
  {
    struct { IDENTIFIER identifier_; } aanameid_identifier_;
    struct { IDENTIFIER identifier_; } abnameid_identifier_name_;
    struct { BIT_ID bit_id_; } acnameid_bitid_;
    struct { CHAR_ID char_id_; } adnameid_charid_;
    struct { BitFunctionIdentifierToken bitfunctionidentifiertoken_; } aenameid_bitfunctionidentifiertoken_;
    struct { CharFunctionIdentifierToken charfunctionidentifiertoken_; } afnameid_charfunctionidentifiertoken_;
    struct { StructIdentifierToken structidentifiertoken_; } agnameid_structidentifiertoken_;
    struct { StructFunctionIdentifierToken structfunctionidentifiertoken_; } ahnameid_structfunctionidentifiertoken_;
  } u;
};

NAME_ID make_AAnameId_identifier(IDENTIFIER p0);
NAME_ID make_ABnameId_identifier_name(IDENTIFIER p0);
NAME_ID make_ACnameId_bitId(BIT_ID p0);
NAME_ID make_ADnameId_charId(CHAR_ID p0);
NAME_ID make_AEnameId_bitFunctionIdentifierToken(BitFunctionIdentifierToken p0);
NAME_ID make_AFnameId_charFunctionIdentifierToken(CharFunctionIdentifierToken p0);
NAME_ID make_AGnameId_structIdentifierToken(StructIdentifierToken p0);
NAME_ID make_AHnameId_structFunctionIdentifierToken(StructFunctionIdentifierToken p0);

struct ARITH_EXP_
{
  int line_number, char_number;
  enum { is_AAarithExpTerm, is_ABarithExpPlusTerm, is_ACarithMinusTerm, is_ADarithExpArithExpPlusTerm, is_AEarithExpArithExpMinusTerm } kind;
  union
  {
    struct { TERM term_; } aaarithexpterm_;
    struct { PLUS plus_; TERM term_; } abarithexpplusterm_;
    struct { MINUS minus_; TERM term_; } acarithminusterm_;
    struct { ARITH_EXP arith_exp_; PLUS plus_; TERM term_; } adarithexparithexpplusterm_;
    struct { ARITH_EXP arith_exp_; MINUS minus_; TERM term_; } aearithexparithexpminusterm_;
  } u;
};

ARITH_EXP make_AAarithExpTerm(TERM p0);
ARITH_EXP make_ABarithExpPlusTerm(PLUS p0, TERM p1);
ARITH_EXP make_ACarithMinusTerm(MINUS p0, TERM p1);
ARITH_EXP make_ADarithExpArithExpPlusTerm(ARITH_EXP p0, PLUS p1, TERM p2);
ARITH_EXP make_AEarithExpArithExpMinusTerm(ARITH_EXP p0, MINUS p1, TERM p2);

struct TERM_
{
  int line_number, char_number;
  enum { is_AAtermNoDivide, is_ABtermDivide } kind;
  union
  {
    struct { PRODUCT product_; } aatermnodivide_;
    struct { PRODUCT product_; TERM term_; } abtermdivide_;
  } u;
};

TERM make_AAtermNoDivide(PRODUCT p0);
TERM make_ABtermDivide(PRODUCT p0, TERM p1);

struct PLUS_
{
  int line_number, char_number;
  enum { is_AAplus } kind;
  union
  {
  } u;
};

PLUS make_AAplus(void);

struct MINUS_
{
  int line_number, char_number;
  enum { is_AAminus } kind;
  union
  {
  } u;
};

MINUS make_AAminus(void);

struct PRODUCT_
{
  int line_number, char_number;
  enum { is_AAproductSingle, is_ABproductCross, is_ACproductDot, is_ADproductMultiplication } kind;
  union
  {
    struct { FACTOR factor_; } aaproductsingle_;
    struct { FACTOR factor_; PRODUCT product_; } abproductcross_;
    struct { FACTOR factor_; PRODUCT product_; } acproductdot_;
    struct { FACTOR factor_; PRODUCT product_; } adproductmultiplication_;
  } u;
};

PRODUCT make_AAproductSingle(FACTOR p0);
PRODUCT make_ABproductCross(FACTOR p0, PRODUCT p1);
PRODUCT make_ACproductDot(FACTOR p0, PRODUCT p1);
PRODUCT make_ADproductMultiplication(FACTOR p0, PRODUCT p1);

struct FACTOR_
{
  int line_number, char_number;
  enum { is_AAfactor, is_ABfactorExponentiation, is_ABfactorTranspose } kind;
  union
  {
    struct { PRIMARY primary_; } aafactor_;
    struct { EXPONENTIATION exponentiation_; FACTOR factor_; PRIMARY primary_; } abfactorexponentiation_;
    struct { PRIMARY primary_; } abfactortranspose_;
  } u;
};

FACTOR make_AAfactor(PRIMARY p0);
FACTOR make_ABfactorExponentiation(PRIMARY p0, EXPONENTIATION p1, FACTOR p2);
FACTOR make_ABfactorTranspose(PRIMARY p0);

struct EXPONENTIATION_
{
  int line_number, char_number;
  enum { is_AAexponentiation } kind;
  union
  {
  } u;
};

EXPONENTIATION make_AAexponentiation(void);

struct PRIMARY_
{
  int line_number, char_number;
  enum { is_AAprimary, is_ADprimary, is_ABprimary, is_AEprimary } kind;
  union
  {
    struct { ARITH_VAR arith_var_; } aaprimary_;
    struct { PRE_PRIMARY pre_primary_; } adprimary_;
    struct { MODIFIED_ARITH_FUNC modified_arith_func_; } abprimary_;
    struct { PRE_PRIMARY pre_primary_; QUALIFIER qualifier_; } aeprimary_;
  } u;
};

PRIMARY make_AAprimary(ARITH_VAR p0);
PRIMARY make_ADprimary(PRE_PRIMARY p0);
PRIMARY make_ABprimary(MODIFIED_ARITH_FUNC p0);
PRIMARY make_AEprimary(PRE_PRIMARY p0, QUALIFIER p1);

struct ARITH_VAR_
{
  int line_number, char_number;
  enum { is_AAarith_var, is_ACarith_var, is_AAarithVarBracketed, is_ABarithVarBracketed, is_AAarithVarBraced, is_ABarithVarBraced, is_ABarith_var, is_ADarith_var } kind;
  union
  {
    struct { ARITH_ID arith_id_; } aaarith_var_;
    struct { ARITH_ID arith_id_; SUBSCRIPT subscript_; } acarith_var_;
    struct { ARITH_ID arith_id_; } aaarithvarbracketed_;
    struct { ARITH_ID arith_id_; SUBSCRIPT subscript_; } abarithvarbracketed_;
    struct { QUAL_STRUCT qual_struct_; } aaarithvarbraced_;
    struct { QUAL_STRUCT qual_struct_; SUBSCRIPT subscript_; } abarithvarbraced_;
    struct { ARITH_ID arith_id_; QUAL_STRUCT qual_struct_; } abarith_var_;
    struct { ARITH_ID arith_id_; QUAL_STRUCT qual_struct_; SUBSCRIPT subscript_; } adarith_var_;
  } u;
};

ARITH_VAR make_AAarith_var(ARITH_ID p0);
ARITH_VAR make_ACarith_var(ARITH_ID p0, SUBSCRIPT p1);
ARITH_VAR make_AAarithVarBracketed(ARITH_ID p0);
ARITH_VAR make_ABarithVarBracketed(ARITH_ID p0, SUBSCRIPT p1);
ARITH_VAR make_AAarithVarBraced(QUAL_STRUCT p0);
ARITH_VAR make_ABarithVarBraced(QUAL_STRUCT p0, SUBSCRIPT p1);
ARITH_VAR make_ABarith_var(QUAL_STRUCT p0, ARITH_ID p1);
ARITH_VAR make_ADarith_var(QUAL_STRUCT p0, ARITH_ID p1, SUBSCRIPT p2);

struct PRE_PRIMARY_
{
  int line_number, char_number;
  enum { is_AApre_primary, is_ABpre_primary, is_ACpre_primary, is_ADprePrimaryRtlFunction, is_ADprePrimaryTypeof, is_ADprePrimaryTypeofv, is_ADprePrimaryRtlShaping, is_ADprePrimaryRtlShapingStar, is_AEprePrimaryFunction } kind;
  union
  {
    struct { ARITH_EXP arith_exp_; } aapre_primary_;
    struct { NUMBER number_; } abpre_primary_;
    struct { COMPOUND_NUMBER compound_number_; } acpre_primary_;
    struct { ARITH_FUNC arith_func_; CALL_LIST call_list_; } adpreprimaryrtlfunction_;
    struct { CALL_LIST call_list_; } adpreprimarytypeof_;
    struct { CALL_LIST call_list_; } adpreprimarytypeofv_;
    struct { SHAPING_HEAD shaping_head_; } adpreprimaryrtlshaping_;
    struct { SHAPING_HEAD shaping_head_; } adpreprimaryrtlshapingstar_;
    struct { CALL_LIST call_list_; LabelToken labeltoken_; } aepreprimaryfunction_;
  } u;
};

PRE_PRIMARY make_AApre_primary(ARITH_EXP p0);
PRE_PRIMARY make_ABpre_primary(NUMBER p0);
PRE_PRIMARY make_ACpre_primary(COMPOUND_NUMBER p0);
PRE_PRIMARY make_ADprePrimaryRtlFunction(ARITH_FUNC p0, CALL_LIST p1);
PRE_PRIMARY make_ADprePrimaryTypeof(CALL_LIST p0);
PRE_PRIMARY make_ADprePrimaryTypeofv(CALL_LIST p0);
PRE_PRIMARY make_ADprePrimaryRtlShaping(SHAPING_HEAD p0);
PRE_PRIMARY make_ADprePrimaryRtlShapingStar(SHAPING_HEAD p0);
PRE_PRIMARY make_AEprePrimaryFunction(LabelToken p0, CALL_LIST p1);

struct NUMBER_
{
  int line_number, char_number;
  enum { is_AAnumber, is_ABnumber } kind;
  union
  {
    struct { SIMPLE_NUMBER simple_number_; } aanumber_;
    struct { LEVEL level_; } abnumber_;
  } u;
};

NUMBER make_AAnumber(SIMPLE_NUMBER p0);
NUMBER make_ABnumber(LEVEL p0);

struct LEVEL_
{
  int line_number, char_number;
  enum { is_ZZlevel } kind;
  union
  {
    struct { LevelToken leveltoken_; } zzlevel_;
  } u;
};

LEVEL make_ZZlevel(LevelToken p0);

struct COMPOUND_NUMBER_
{
  int line_number, char_number;
  enum { is_CLcompound_number } kind;
  union
  {
    struct { CompoundToken compoundtoken_; } clcompound_number_;
  } u;
};

COMPOUND_NUMBER make_CLcompound_number(CompoundToken p0);

struct SIMPLE_NUMBER_
{
  int line_number, char_number;
  enum { is_CKsimple_number } kind;
  union
  {
    struct { NumberToken numbertoken_; } cksimple_number_;
  } u;
};

SIMPLE_NUMBER make_CKsimple_number(NumberToken p0);

struct MODIFIED_ARITH_FUNC_
{
  int line_number, char_number;
  enum { is_AAmodified_arith_func, is_ACmodified_arith_func, is_ADmodified_arith_func, is_AEmodified_arith_func } kind;
  union
  {
    struct { NO_ARG_ARITH_FUNC no_arg_arith_func_; } aamodified_arith_func_;
    struct { NO_ARG_ARITH_FUNC no_arg_arith_func_; SUBSCRIPT subscript_; } acmodified_arith_func_;
    struct { NO_ARG_ARITH_FUNC no_arg_arith_func_; QUAL_STRUCT qual_struct_; } admodified_arith_func_;
    struct { NO_ARG_ARITH_FUNC no_arg_arith_func_; QUAL_STRUCT qual_struct_; SUBSCRIPT subscript_; } aemodified_arith_func_;
  } u;
};

MODIFIED_ARITH_FUNC make_AAmodified_arith_func(NO_ARG_ARITH_FUNC p0);
MODIFIED_ARITH_FUNC make_ACmodified_arith_func(NO_ARG_ARITH_FUNC p0, SUBSCRIPT p1);
MODIFIED_ARITH_FUNC make_ADmodified_arith_func(QUAL_STRUCT p0, NO_ARG_ARITH_FUNC p1);
MODIFIED_ARITH_FUNC make_AEmodified_arith_func(QUAL_STRUCT p0, NO_ARG_ARITH_FUNC p1, SUBSCRIPT p2);

struct SHAPING_HEAD_
{
  int line_number, char_number;
  enum { is_ADprePrimaryRtlShapingHeadInteger, is_ADprePrimaryRtlShapingHeadScalar, is_ADprePrimaryRtlShapingHeadVector, is_ADprePrimaryRtlShapingHeadMatrix, is_ADprePrimaryRtlShapingHeadIntegerSubscript, is_ADprePrimaryRtlShapingHeadScalarSubscript, is_ADprePrimaryRtlShapingHeadVectorSubscript, is_ADprePrimaryRtlShapingHeadMatrixSubscript, is_ADprePrimaryRtlShapingHeadRepeated } kind;
  union
  {
    struct { REPEATED_CONSTANT repeated_constant_; } adpreprimaryrtlshapingheadinteger_;
    struct { REPEATED_CONSTANT repeated_constant_; } adpreprimaryrtlshapingheadscalar_;
    struct { REPEATED_CONSTANT repeated_constant_; } adpreprimaryrtlshapingheadvector_;
    struct { REPEATED_CONSTANT repeated_constant_; } adpreprimaryrtlshapingheadmatrix_;
    struct { REPEATED_CONSTANT repeated_constant_; SUBSCRIPT subscript_; } adpreprimaryrtlshapingheadintegersubscript_;
    struct { REPEATED_CONSTANT repeated_constant_; SUBSCRIPT subscript_; } adpreprimaryrtlshapingheadscalarsubscript_;
    struct { REPEATED_CONSTANT repeated_constant_; SUBSCRIPT subscript_; } adpreprimaryrtlshapingheadvectorsubscript_;
    struct { REPEATED_CONSTANT repeated_constant_; SUBSCRIPT subscript_; } adpreprimaryrtlshapingheadmatrixsubscript_;
    struct { REPEATED_CONSTANT repeated_constant_; SHAPING_HEAD shaping_head_; } adpreprimaryrtlshapingheadrepeated_;
  } u;
};

SHAPING_HEAD make_ADprePrimaryRtlShapingHeadInteger(REPEATED_CONSTANT p0);
SHAPING_HEAD make_ADprePrimaryRtlShapingHeadScalar(REPEATED_CONSTANT p0);
SHAPING_HEAD make_ADprePrimaryRtlShapingHeadVector(REPEATED_CONSTANT p0);
SHAPING_HEAD make_ADprePrimaryRtlShapingHeadMatrix(REPEATED_CONSTANT p0);
SHAPING_HEAD make_ADprePrimaryRtlShapingHeadIntegerSubscript(SUBSCRIPT p0, REPEATED_CONSTANT p1);
SHAPING_HEAD make_ADprePrimaryRtlShapingHeadScalarSubscript(SUBSCRIPT p0, REPEATED_CONSTANT p1);
SHAPING_HEAD make_ADprePrimaryRtlShapingHeadVectorSubscript(SUBSCRIPT p0, REPEATED_CONSTANT p1);
SHAPING_HEAD make_ADprePrimaryRtlShapingHeadMatrixSubscript(SUBSCRIPT p0, REPEATED_CONSTANT p1);
SHAPING_HEAD make_ADprePrimaryRtlShapingHeadRepeated(SHAPING_HEAD p0, REPEATED_CONSTANT p1);

struct CALL_LIST_
{
  int line_number, char_number;
  enum { is_AAcall_list, is_ABcall_list } kind;
  union
  {
    struct { LIST_EXP list_exp_; } aacall_list_;
    struct { CALL_LIST call_list_; LIST_EXP list_exp_; } abcall_list_;
  } u;
};

CALL_LIST make_AAcall_list(LIST_EXP p0);
CALL_LIST make_ABcall_list(CALL_LIST p0, LIST_EXP p1);

struct LIST_EXP_
{
  int line_number, char_number;
  enum { is_AAlist_exp, is_ABlist_expRepeated, is_ADlist_exp } kind;
  union
  {
    struct { EXPRESSION expression_; } aalist_exp_;
    struct { ARITH_EXP arith_exp_; EXPRESSION expression_; } ablist_exprepeated_;
    struct { QUAL_STRUCT qual_struct_; } adlist_exp_;
  } u;
};

LIST_EXP make_AAlist_exp(EXPRESSION p0);
LIST_EXP make_ABlist_expRepeated(ARITH_EXP p0, EXPRESSION p1);
LIST_EXP make_ADlist_exp(QUAL_STRUCT p0);

struct EXPRESSION_
{
  int line_number, char_number;
  enum { is_AAexpression, is_ABexpression, is_ACexpression, is_AEexpression, is_ADexpression } kind;
  union
  {
    struct { ARITH_EXP arith_exp_; } aaexpression_;
    struct { BIT_EXP bit_exp_; } abexpression_;
    struct { CHAR_EXP char_exp_; } acexpression_;
    struct { NAME_EXP name_exp_; } aeexpression_;
    struct { STRUCTURE_EXP structure_exp_; } adexpression_;
  } u;
};

EXPRESSION make_AAexpression(ARITH_EXP p0);
EXPRESSION make_ABexpression(BIT_EXP p0);
EXPRESSION make_ACexpression(CHAR_EXP p0);
EXPRESSION make_AEexpression(NAME_EXP p0);
EXPRESSION make_ADexpression(STRUCTURE_EXP p0);

struct ARITH_ID_
{
  int line_number, char_number;
  enum { is_FGarith_id, is_FHarith_id } kind;
  union
  {
    struct { IDENTIFIER identifier_; } fgarith_id_;
    struct { ArithFieldToken arithfieldtoken_; } fharith_id_;
  } u;
};

ARITH_ID make_FGarith_id(IDENTIFIER p0);
ARITH_ID make_FHarith_id(ArithFieldToken p0);

struct NO_ARG_ARITH_FUNC_
{
  int line_number, char_number;
  enum { is_ZZnoArgumentUserFunction, is_ZZclocktime, is_ZZdate, is_ZZerrgrp, is_ZZerrnum, is_ZZprio, is_ZZrandom, is_ZZrandomg, is_ZZruntime } kind;
  union
  {
    struct { NoArgUserFuncIdentifierToken noarguserfuncidentifiertoken_; } zznoargumentuserfunction_;
  } u;
};

NO_ARG_ARITH_FUNC make_ZZnoArgumentUserFunction(NoArgUserFuncIdentifierToken p0);
NO_ARG_ARITH_FUNC make_ZZclocktime(void);
NO_ARG_ARITH_FUNC make_ZZdate(void);
NO_ARG_ARITH_FUNC make_ZZerrgrp(void);
NO_ARG_ARITH_FUNC make_ZZerrnum(void);
NO_ARG_ARITH_FUNC make_ZZprio(void);
NO_ARG_ARITH_FUNC make_ZZrandom(void);
NO_ARG_ARITH_FUNC make_ZZrandomg(void);
NO_ARG_ARITH_FUNC make_ZZruntime(void);

struct ARITH_FUNC_
{
  int line_number, char_number;
  enum { is_ZZnextime, is_ZZabs, is_ZZceiling, is_ZZdiv, is_ZZfloor, is_ZZmidval, is_ZZmod, is_ZZremainder, is_ZZround, is_ZZsign, is_ZZsignum, is_ZZtruncate, is_ZZarccos, is_ZZarccosh, is_ZZarcsin, is_ZZarcsinh, is_ZZarctan2, is_ZZarctan, is_ZZarctanh, is_ZZcos, is_ZZcosh, is_ZZexp, is_ZZlog, is_ZZsin, is_ZZsinh, is_ZZsqrt, is_ZZtan, is_ZZtanh, is_ZZshl, is_ZZshr, is_ZZabval, is_ZZdet, is_ZZtrace, is_ZZunit, is_ZZindex, is_ZZlength, is_ZZinverse, is_ZZtranspose, is_ZZprod, is_ZZsum, is_ZZsize, is_ZZmax, is_ZZmin } kind;
  union
  {
  } u;
};

ARITH_FUNC make_ZZnextime(void);
ARITH_FUNC make_ZZabs(void);
ARITH_FUNC make_ZZceiling(void);
ARITH_FUNC make_ZZdiv(void);
ARITH_FUNC make_ZZfloor(void);
ARITH_FUNC make_ZZmidval(void);
ARITH_FUNC make_ZZmod(void);
ARITH_FUNC make_ZZremainder(void);
ARITH_FUNC make_ZZround(void);
ARITH_FUNC make_ZZsign(void);
ARITH_FUNC make_ZZsignum(void);
ARITH_FUNC make_ZZtruncate(void);
ARITH_FUNC make_ZZarccos(void);
ARITH_FUNC make_ZZarccosh(void);
ARITH_FUNC make_ZZarcsin(void);
ARITH_FUNC make_ZZarcsinh(void);
ARITH_FUNC make_ZZarctan2(void);
ARITH_FUNC make_ZZarctan(void);
ARITH_FUNC make_ZZarctanh(void);
ARITH_FUNC make_ZZcos(void);
ARITH_FUNC make_ZZcosh(void);
ARITH_FUNC make_ZZexp(void);
ARITH_FUNC make_ZZlog(void);
ARITH_FUNC make_ZZsin(void);
ARITH_FUNC make_ZZsinh(void);
ARITH_FUNC make_ZZsqrt(void);
ARITH_FUNC make_ZZtan(void);
ARITH_FUNC make_ZZtanh(void);
ARITH_FUNC make_ZZshl(void);
ARITH_FUNC make_ZZshr(void);
ARITH_FUNC make_ZZabval(void);
ARITH_FUNC make_ZZdet(void);
ARITH_FUNC make_ZZtrace(void);
ARITH_FUNC make_ZZunit(void);
ARITH_FUNC make_ZZindex(void);
ARITH_FUNC make_ZZlength(void);
ARITH_FUNC make_ZZinverse(void);
ARITH_FUNC make_ZZtranspose(void);
ARITH_FUNC make_ZZprod(void);
ARITH_FUNC make_ZZsum(void);
ARITH_FUNC make_ZZsize(void);
ARITH_FUNC make_ZZmax(void);
ARITH_FUNC make_ZZmin(void);

struct BIT_FUNC_
{
  int line_number, char_number;
  enum { is_ZZodd, is_ZZxor, is_ZZuserBitFunction } kind;
  union
  {
    struct { BitFunctionIdentifierToken bitfunctionidentifiertoken_; } zzuserbitfunction_;
  } u;
};

BIT_FUNC make_ZZodd(void);
BIT_FUNC make_ZZxor(void);
BIT_FUNC make_ZZuserBitFunction(BitFunctionIdentifierToken p0);

struct SUBSCRIPT_
{
  int line_number, char_number;
  enum { is_AAsubscript, is_ABsubscript, is_ACsubscript, is_ADsubscript } kind;
  union
  {
    struct { SUB_HEAD sub_head_; } aasubscript_;
    struct { QUALIFIER qualifier_; } absubscript_;
    struct { NUMBER number_; } acsubscript_;
    struct { ARITH_VAR arith_var_; } adsubscript_;
  } u;
};

SUBSCRIPT make_AAsubscript(SUB_HEAD p0);
SUBSCRIPT make_ABsubscript(QUALIFIER p0);
SUBSCRIPT make_ACsubscript(NUMBER p0);
SUBSCRIPT make_ADsubscript(ARITH_VAR p0);

struct QUALIFIER_
{
  int line_number, char_number;
  enum { is_AAqualifier, is_ABqualifier, is_ACqualifier, is_ADqualifier } kind;
  union
  {
    struct { PREC_SPEC prec_spec_; } aaqualifier_;
    struct { ARITH_EXP arith_exp_; SCALE_HEAD scale_head_; } abqualifier_;
    struct { ARITH_EXP arith_exp_; PREC_SPEC prec_spec_; SCALE_HEAD scale_head_; } acqualifier_;
    struct { RADIX radix_; } adqualifier_;
  } u;
};

QUALIFIER make_AAqualifier(PREC_SPEC p0);
QUALIFIER make_ABqualifier(SCALE_HEAD p0, ARITH_EXP p1);
QUALIFIER make_ACqualifier(PREC_SPEC p0, SCALE_HEAD p1, ARITH_EXP p2);
QUALIFIER make_ADqualifier(RADIX p0);

struct SCALE_HEAD_
{
  int line_number, char_number;
  enum { is_AAscale_head, is_ABscale_head } kind;
  union
  {
  } u;
};

SCALE_HEAD make_AAscale_head(void);
SCALE_HEAD make_ABscale_head(void);

struct PREC_SPEC_
{
  int line_number, char_number;
  enum { is_AAprecSpecSingle, is_ABprecSpecDouble } kind;
  union
  {
  } u;
};

PREC_SPEC make_AAprecSpecSingle(void);
PREC_SPEC make_ABprecSpecDouble(void);

struct SUB_START_
{
  int line_number, char_number;
  enum { is_AAsubStartGroup, is_ABsubStartPrecSpec, is_ACsubStartSemicolon, is_ADsubStartColon, is_AEsubStartComma } kind;
  union
  {
    struct { PREC_SPEC prec_spec_; } absubstartprecspec_;
    struct { SUB_HEAD sub_head_; } acsubstartsemicolon_;
    struct { SUB_HEAD sub_head_; } adsubstartcolon_;
    struct { SUB_HEAD sub_head_; } aesubstartcomma_;
  } u;
};

SUB_START make_AAsubStartGroup(void);
SUB_START make_ABsubStartPrecSpec(PREC_SPEC p0);
SUB_START make_ACsubStartSemicolon(SUB_HEAD p0);
SUB_START make_ADsubStartColon(SUB_HEAD p0);
SUB_START make_AEsubStartComma(SUB_HEAD p0);

struct SUB_HEAD_
{
  int line_number, char_number;
  enum { is_AAsub_head, is_ABsub_head } kind;
  union
  {
    struct { SUB_START sub_start_; } aasub_head_;
    struct { SUB sub_; SUB_START sub_start_; } absub_head_;
  } u;
};

SUB_HEAD make_AAsub_head(SUB_START p0);
SUB_HEAD make_ABsub_head(SUB_START p0, SUB p1);

struct SUB_
{
  int line_number, char_number;
  enum { is_AAsub, is_ABsubStar, is_ACsubExp, is_ADsubAt } kind;
  union
  {
    struct { SUB_EXP sub_exp_; } aasub_;
    struct { SUB_EXP sub_exp_; SUB_RUN_HEAD sub_run_head_; } acsubexp_;
    struct { ARITH_EXP arith_exp_; SUB_EXP sub_exp_; } adsubat_;
  } u;
};

SUB make_AAsub(SUB_EXP p0);
SUB make_ABsubStar(void);
SUB make_ACsubExp(SUB_RUN_HEAD p0, SUB_EXP p1);
SUB make_ADsubAt(ARITH_EXP p0, SUB_EXP p1);

struct SUB_RUN_HEAD_
{
  int line_number, char_number;
  enum { is_AAsubRunHeadTo } kind;
  union
  {
    struct { SUB_EXP sub_exp_; } aasubrunheadto_;
  } u;
};

SUB_RUN_HEAD make_AAsubRunHeadTo(SUB_EXP p0);

struct SUB_EXP_
{
  int line_number, char_number;
  enum { is_AAsub_exp, is_ABsub_exp } kind;
  union
  {
    struct { ARITH_EXP arith_exp_; } aasub_exp_;
    struct { POUND_EXPRESSION pound_expression_; } absub_exp_;
  } u;
};

SUB_EXP make_AAsub_exp(ARITH_EXP p0);
SUB_EXP make_ABsub_exp(POUND_EXPRESSION p0);

struct POUND_EXPRESSION_
{
  int line_number, char_number;
  enum { is_AApound_expression, is_ABpound_expressionPlusTerm, is_ACpound_expressionMinusTerm } kind;
  union
  {
    struct { PLUS plus_; POUND_EXPRESSION pound_expression_; TERM term_; } abpound_expressionplusterm_;
    struct { MINUS minus_; POUND_EXPRESSION pound_expression_; TERM term_; } acpound_expressionminusterm_;
  } u;
};

POUND_EXPRESSION make_AApound_expression(void);
POUND_EXPRESSION make_ABpound_expressionPlusTerm(POUND_EXPRESSION p0, PLUS p1, TERM p2);
POUND_EXPRESSION make_ACpound_expressionMinusTerm(POUND_EXPRESSION p0, MINUS p1, TERM p2);

struct BIT_EXP_
{
  int line_number, char_number;
  enum { is_AAbitExpFactor, is_ABbitExpOR } kind;
  union
  {
    struct { BIT_FACTOR bit_factor_; } aabitexpfactor_;
    struct { BIT_EXP bit_exp_; BIT_FACTOR bit_factor_; OR or_; } abbitexpor_;
  } u;
};

BIT_EXP make_AAbitExpFactor(BIT_FACTOR p0);
BIT_EXP make_ABbitExpOR(BIT_EXP p0, OR p1, BIT_FACTOR p2);

struct BIT_FACTOR_
{
  int line_number, char_number;
  enum { is_AAbitFactor, is_ABbitFactorAnd } kind;
  union
  {
    struct { BIT_CAT bit_cat_; } aabitfactor_;
    struct { AND and_; BIT_CAT bit_cat_; BIT_FACTOR bit_factor_; } abbitfactorand_;
  } u;
};

BIT_FACTOR make_AAbitFactor(BIT_CAT p0);
BIT_FACTOR make_ABbitFactorAnd(BIT_FACTOR p0, AND p1, BIT_CAT p2);

struct BIT_CAT_
{
  int line_number, char_number;
  enum { is_AAbitCatPrim, is_ABbitCatCat, is_ACbitCatNotPrim, is_ADbitCatNotCat } kind;
  union
  {
    struct { BIT_PRIM bit_prim_; } aabitcatprim_;
    struct { BIT_CAT bit_cat_; BIT_PRIM bit_prim_; CAT cat_; } abbitcatcat_;
    struct { BIT_PRIM bit_prim_; NOT not_; } acbitcatnotprim_;
    struct { BIT_CAT bit_cat_; BIT_PRIM bit_prim_; CAT cat_; NOT not_; } adbitcatnotcat_;
  } u;
};

BIT_CAT make_AAbitCatPrim(BIT_PRIM p0);
BIT_CAT make_ABbitCatCat(BIT_CAT p0, CAT p1, BIT_PRIM p2);
BIT_CAT make_ACbitCatNotPrim(NOT p0, BIT_PRIM p1);
BIT_CAT make_ADbitCatNotCat(BIT_CAT p0, CAT p1, NOT p2, BIT_PRIM p3);

struct OR_
{
  int line_number, char_number;
  enum { is_AAOR, is_ABOR } kind;
  union
  {
    struct { CHAR_VERTICAL_BAR char_vertical_bar_; } aaor_;
  } u;
};

OR make_AAOR(CHAR_VERTICAL_BAR p0);
OR make_ABOR(void);

struct CHAR_VERTICAL_BAR_
{
  int line_number, char_number;
  enum { is_CFchar_vertical_bar } kind;
  union
  {
  } u;
};

CHAR_VERTICAL_BAR make_CFchar_vertical_bar(void);

struct AND_
{
  int line_number, char_number;
  enum { is_AAAND, is_ABAND } kind;
  union
  {
  } u;
};

AND make_AAAND(void);
AND make_ABAND(void);

struct BIT_PRIM_
{
  int line_number, char_number;
  enum { is_AAbitPrimBitVar, is_ABbitPrimLabelVar, is_ACbitPrimEventVar, is_ADbitBitConst, is_AEbitPrimBitExp, is_AHbitPrimSubbit, is_AIbitPrimFunc, is_AIbitPrimInitialized, is_AAbitPrimBitVarBracketed, is_ABbitPrimBitVarBracketed, is_AAbitPrimBitVarBraced, is_ABbitPrimBitVarBraced } kind;
  union
  {
    struct { BIT_VAR bit_var_; } aabitprimbitvar_;
    struct { LABEL_VAR label_var_; } abbitprimlabelvar_;
    struct { EVENT_VAR event_var_; } acbitprimeventvar_;
    struct { BIT_CONST bit_const_; } adbitbitconst_;
    struct { BIT_EXP bit_exp_; } aebitprimbitexp_;
    struct { EXPRESSION expression_; SUBBIT_HEAD subbit_head_; } ahbitprimsubbit_;
    struct { BIT_FUNC_HEAD bit_func_head_; CALL_LIST call_list_; } aibitprimfunc_;
    struct { CALL_LIST call_list_; } aibitpriminitialized_;
    struct { BIT_VAR bit_var_; } aabitprimbitvarbracketed_;
    struct { BIT_VAR bit_var_; SUBSCRIPT subscript_; } abbitprimbitvarbracketed_;
    struct { BIT_VAR bit_var_; } aabitprimbitvarbraced_;
    struct { BIT_VAR bit_var_; SUBSCRIPT subscript_; } abbitprimbitvarbraced_;
  } u;
};

BIT_PRIM make_AAbitPrimBitVar(BIT_VAR p0);
BIT_PRIM make_ABbitPrimLabelVar(LABEL_VAR p0);
BIT_PRIM make_ACbitPrimEventVar(EVENT_VAR p0);
BIT_PRIM make_ADbitBitConst(BIT_CONST p0);
BIT_PRIM make_AEbitPrimBitExp(BIT_EXP p0);
BIT_PRIM make_AHbitPrimSubbit(SUBBIT_HEAD p0, EXPRESSION p1);
BIT_PRIM make_AIbitPrimFunc(BIT_FUNC_HEAD p0, CALL_LIST p1);
BIT_PRIM make_AIbitPrimInitialized(CALL_LIST p0);
BIT_PRIM make_AAbitPrimBitVarBracketed(BIT_VAR p0);
BIT_PRIM make_ABbitPrimBitVarBracketed(BIT_VAR p0, SUBSCRIPT p1);
BIT_PRIM make_AAbitPrimBitVarBraced(BIT_VAR p0);
BIT_PRIM make_ABbitPrimBitVarBraced(BIT_VAR p0, SUBSCRIPT p1);

struct CAT_
{
  int line_number, char_number;
  enum { is_AAcat, is_ABcat } kind;
  union
  {
  } u;
};

CAT make_AAcat(void);
CAT make_ABcat(void);

struct NOT_
{
  int line_number, char_number;
  enum { is_ABNOT, is_ADNOT } kind;
  union
  {
  } u;
};

NOT make_ABNOT(void);
NOT make_ADNOT(void);

struct BIT_VAR_
{
  int line_number, char_number;
  enum { is_AAbit_var, is_ACbit_var, is_ABbit_var, is_ADbit_var } kind;
  union
  {
    struct { BIT_ID bit_id_; } aabit_var_;
    struct { BIT_ID bit_id_; SUBSCRIPT subscript_; } acbit_var_;
    struct { BIT_ID bit_id_; QUAL_STRUCT qual_struct_; } abbit_var_;
    struct { BIT_ID bit_id_; QUAL_STRUCT qual_struct_; SUBSCRIPT subscript_; } adbit_var_;
  } u;
};

BIT_VAR make_AAbit_var(BIT_ID p0);
BIT_VAR make_ACbit_var(BIT_ID p0, SUBSCRIPT p1);
BIT_VAR make_ABbit_var(QUAL_STRUCT p0, BIT_ID p1);
BIT_VAR make_ADbit_var(QUAL_STRUCT p0, BIT_ID p1, SUBSCRIPT p2);

struct LABEL_VAR_
{
  int line_number, char_number;
  enum { is_AAlabel_var, is_ABlabel_var, is_AClabel_var, is_ADlabel_var } kind;
  union
  {
    struct { LABEL label_; } aalabel_var_;
    struct { LABEL label_; SUBSCRIPT subscript_; } ablabel_var_;
    struct { LABEL label_; QUAL_STRUCT qual_struct_; } aclabel_var_;
    struct { LABEL label_; QUAL_STRUCT qual_struct_; SUBSCRIPT subscript_; } adlabel_var_;
  } u;
};

LABEL_VAR make_AAlabel_var(LABEL p0);
LABEL_VAR make_ABlabel_var(LABEL p0, SUBSCRIPT p1);
LABEL_VAR make_AClabel_var(QUAL_STRUCT p0, LABEL p1);
LABEL_VAR make_ADlabel_var(QUAL_STRUCT p0, LABEL p1, SUBSCRIPT p2);

struct EVENT_VAR_
{
  int line_number, char_number;
  enum { is_AAevent_var, is_ACevent_var, is_ABevent_var, is_ADevent_var } kind;
  union
  {
    struct { EVENT event_; } aaevent_var_;
    struct { EVENT event_; SUBSCRIPT subscript_; } acevent_var_;
    struct { EVENT event_; QUAL_STRUCT qual_struct_; } abevent_var_;
    struct { EVENT event_; QUAL_STRUCT qual_struct_; SUBSCRIPT subscript_; } adevent_var_;
  } u;
};

EVENT_VAR make_AAevent_var(EVENT p0);
EVENT_VAR make_ACevent_var(EVENT p0, SUBSCRIPT p1);
EVENT_VAR make_ABevent_var(QUAL_STRUCT p0, EVENT p1);
EVENT_VAR make_ADevent_var(QUAL_STRUCT p0, EVENT p1, SUBSCRIPT p2);

struct BIT_CONST_HEAD_
{
  int line_number, char_number;
  enum { is_AAbit_const_head, is_ABbit_const_head } kind;
  union
  {
    struct { RADIX radix_; } aabit_const_head_;
    struct { NUMBER number_; RADIX radix_; } abbit_const_head_;
  } u;
};

BIT_CONST_HEAD make_AAbit_const_head(RADIX p0);
BIT_CONST_HEAD make_ABbit_const_head(RADIX p0, NUMBER p1);

struct BIT_CONST_
{
  int line_number, char_number;
  enum { is_AAbitConstString, is_ABbitConstTrue, is_ACbitConstFalse, is_ADbitConstOn, is_AEbitConstOff } kind;
  union
  {
    struct { BIT_CONST_HEAD bit_const_head_; CHAR_STRING char_string_; } aabitconststring_;
  } u;
};

BIT_CONST make_AAbitConstString(BIT_CONST_HEAD p0, CHAR_STRING p1);
BIT_CONST make_ABbitConstTrue(void);
BIT_CONST make_ACbitConstFalse(void);
BIT_CONST make_ADbitConstOn(void);
BIT_CONST make_AEbitConstOff(void);

struct RADIX_
{
  int line_number, char_number;
  enum { is_AAradixHEX, is_ABradixOCT, is_ACradixBIN, is_ADradixDEC } kind;
  union
  {
  } u;
};

RADIX make_AAradixHEX(void);
RADIX make_ABradixOCT(void);
RADIX make_ACradixBIN(void);
RADIX make_ADradixDEC(void);

struct CHAR_STRING_
{
  int line_number, char_number;
  enum { is_FPchar_string } kind;
  union
  {
    struct { StringToken stringtoken_; } fpchar_string_;
  } u;
};

CHAR_STRING make_FPchar_string(StringToken p0);

struct SUBBIT_HEAD_
{
  int line_number, char_number;
  enum { is_AAsubbit_head, is_ABsubbit_head } kind;
  union
  {
    struct { SUBBIT_KEY subbit_key_; } aasubbit_head_;
    struct { SUBBIT_KEY subbit_key_; SUBSCRIPT subscript_; } absubbit_head_;
  } u;
};

SUBBIT_HEAD make_AAsubbit_head(SUBBIT_KEY p0);
SUBBIT_HEAD make_ABsubbit_head(SUBBIT_KEY p0, SUBSCRIPT p1);

struct SUBBIT_KEY_
{
  int line_number, char_number;
  enum { is_AAsubbit_key } kind;
  union
  {
  } u;
};

SUBBIT_KEY make_AAsubbit_key(void);

struct BIT_FUNC_HEAD_
{
  int line_number, char_number;
  enum { is_AAbit_func_head, is_ABbit_func_head, is_ACbit_func_head } kind;
  union
  {
    struct { BIT_FUNC bit_func_; } aabit_func_head_;
    struct { SUB_OR_QUALIFIER sub_or_qualifier_; } acbit_func_head_;
  } u;
};

BIT_FUNC_HEAD make_AAbit_func_head(BIT_FUNC p0);
BIT_FUNC_HEAD make_ABbit_func_head(void);
BIT_FUNC_HEAD make_ACbit_func_head(SUB_OR_QUALIFIER p0);

struct BIT_ID_
{
  int line_number, char_number;
  enum { is_FHbit_id } kind;
  union
  {
    struct { BitIdentifierToken bitidentifiertoken_; } fhbit_id_;
  } u;
};

BIT_ID make_FHbit_id(BitIdentifierToken p0);

struct LABEL_
{
  int line_number, char_number;
  enum { is_FKlabel, is_FLlabel, is_FMlabel, is_FNlabel } kind;
  union
  {
    struct { LabelToken labeltoken_; } fklabel_;
    struct { BitFunctionIdentifierToken bitfunctionidentifiertoken_; } fllabel_;
    struct { CharFunctionIdentifierToken charfunctionidentifiertoken_; } fmlabel_;
    struct { StructFunctionIdentifierToken structfunctionidentifiertoken_; } fnlabel_;
  } u;
};

LABEL make_FKlabel(LabelToken p0);
LABEL make_FLlabel(BitFunctionIdentifierToken p0);
LABEL make_FMlabel(CharFunctionIdentifierToken p0);
LABEL make_FNlabel(StructFunctionIdentifierToken p0);

struct EVENT_
{
  int line_number, char_number;
  enum { is_FLevent } kind;
  union
  {
    struct { EventToken eventtoken_; } flevent_;
  } u;
};

EVENT make_FLevent(EventToken p0);

struct SUB_OR_QUALIFIER_
{
  int line_number, char_number;
  enum { is_AAsub_or_qualifier, is_ABsub_or_qualifier } kind;
  union
  {
    struct { SUBSCRIPT subscript_; } aasub_or_qualifier_;
    struct { BIT_QUALIFIER bit_qualifier_; } absub_or_qualifier_;
  } u;
};

SUB_OR_QUALIFIER make_AAsub_or_qualifier(SUBSCRIPT p0);
SUB_OR_QUALIFIER make_ABsub_or_qualifier(BIT_QUALIFIER p0);

struct BIT_QUALIFIER_
{
  int line_number, char_number;
  enum { is_AAbit_qualifier } kind;
  union
  {
    struct { RADIX radix_; } aabit_qualifier_;
  } u;
};

BIT_QUALIFIER make_AAbit_qualifier(RADIX p0);

struct CHAR_EXP_
{
  int line_number, char_number;
  enum { is_AAcharExpPrim, is_ABcharExpCat, is_ACcharExpCat, is_ADcharExpCat, is_AEcharExpCat } kind;
  union
  {
    struct { CHAR_PRIM char_prim_; } aacharexpprim_;
    struct { CAT cat_; CHAR_EXP char_exp_; CHAR_PRIM char_prim_; } abcharexpcat_;
    struct { ARITH_EXP arith_exp_; CAT cat_; CHAR_EXP char_exp_; } accharexpcat_;
    struct { ARITH_EXP arith_exp_1, arith_exp_2; CAT cat_; } adcharexpcat_;
    struct { ARITH_EXP arith_exp_; CAT cat_; CHAR_PRIM char_prim_; } aecharexpcat_;
  } u;
};

CHAR_EXP make_AAcharExpPrim(CHAR_PRIM p0);
CHAR_EXP make_ABcharExpCat(CHAR_EXP p0, CAT p1, CHAR_PRIM p2);
CHAR_EXP make_ACcharExpCat(CHAR_EXP p0, CAT p1, ARITH_EXP p2);
CHAR_EXP make_ADcharExpCat(ARITH_EXP p0, CAT p1, ARITH_EXP p2);
CHAR_EXP make_AEcharExpCat(ARITH_EXP p0, CAT p1, CHAR_PRIM p2);

struct CHAR_PRIM_
{
  int line_number, char_number;
  enum { is_AAchar_prim, is_ABchar_prim, is_AEchar_prim, is_AFchar_prim } kind;
  union
  {
    struct { CHAR_VAR char_var_; } aachar_prim_;
    struct { CHAR_CONST char_const_; } abchar_prim_;
    struct { CALL_LIST call_list_; CHAR_FUNC_HEAD char_func_head_; } aechar_prim_;
    struct { CHAR_EXP char_exp_; } afchar_prim_;
  } u;
};

CHAR_PRIM make_AAchar_prim(CHAR_VAR p0);
CHAR_PRIM make_ABchar_prim(CHAR_CONST p0);
CHAR_PRIM make_AEchar_prim(CHAR_FUNC_HEAD p0, CALL_LIST p1);
CHAR_PRIM make_AFchar_prim(CHAR_EXP p0);

struct CHAR_FUNC_HEAD_
{
  int line_number, char_number;
  enum { is_AAchar_func_head, is_ABchar_func_head } kind;
  union
  {
    struct { CHAR_FUNC char_func_; } aachar_func_head_;
    struct { SUB_OR_QUALIFIER sub_or_qualifier_; } abchar_func_head_;
  } u;
};

CHAR_FUNC_HEAD make_AAchar_func_head(CHAR_FUNC p0);
CHAR_FUNC_HEAD make_ABchar_func_head(SUB_OR_QUALIFIER p0);

struct CHAR_VAR_
{
  int line_number, char_number;
  enum { is_AAchar_var, is_ACchar_var, is_ABchar_var, is_ADchar_var } kind;
  union
  {
    struct { CHAR_ID char_id_; } aachar_var_;
    struct { CHAR_ID char_id_; SUBSCRIPT subscript_; } acchar_var_;
    struct { CHAR_ID char_id_; QUAL_STRUCT qual_struct_; } abchar_var_;
    struct { CHAR_ID char_id_; QUAL_STRUCT qual_struct_; SUBSCRIPT subscript_; } adchar_var_;
  } u;
};

CHAR_VAR make_AAchar_var(CHAR_ID p0);
CHAR_VAR make_ACchar_var(CHAR_ID p0, SUBSCRIPT p1);
CHAR_VAR make_ABchar_var(QUAL_STRUCT p0, CHAR_ID p1);
CHAR_VAR make_ADchar_var(QUAL_STRUCT p0, CHAR_ID p1, SUBSCRIPT p2);

struct CHAR_CONST_
{
  int line_number, char_number;
  enum { is_AAchar_const, is_ABchar_const } kind;
  union
  {
    struct { CHAR_STRING char_string_; } aachar_const_;
    struct { CHAR_STRING char_string_; NUMBER number_; } abchar_const_;
  } u;
};

CHAR_CONST make_AAchar_const(CHAR_STRING p0);
CHAR_CONST make_ABchar_const(NUMBER p0, CHAR_STRING p1);

struct CHAR_FUNC_
{
  int line_number, char_number;
  enum { is_ZZljust, is_ZZrjust, is_ZZtrim, is_ZZuserCharFunction, is_AAcharFuncCharacter } kind;
  union
  {
    struct { CharFunctionIdentifierToken charfunctionidentifiertoken_; } zzusercharfunction_;
  } u;
};

CHAR_FUNC make_ZZljust(void);
CHAR_FUNC make_ZZrjust(void);
CHAR_FUNC make_ZZtrim(void);
CHAR_FUNC make_ZZuserCharFunction(CharFunctionIdentifierToken p0);
CHAR_FUNC make_AAcharFuncCharacter(void);

struct CHAR_ID_
{
  int line_number, char_number;
  enum { is_FIchar_id } kind;
  union
  {
    struct { CharIdentifierToken charidentifiertoken_; } fichar_id_;
  } u;
};

CHAR_ID make_FIchar_id(CharIdentifierToken p0);

struct NAME_EXP_
{
  int line_number, char_number;
  enum { is_AAnameExpKeyVar, is_ABnameExpNull, is_ACnameExpKeyNull } kind;
  union
  {
    struct { NAME_KEY name_key_; NAME_VAR name_var_; } aanameexpkeyvar_;
    struct { NAME_KEY name_key_; } acnameexpkeynull_;
  } u;
};

NAME_EXP make_AAnameExpKeyVar(NAME_KEY p0, NAME_VAR p1);
NAME_EXP make_ABnameExpNull(void);
NAME_EXP make_ACnameExpKeyNull(NAME_KEY p0);

struct NAME_KEY_
{
  int line_number, char_number;
  enum { is_AAname_key } kind;
  union
  {
  } u;
};

NAME_KEY make_AAname_key(void);

struct NAME_VAR_
{
  int line_number, char_number;
  enum { is_AAname_var, is_ACname_var, is_ABname_var } kind;
  union
  {
    struct { VARIABLE variable_; } aaname_var_;
    struct { MODIFIED_ARITH_FUNC modified_arith_func_; } acname_var_;
    struct { LABEL_VAR label_var_; } abname_var_;
  } u;
};

NAME_VAR make_AAname_var(VARIABLE p0);
NAME_VAR make_ACname_var(MODIFIED_ARITH_FUNC p0);
NAME_VAR make_ABname_var(LABEL_VAR p0);

struct VARIABLE_
{
  int line_number, char_number;
  enum { is_AAvariable, is_ACvariable, is_AEvariable, is_AFvariable, is_AGvariable, is_ADvariable, is_ABvariable } kind;
  union
  {
    struct { ARITH_VAR arith_var_; } aavariable_;
    struct { BIT_VAR bit_var_; } acvariable_;
    struct { SUBBIT_HEAD subbit_head_; VARIABLE variable_; } aevariable_;
    struct { CHAR_VAR char_var_; } afvariable_;
    struct { NAME_KEY name_key_; NAME_VAR name_var_; } agvariable_;
    struct { EVENT_VAR event_var_; } advariable_;
    struct { STRUCTURE_VAR structure_var_; } abvariable_;
  } u;
};

VARIABLE make_AAvariable(ARITH_VAR p0);
VARIABLE make_ACvariable(BIT_VAR p0);
VARIABLE make_AEvariable(SUBBIT_HEAD p0, VARIABLE p1);
VARIABLE make_AFvariable(CHAR_VAR p0);
VARIABLE make_AGvariable(NAME_KEY p0, NAME_VAR p1);
VARIABLE make_ADvariable(EVENT_VAR p0);
VARIABLE make_ABvariable(STRUCTURE_VAR p0);

struct STRUCTURE_EXP_
{
  int line_number, char_number;
  enum { is_AAstructure_exp, is_ADstructure_exp, is_ACstructure_exp, is_AEstructure_exp } kind;
  union
  {
    struct { STRUCTURE_VAR structure_var_; } aastructure_exp_;
    struct { CALL_LIST call_list_; STRUCT_FUNC_HEAD struct_func_head_; } adstructure_exp_;
    struct { CLOSING closing_; STRUC_INLINE_DEF struc_inline_def_; } acstructure_exp_;
    struct { BLOCK_BODY block_body_; CLOSING closing_; STRUC_INLINE_DEF struc_inline_def_; } aestructure_exp_;
  } u;
};

STRUCTURE_EXP make_AAstructure_exp(STRUCTURE_VAR p0);
STRUCTURE_EXP make_ADstructure_exp(STRUCT_FUNC_HEAD p0, CALL_LIST p1);
STRUCTURE_EXP make_ACstructure_exp(STRUC_INLINE_DEF p0, CLOSING p1);
STRUCTURE_EXP make_AEstructure_exp(STRUC_INLINE_DEF p0, BLOCK_BODY p1, CLOSING p2);

struct STRUCT_FUNC_HEAD_
{
  int line_number, char_number;
  enum { is_AAstruct_func_head } kind;
  union
  {
    struct { STRUCT_FUNC struct_func_; } aastruct_func_head_;
  } u;
};

STRUCT_FUNC_HEAD make_AAstruct_func_head(STRUCT_FUNC p0);

struct STRUCTURE_VAR_
{
  int line_number, char_number;
  enum { is_AAstructure_var } kind;
  union
  {
    struct { QUAL_STRUCT qual_struct_; SUBSCRIPT subscript_; } aastructure_var_;
  } u;
};

STRUCTURE_VAR make_AAstructure_var(QUAL_STRUCT p0, SUBSCRIPT p1);

struct STRUCT_FUNC_
{
  int line_number, char_number;
  enum { is_ZZuserStructFunc } kind;
  union
  {
    struct { StructFunctionIdentifierToken structfunctionidentifiertoken_; } zzuserstructfunc_;
  } u;
};

STRUCT_FUNC make_ZZuserStructFunc(StructFunctionIdentifierToken p0);

struct QUAL_STRUCT_
{
  int line_number, char_number;
  enum { is_AAqual_struct, is_ABqual_struct } kind;
  union
  {
    struct { STRUCTURE_ID structure_id_; } aaqual_struct_;
    struct { QUAL_STRUCT qual_struct_; STRUCTURE_ID structure_id_; } abqual_struct_;
  } u;
};

QUAL_STRUCT make_AAqual_struct(STRUCTURE_ID p0);
QUAL_STRUCT make_ABqual_struct(QUAL_STRUCT p0, STRUCTURE_ID p1);

struct STRUCTURE_ID_
{
  int line_number, char_number;
  enum { is_FJstructure_id } kind;
  union
  {
    struct { StructIdentifierToken structidentifiertoken_; } fjstructure_id_;
  } u;
};

STRUCTURE_ID make_FJstructure_id(StructIdentifierToken p0);

struct ASSIGNMENT_
{
  int line_number, char_number;
  enum { is_AAassignment, is_ABassignment, is_ACassignment, is_ADassignment } kind;
  union
  {
    struct { EQUALS equals_; EXPRESSION expression_; VARIABLE variable_; } aaassignment_;
    struct { ASSIGNMENT assignment_; VARIABLE variable_; } abassignment_;
    struct { EQUALS equals_; EXPRESSION expression_; QUAL_STRUCT qual_struct_; } acassignment_;
    struct { ASSIGNMENT assignment_; QUAL_STRUCT qual_struct_; } adassignment_;
  } u;
};

ASSIGNMENT make_AAassignment(VARIABLE p0, EQUALS p1, EXPRESSION p2);
ASSIGNMENT make_ABassignment(VARIABLE p0, ASSIGNMENT p1);
ASSIGNMENT make_ACassignment(QUAL_STRUCT p0, EQUALS p1, EXPRESSION p2);
ASSIGNMENT make_ADassignment(QUAL_STRUCT p0, ASSIGNMENT p1);

struct EQUALS_
{
  int line_number, char_number;
  enum { is_AAequals } kind;
  union
  {
  } u;
};

EQUALS make_AAequals(void);

struct STATEMENT_
{
  int line_number, char_number;
  enum { is_AAstatement, is_ABstatement, is_AZstatement } kind;
  union
  {
    struct { BASIC_STATEMENT basic_statement_; } aastatement_;
    struct { OTHER_STATEMENT other_statement_; } abstatement_;
    struct { INLINE_DEFINITION inline_definition_; } azstatement_;
  } u;
};

STATEMENT make_AAstatement(BASIC_STATEMENT p0);
STATEMENT make_ABstatement(OTHER_STATEMENT p0);
STATEMENT make_AZstatement(INLINE_DEFINITION p0);

struct BASIC_STATEMENT_
{
  int line_number, char_number;
  enum { is_ABbasicStatementAssignment, is_AAbasic_statement, is_ACbasicStatementExit, is_ADbasicStatementExit, is_AEbasicStatementRepeat, is_AFbasicStatementRepeat, is_AGbasicStatementGoTo, is_AHbasicStatementEmpty, is_AIbasicStatementCall, is_AJbasicStatementCall, is_AKbasicStatementCall, is_ALbasicStatementCall, is_AMbasicStatementReturn, is_ANbasicStatementReturn, is_AObasicStatementDo, is_APbasicStatementReadKey, is_AQbasicStatementReadPhrase, is_ARbasicStatementWriteKey, is_ASbasicStatementWritePhrase, is_ATbasicStatementFileExp, is_AUbasicStatementFileExp, is_AVbasicStatementFileExp, is_AVbasicStatementWait, is_AWbasicStatementWait, is_AXbasicStatementWait, is_AYbasicStatementWait, is_AZbasicStatementTerminator, is_BAbasicStatementTerminator, is_BBbasicStatementUpdate, is_BCbasicStatementUpdate, is_BDbasicStatementSchedule, is_BEbasicStatementSchedule, is_BFbasicStatementSignal, is_BGbasicStatementSend, is_BHbasicStatementSend, is_BHbasicStatementOn, is_BIbasicStatementOnAndSignal, is_BJbasicStatementOff, is_BKbasicStatementOff, is_BKbasicStatementPercentMacro, is_BLbasicStatementPercentMacro } kind;
  union
  {
    struct { ASSIGNMENT assignment_; } abbasicstatementassignment_;
    struct { BASIC_STATEMENT basic_statement_; LABEL_DEFINITION label_definition_; } aabasic_statement_;
    struct { LABEL label_; } adbasicstatementexit_;
    struct { LABEL label_; } afbasicstatementrepeat_;
    struct { LABEL label_; } agbasicstatementgoto_;
    struct { CALL_KEY call_key_; } aibasicstatementcall_;
    struct { CALL_KEY call_key_; CALL_LIST call_list_; } ajbasicstatementcall_;
    struct { ASSIGN assign_; CALL_ASSIGN_LIST call_assign_list_; CALL_KEY call_key_; } akbasicstatementcall_;
    struct { ASSIGN assign_; CALL_ASSIGN_LIST call_assign_list_; CALL_KEY call_key_; CALL_LIST call_list_; } albasicstatementcall_;
    struct { EXPRESSION expression_; } anbasicstatementreturn_;
    struct { DO_GROUP_HEAD do_group_head_; ENDING ending_; } aobasicstatementdo_;
    struct { READ_KEY read_key_; } apbasicstatementreadkey_;
    struct { READ_PHRASE read_phrase_; } aqbasicstatementreadphrase_;
    struct { WRITE_KEY write_key_; } arbasicstatementwritekey_;
    struct { WRITE_PHRASE write_phrase_; } asbasicstatementwritephrase_;
    struct { EQUALS equals_; EXPRESSION expression_; FILE_EXP file_exp_; } atbasicstatementfileexp_;
    struct { EQUALS equals_; FILE_EXP file_exp_; VARIABLE variable_; } aubasicstatementfileexp_;
    struct { EQUALS equals_; FILE_EXP file_exp_; QUAL_STRUCT qual_struct_; } avbasicstatementfileexp_;
    struct { WAIT_KEY wait_key_; } avbasicstatementwait_;
    struct { ARITH_EXP arith_exp_; WAIT_KEY wait_key_; } awbasicstatementwait_;
    struct { ARITH_EXP arith_exp_; WAIT_KEY wait_key_; } axbasicstatementwait_;
    struct { BIT_EXP bit_exp_; WAIT_KEY wait_key_; } aybasicstatementwait_;
    struct { TERMINATOR terminator_; } azbasicstatementterminator_;
    struct { TERMINATE_LIST terminate_list_; TERMINATOR terminator_; } babasicstatementterminator_;
    struct { ARITH_EXP arith_exp_; } bbbasicstatementupdate_;
    struct { ARITH_EXP arith_exp_; LABEL_VAR label_var_; } bcbasicstatementupdate_;
    struct { SCHEDULE_PHRASE schedule_phrase_; } bdbasicstatementschedule_;
    struct { SCHEDULE_CONTROL schedule_control_; SCHEDULE_PHRASE schedule_phrase_; } bebasicstatementschedule_;
    struct { SIGNAL_CLAUSE signal_clause_; } bfbasicstatementsignal_;
    struct { SUBSCRIPT subscript_; } bgbasicstatementsend_;
    struct { ON_CLAUSE on_clause_; } bhbasicstatementon_;
    struct { ON_CLAUSE on_clause_; SIGNAL_CLAUSE signal_clause_; } bibasicstatementonandsignal_;
    struct { SUBSCRIPT subscript_; } bjbasicstatementoff_;
    struct { PERCENT_MACRO_NAME percent_macro_name_; } bkbasicstatementpercentmacro_;
    struct { PERCENT_MACRO_ARG percent_macro_arg_; PERCENT_MACRO_HEAD percent_macro_head_; } blbasicstatementpercentmacro_;
  } u;
};

BASIC_STATEMENT make_ABbasicStatementAssignment(ASSIGNMENT p0);
BASIC_STATEMENT make_AAbasic_statement(LABEL_DEFINITION p0, BASIC_STATEMENT p1);
BASIC_STATEMENT make_ACbasicStatementExit(void);
BASIC_STATEMENT make_ADbasicStatementExit(LABEL p0);
BASIC_STATEMENT make_AEbasicStatementRepeat(void);
BASIC_STATEMENT make_AFbasicStatementRepeat(LABEL p0);
BASIC_STATEMENT make_AGbasicStatementGoTo(LABEL p0);
BASIC_STATEMENT make_AHbasicStatementEmpty(void);
BASIC_STATEMENT make_AIbasicStatementCall(CALL_KEY p0);
BASIC_STATEMENT make_AJbasicStatementCall(CALL_KEY p0, CALL_LIST p1);
BASIC_STATEMENT make_AKbasicStatementCall(CALL_KEY p0, ASSIGN p1, CALL_ASSIGN_LIST p2);
BASIC_STATEMENT make_ALbasicStatementCall(CALL_KEY p0, CALL_LIST p1, ASSIGN p2, CALL_ASSIGN_LIST p3);
BASIC_STATEMENT make_AMbasicStatementReturn(void);
BASIC_STATEMENT make_ANbasicStatementReturn(EXPRESSION p0);
BASIC_STATEMENT make_AObasicStatementDo(DO_GROUP_HEAD p0, ENDING p1);
BASIC_STATEMENT make_APbasicStatementReadKey(READ_KEY p0);
BASIC_STATEMENT make_AQbasicStatementReadPhrase(READ_PHRASE p0);
BASIC_STATEMENT make_ARbasicStatementWriteKey(WRITE_KEY p0);
BASIC_STATEMENT make_ASbasicStatementWritePhrase(WRITE_PHRASE p0);
BASIC_STATEMENT make_ATbasicStatementFileExp(FILE_EXP p0, EQUALS p1, EXPRESSION p2);
BASIC_STATEMENT make_AUbasicStatementFileExp(VARIABLE p0, EQUALS p1, FILE_EXP p2);
BASIC_STATEMENT make_AVbasicStatementFileExp(FILE_EXP p0, EQUALS p1, QUAL_STRUCT p2);
BASIC_STATEMENT make_AVbasicStatementWait(WAIT_KEY p0);
BASIC_STATEMENT make_AWbasicStatementWait(WAIT_KEY p0, ARITH_EXP p1);
BASIC_STATEMENT make_AXbasicStatementWait(WAIT_KEY p0, ARITH_EXP p1);
BASIC_STATEMENT make_AYbasicStatementWait(WAIT_KEY p0, BIT_EXP p1);
BASIC_STATEMENT make_AZbasicStatementTerminator(TERMINATOR p0);
BASIC_STATEMENT make_BAbasicStatementTerminator(TERMINATOR p0, TERMINATE_LIST p1);
BASIC_STATEMENT make_BBbasicStatementUpdate(ARITH_EXP p0);
BASIC_STATEMENT make_BCbasicStatementUpdate(LABEL_VAR p0, ARITH_EXP p1);
BASIC_STATEMENT make_BDbasicStatementSchedule(SCHEDULE_PHRASE p0);
BASIC_STATEMENT make_BEbasicStatementSchedule(SCHEDULE_PHRASE p0, SCHEDULE_CONTROL p1);
BASIC_STATEMENT make_BFbasicStatementSignal(SIGNAL_CLAUSE p0);
BASIC_STATEMENT make_BGbasicStatementSend(SUBSCRIPT p0);
BASIC_STATEMENT make_BHbasicStatementSend(void);
BASIC_STATEMENT make_BHbasicStatementOn(ON_CLAUSE p0);
BASIC_STATEMENT make_BIbasicStatementOnAndSignal(ON_CLAUSE p0, SIGNAL_CLAUSE p1);
BASIC_STATEMENT make_BJbasicStatementOff(SUBSCRIPT p0);
BASIC_STATEMENT make_BKbasicStatementOff(void);
BASIC_STATEMENT make_BKbasicStatementPercentMacro(PERCENT_MACRO_NAME p0);
BASIC_STATEMENT make_BLbasicStatementPercentMacro(PERCENT_MACRO_HEAD p0, PERCENT_MACRO_ARG p1);

struct OTHER_STATEMENT_
{
  int line_number, char_number;
  enum { is_ABotherStatementIf, is_AAotherStatementOn, is_ACother_statement } kind;
  union
  {
    struct { IF_STATEMENT if_statement_; } abotherstatementif_;
    struct { ON_PHRASE on_phrase_; STATEMENT statement_; } aaotherstatementon_;
    struct { LABEL_DEFINITION label_definition_; OTHER_STATEMENT other_statement_; } acother_statement_;
  } u;
};

OTHER_STATEMENT make_ABotherStatementIf(IF_STATEMENT p0);
OTHER_STATEMENT make_AAotherStatementOn(ON_PHRASE p0, STATEMENT p1);
OTHER_STATEMENT make_ACother_statement(LABEL_DEFINITION p0, OTHER_STATEMENT p1);

struct IF_STATEMENT_
{
  int line_number, char_number;
  enum { is_AAifStatement, is_ABifThenElseStatement } kind;
  union
  {
    struct { IF_CLAUSE if_clause_; STATEMENT statement_; } aaifstatement_;
    struct { STATEMENT statement_; TRUE_PART true_part_; } abifthenelsestatement_;
  } u;
};

IF_STATEMENT make_AAifStatement(IF_CLAUSE p0, STATEMENT p1);
IF_STATEMENT make_ABifThenElseStatement(TRUE_PART p0, STATEMENT p1);

struct IF_CLAUSE_
{
  int line_number, char_number;
  enum { is_AAifClauseRelationalExp, is_ABifClauseBitExp } kind;
  union
  {
    struct { IF if_; RELATIONAL_EXP relational_exp_; THEN then_; } aaifclauserelationalexp_;
    struct { BIT_EXP bit_exp_; IF if_; THEN then_; } abifclausebitexp_;
  } u;
};

IF_CLAUSE make_AAifClauseRelationalExp(IF p0, RELATIONAL_EXP p1, THEN p2);
IF_CLAUSE make_ABifClauseBitExp(IF p0, BIT_EXP p1, THEN p2);

struct TRUE_PART_
{
  int line_number, char_number;
  enum { is_AAtrue_part } kind;
  union
  {
    struct { BASIC_STATEMENT basic_statement_; IF_CLAUSE if_clause_; } aatrue_part_;
  } u;
};

TRUE_PART make_AAtrue_part(IF_CLAUSE p0, BASIC_STATEMENT p1);

struct IF_
{
  int line_number, char_number;
  enum { is_AAif } kind;
  union
  {
  } u;
};

IF make_AAif(void);

struct THEN_
{
  int line_number, char_number;
  enum { is_AAthen } kind;
  union
  {
  } u;
};

THEN make_AAthen(void);

struct RELATIONAL_EXP_
{
  int line_number, char_number;
  enum { is_AArelational_exp, is_ABrelational_expOR } kind;
  union
  {
    struct { RELATIONAL_FACTOR relational_factor_; } aarelational_exp_;
    struct { OR or_; RELATIONAL_EXP relational_exp_; RELATIONAL_FACTOR relational_factor_; } abrelational_expor_;
  } u;
};

RELATIONAL_EXP make_AArelational_exp(RELATIONAL_FACTOR p0);
RELATIONAL_EXP make_ABrelational_expOR(RELATIONAL_EXP p0, OR p1, RELATIONAL_FACTOR p2);

struct RELATIONAL_FACTOR_
{
  int line_number, char_number;
  enum { is_AArelational_factor, is_ABrelational_factorAND } kind;
  union
  {
    struct { REL_PRIM rel_prim_; } aarelational_factor_;
    struct { AND and_; RELATIONAL_FACTOR relational_factor_; REL_PRIM rel_prim_; } abrelational_factorand_;
  } u;
};

RELATIONAL_FACTOR make_AArelational_factor(REL_PRIM p0);
RELATIONAL_FACTOR make_ABrelational_factorAND(RELATIONAL_FACTOR p0, AND p1, REL_PRIM p2);

struct REL_PRIM_
{
  int line_number, char_number;
  enum { is_AArel_prim, is_ABrel_prim, is_ACrel_prim } kind;
  union
  {
    struct { RELATIONAL_EXP relational_exp_; } aarel_prim_;
    struct { NOT not_; RELATIONAL_EXP relational_exp_; } abrel_prim_;
    struct { COMPARISON comparison_; } acrel_prim_;
  } u;
};

REL_PRIM make_AArel_prim(RELATIONAL_EXP p0);
REL_PRIM make_ABrel_prim(NOT p0, RELATIONAL_EXP p1);
REL_PRIM make_ACrel_prim(COMPARISON p0);

struct COMPARISON_
{
  int line_number, char_number;
  enum { is_AAcomparisonEQ, is_ABcomparisonEQ, is_ACcomparisonEQ, is_ADcomparisonEQ, is_AEcomparisonEQ, is_AAcomparisonNEQ, is_ABcomparisonNEQ, is_ACcomparisonNEQ, is_ADcomparisonNEQ, is_AEcomparisonNEQ, is_AAcomparisonLT, is_ABcomparisonLT, is_ACcomparisonLT, is_ADcomparisonLT, is_AEcomparisonLT, is_AAcomparisonGT, is_ABcomparisonGT, is_ACcomparisonGT, is_ADcomparisonGT, is_AEcomparisonGT, is_AAcomparisonLE, is_ABcomparisonLE, is_ACcomparisonLE, is_ADcomparisonLE, is_AEcomparisonLE, is_AAcomparisonGE, is_ABcomparisonGE, is_ACcomparisonGE, is_ADcomparisonGE, is_AEcomparisonGE } kind;
  union
  {
    struct { ARITH_EXP arith_exp_1, arith_exp_2; EQUALS equals_; } aacomparisoneq_;
    struct { CHAR_EXP char_exp_1, char_exp_2; EQUALS equals_; } abcomparisoneq_;
    struct { BIT_CAT bit_cat_1, bit_cat_2; EQUALS equals_; } accomparisoneq_;
    struct { EQUALS equals_; STRUCTURE_EXP structure_exp_1, structure_exp_2; } adcomparisoneq_;
    struct { EQUALS equals_; NAME_EXP name_exp_1, name_exp_2; } aecomparisoneq_;
    struct { ARITH_EXP arith_exp_1, arith_exp_2; NeqToken neqtoken_; } aacomparisonneq_;
    struct { CHAR_EXP char_exp_1, char_exp_2; NeqToken neqtoken_; } abcomparisonneq_;
    struct { BIT_CAT bit_cat_1, bit_cat_2; NeqToken neqtoken_; } accomparisonneq_;
    struct { NeqToken neqtoken_; STRUCTURE_EXP structure_exp_1, structure_exp_2; } adcomparisonneq_;
    struct { NAME_EXP name_exp_1, name_exp_2; NeqToken neqtoken_; } aecomparisonneq_;
    struct { ARITH_EXP arith_exp_1, arith_exp_2; } aacomparisonlt_;
    struct { CHAR_EXP char_exp_1, char_exp_2; } abcomparisonlt_;
    struct { BIT_CAT bit_cat_1, bit_cat_2; } accomparisonlt_;
    struct { STRUCTURE_EXP structure_exp_1, structure_exp_2; } adcomparisonlt_;
    struct { NAME_EXP name_exp_1, name_exp_2; } aecomparisonlt_;
    struct { ARITH_EXP arith_exp_1, arith_exp_2; } aacomparisongt_;
    struct { CHAR_EXP char_exp_1, char_exp_2; } abcomparisongt_;
    struct { BIT_CAT bit_cat_1, bit_cat_2; } accomparisongt_;
    struct { STRUCTURE_EXP structure_exp_1, structure_exp_2; } adcomparisongt_;
    struct { NAME_EXP name_exp_1, name_exp_2; } aecomparisongt_;
    struct { ARITH_EXP arith_exp_1, arith_exp_2; LeToken letoken_; } aacomparisonle_;
    struct { CHAR_EXP char_exp_1, char_exp_2; LeToken letoken_; } abcomparisonle_;
    struct { BIT_CAT bit_cat_1, bit_cat_2; LeToken letoken_; } accomparisonle_;
    struct { LeToken letoken_; STRUCTURE_EXP structure_exp_1, structure_exp_2; } adcomparisonle_;
    struct { LeToken letoken_; NAME_EXP name_exp_1, name_exp_2; } aecomparisonle_;
    struct { ARITH_EXP arith_exp_1, arith_exp_2; GeToken getoken_; } aacomparisonge_;
    struct { CHAR_EXP char_exp_1, char_exp_2; GeToken getoken_; } abcomparisonge_;
    struct { BIT_CAT bit_cat_1, bit_cat_2; GeToken getoken_; } accomparisonge_;
    struct { GeToken getoken_; STRUCTURE_EXP structure_exp_1, structure_exp_2; } adcomparisonge_;
    struct { GeToken getoken_; NAME_EXP name_exp_1, name_exp_2; } aecomparisonge_;
  } u;
};

COMPARISON make_AAcomparisonEQ(ARITH_EXP p0, EQUALS p1, ARITH_EXP p2);
COMPARISON make_ABcomparisonEQ(CHAR_EXP p0, EQUALS p1, CHAR_EXP p2);
COMPARISON make_ACcomparisonEQ(BIT_CAT p0, EQUALS p1, BIT_CAT p2);
COMPARISON make_ADcomparisonEQ(STRUCTURE_EXP p0, EQUALS p1, STRUCTURE_EXP p2);
COMPARISON make_AEcomparisonEQ(NAME_EXP p0, EQUALS p1, NAME_EXP p2);
COMPARISON make_AAcomparisonNEQ(ARITH_EXP p0, NeqToken p1, ARITH_EXP p2);
COMPARISON make_ABcomparisonNEQ(CHAR_EXP p0, NeqToken p1, CHAR_EXP p2);
COMPARISON make_ACcomparisonNEQ(BIT_CAT p0, NeqToken p1, BIT_CAT p2);
COMPARISON make_ADcomparisonNEQ(STRUCTURE_EXP p0, NeqToken p1, STRUCTURE_EXP p2);
COMPARISON make_AEcomparisonNEQ(NAME_EXP p0, NeqToken p1, NAME_EXP p2);
COMPARISON make_AAcomparisonLT(ARITH_EXP p0, ARITH_EXP p1);
COMPARISON make_ABcomparisonLT(CHAR_EXP p0, CHAR_EXP p1);
COMPARISON make_ACcomparisonLT(BIT_CAT p0, BIT_CAT p1);
COMPARISON make_ADcomparisonLT(STRUCTURE_EXP p0, STRUCTURE_EXP p1);
COMPARISON make_AEcomparisonLT(NAME_EXP p0, NAME_EXP p1);
COMPARISON make_AAcomparisonGT(ARITH_EXP p0, ARITH_EXP p1);
COMPARISON make_ABcomparisonGT(CHAR_EXP p0, CHAR_EXP p1);
COMPARISON make_ACcomparisonGT(BIT_CAT p0, BIT_CAT p1);
COMPARISON make_ADcomparisonGT(STRUCTURE_EXP p0, STRUCTURE_EXP p1);
COMPARISON make_AEcomparisonGT(NAME_EXP p0, NAME_EXP p1);
COMPARISON make_AAcomparisonLE(ARITH_EXP p0, LeToken p1, ARITH_EXP p2);
COMPARISON make_ABcomparisonLE(CHAR_EXP p0, LeToken p1, CHAR_EXP p2);
COMPARISON make_ACcomparisonLE(BIT_CAT p0, LeToken p1, BIT_CAT p2);
COMPARISON make_ADcomparisonLE(STRUCTURE_EXP p0, LeToken p1, STRUCTURE_EXP p2);
COMPARISON make_AEcomparisonLE(NAME_EXP p0, LeToken p1, NAME_EXP p2);
COMPARISON make_AAcomparisonGE(ARITH_EXP p0, GeToken p1, ARITH_EXP p2);
COMPARISON make_ABcomparisonGE(CHAR_EXP p0, GeToken p1, CHAR_EXP p2);
COMPARISON make_ACcomparisonGE(BIT_CAT p0, GeToken p1, BIT_CAT p2);
COMPARISON make_ADcomparisonGE(STRUCTURE_EXP p0, GeToken p1, STRUCTURE_EXP p2);
COMPARISON make_AEcomparisonGE(NAME_EXP p0, GeToken p1, NAME_EXP p2);

struct ANY_STATEMENT_
{
  int line_number, char_number;
  enum { is_AAany_statement, is_ABany_statement } kind;
  union
  {
    struct { STATEMENT statement_; } aaany_statement_;
    struct { BLOCK_DEFINITION block_definition_; } abany_statement_;
  } u;
};

ANY_STATEMENT make_AAany_statement(STATEMENT p0);
ANY_STATEMENT make_ABany_statement(BLOCK_DEFINITION p0);

struct ON_PHRASE_
{
  int line_number, char_number;
  enum { is_AAon_phrase, is_ACon_phrase } kind;
  union
  {
    struct { SUBSCRIPT subscript_; } aaon_phrase_;
  } u;
};

ON_PHRASE make_AAon_phrase(SUBSCRIPT p0);
ON_PHRASE make_ACon_phrase(void);

struct ON_CLAUSE_
{
  int line_number, char_number;
  enum { is_AAon_clause, is_ABon_clause, is_ADon_clause, is_AEon_clause } kind;
  union
  {
    struct { SUBSCRIPT subscript_; } aaon_clause_;
    struct { SUBSCRIPT subscript_; } abon_clause_;
  } u;
};

ON_CLAUSE make_AAon_clause(SUBSCRIPT p0);
ON_CLAUSE make_ABon_clause(SUBSCRIPT p0);
ON_CLAUSE make_ADon_clause(void);
ON_CLAUSE make_AEon_clause(void);

struct LABEL_DEFINITION_
{
  int line_number, char_number;
  enum { is_AAlabel_definition } kind;
  union
  {
    struct { LABEL label_; } aalabel_definition_;
  } u;
};

LABEL_DEFINITION make_AAlabel_definition(LABEL p0);

struct CALL_KEY_
{
  int line_number, char_number;
  enum { is_AAcall_key } kind;
  union
  {
    struct { LABEL_VAR label_var_; } aacall_key_;
  } u;
};

CALL_KEY make_AAcall_key(LABEL_VAR p0);

struct ASSIGN_
{
  int line_number, char_number;
  enum { is_AAassign } kind;
  union
  {
  } u;
};

ASSIGN make_AAassign(void);

struct CALL_ASSIGN_LIST_
{
  int line_number, char_number;
  enum { is_AAcall_assign_list, is_ABcall_assign_list, is_ACcall_assign_list, is_ADcall_assign_list } kind;
  union
  {
    struct { VARIABLE variable_; } aacall_assign_list_;
    struct { CALL_ASSIGN_LIST call_assign_list_; VARIABLE variable_; } abcall_assign_list_;
    struct { QUAL_STRUCT qual_struct_; } accall_assign_list_;
    struct { CALL_ASSIGN_LIST call_assign_list_; QUAL_STRUCT qual_struct_; } adcall_assign_list_;
  } u;
};

CALL_ASSIGN_LIST make_AAcall_assign_list(VARIABLE p0);
CALL_ASSIGN_LIST make_ABcall_assign_list(CALL_ASSIGN_LIST p0, VARIABLE p1);
CALL_ASSIGN_LIST make_ACcall_assign_list(QUAL_STRUCT p0);
CALL_ASSIGN_LIST make_ADcall_assign_list(CALL_ASSIGN_LIST p0, QUAL_STRUCT p1);

struct DO_GROUP_HEAD_
{
  int line_number, char_number;
  enum { is_AAdoGroupHead, is_ABdoGroupHeadFor, is_ACdoGroupHeadForWhile, is_ADdoGroupHeadWhile, is_AEdoGroupHeadCase, is_AFdoGroupHeadCaseElse, is_AGdoGroupHeadStatement, is_AHdoGroupHeadTemporaryStatement } kind;
  union
  {
    struct { FOR_LIST for_list_; } abdogroupheadfor_;
    struct { FOR_LIST for_list_; WHILE_CLAUSE while_clause_; } acdogroupheadforwhile_;
    struct { WHILE_CLAUSE while_clause_; } addogroupheadwhile_;
    struct { ARITH_EXP arith_exp_; } aedogroupheadcase_;
    struct { CASE_ELSE case_else_; STATEMENT statement_; } afdogroupheadcaseelse_;
    struct { ANY_STATEMENT any_statement_; DO_GROUP_HEAD do_group_head_; } agdogroupheadstatement_;
    struct { DO_GROUP_HEAD do_group_head_; TEMPORARY_STMT temporary_stmt_; } ahdogroupheadtemporarystatement_;
  } u;
};

DO_GROUP_HEAD make_AAdoGroupHead(void);
DO_GROUP_HEAD make_ABdoGroupHeadFor(FOR_LIST p0);
DO_GROUP_HEAD make_ACdoGroupHeadForWhile(FOR_LIST p0, WHILE_CLAUSE p1);
DO_GROUP_HEAD make_ADdoGroupHeadWhile(WHILE_CLAUSE p0);
DO_GROUP_HEAD make_AEdoGroupHeadCase(ARITH_EXP p0);
DO_GROUP_HEAD make_AFdoGroupHeadCaseElse(CASE_ELSE p0, STATEMENT p1);
DO_GROUP_HEAD make_AGdoGroupHeadStatement(DO_GROUP_HEAD p0, ANY_STATEMENT p1);
DO_GROUP_HEAD make_AHdoGroupHeadTemporaryStatement(DO_GROUP_HEAD p0, TEMPORARY_STMT p1);

struct ENDING_
{
  int line_number, char_number;
  enum { is_AAending, is_ABending, is_ACending } kind;
  union
  {
    struct { LABEL label_; } abending_;
    struct { ENDING ending_; LABEL_DEFINITION label_definition_; } acending_;
  } u;
};

ENDING make_AAending(void);
ENDING make_ABending(LABEL p0);
ENDING make_ACending(LABEL_DEFINITION p0, ENDING p1);

struct READ_KEY_
{
  int line_number, char_number;
  enum { is_AAread_key, is_ABread_key } kind;
  union
  {
    struct { NUMBER number_; } aaread_key_;
    struct { NUMBER number_; } abread_key_;
  } u;
};

READ_KEY make_AAread_key(NUMBER p0);
READ_KEY make_ABread_key(NUMBER p0);

struct WRITE_KEY_
{
  int line_number, char_number;
  enum { is_AAwrite_key } kind;
  union
  {
    struct { NUMBER number_; } aawrite_key_;
  } u;
};

WRITE_KEY make_AAwrite_key(NUMBER p0);

struct READ_PHRASE_
{
  int line_number, char_number;
  enum { is_AAread_phrase, is_ABread_phrase } kind;
  union
  {
    struct { READ_ARG read_arg_; READ_KEY read_key_; } aaread_phrase_;
    struct { READ_ARG read_arg_; READ_PHRASE read_phrase_; } abread_phrase_;
  } u;
};

READ_PHRASE make_AAread_phrase(READ_KEY p0, READ_ARG p1);
READ_PHRASE make_ABread_phrase(READ_PHRASE p0, READ_ARG p1);

struct WRITE_PHRASE_
{
  int line_number, char_number;
  enum { is_AAwrite_phrase, is_ABwrite_phrase } kind;
  union
  {
    struct { WRITE_ARG write_arg_; WRITE_KEY write_key_; } aawrite_phrase_;
    struct { WRITE_ARG write_arg_; WRITE_PHRASE write_phrase_; } abwrite_phrase_;
  } u;
};

WRITE_PHRASE make_AAwrite_phrase(WRITE_KEY p0, WRITE_ARG p1);
WRITE_PHRASE make_ABwrite_phrase(WRITE_PHRASE p0, WRITE_ARG p1);

struct READ_ARG_
{
  int line_number, char_number;
  enum { is_AAread_arg, is_ABread_arg } kind;
  union
  {
    struct { VARIABLE variable_; } aaread_arg_;
    struct { IO_CONTROL io_control_; } abread_arg_;
  } u;
};

READ_ARG make_AAread_arg(VARIABLE p0);
READ_ARG make_ABread_arg(IO_CONTROL p0);

struct WRITE_ARG_
{
  int line_number, char_number;
  enum { is_AAwrite_arg, is_ABwrite_arg, is_ACwrite_arg } kind;
  union
  {
    struct { EXPRESSION expression_; } aawrite_arg_;
    struct { IO_CONTROL io_control_; } abwrite_arg_;
    struct { StructIdentifierToken structidentifiertoken_; } acwrite_arg_;
  } u;
};

WRITE_ARG make_AAwrite_arg(EXPRESSION p0);
WRITE_ARG make_ABwrite_arg(IO_CONTROL p0);
WRITE_ARG make_ACwrite_arg(StructIdentifierToken p0);

struct FILE_EXP_
{
  int line_number, char_number;
  enum { is_AAfile_exp } kind;
  union
  {
    struct { ARITH_EXP arith_exp_; FILE_HEAD file_head_; } aafile_exp_;
  } u;
};

FILE_EXP make_AAfile_exp(FILE_HEAD p0, ARITH_EXP p1);

struct FILE_HEAD_
{
  int line_number, char_number;
  enum { is_AAfile_head } kind;
  union
  {
    struct { NUMBER number_; } aafile_head_;
  } u;
};

FILE_HEAD make_AAfile_head(NUMBER p0);

struct IO_CONTROL_
{
  int line_number, char_number;
  enum { is_AAioControlSkip, is_ABioControlTab, is_ACioControlColumn, is_ADioControlLine, is_AEioControlPage } kind;
  union
  {
    struct { ARITH_EXP arith_exp_; } aaiocontrolskip_;
    struct { ARITH_EXP arith_exp_; } abiocontroltab_;
    struct { ARITH_EXP arith_exp_; } aciocontrolcolumn_;
    struct { ARITH_EXP arith_exp_; } adiocontrolline_;
    struct { ARITH_EXP arith_exp_; } aeiocontrolpage_;
  } u;
};

IO_CONTROL make_AAioControlSkip(ARITH_EXP p0);
IO_CONTROL make_ABioControlTab(ARITH_EXP p0);
IO_CONTROL make_ACioControlColumn(ARITH_EXP p0);
IO_CONTROL make_ADioControlLine(ARITH_EXP p0);
IO_CONTROL make_AEioControlPage(ARITH_EXP p0);

struct WAIT_KEY_
{
  int line_number, char_number;
  enum { is_AAwait_key } kind;
  union
  {
  } u;
};

WAIT_KEY make_AAwait_key(void);

struct TERMINATOR_
{
  int line_number, char_number;
  enum { is_AAterminatorTerminate, is_ABterminatorCancel } kind;
  union
  {
  } u;
};

TERMINATOR make_AAterminatorTerminate(void);
TERMINATOR make_ABterminatorCancel(void);

struct TERMINATE_LIST_
{
  int line_number, char_number;
  enum { is_AAterminate_list, is_ABterminate_list } kind;
  union
  {
    struct { LABEL_VAR label_var_; } aaterminate_list_;
    struct { LABEL_VAR label_var_; TERMINATE_LIST terminate_list_; } abterminate_list_;
  } u;
};

TERMINATE_LIST make_AAterminate_list(LABEL_VAR p0);
TERMINATE_LIST make_ABterminate_list(TERMINATE_LIST p0, LABEL_VAR p1);

struct SCHEDULE_HEAD_
{
  int line_number, char_number;
  enum { is_AAscheduleHeadLabel, is_ABscheduleHeadAt, is_ACscheduleHeadIn, is_ADscheduleHeadOn } kind;
  union
  {
    struct { LABEL_VAR label_var_; } aascheduleheadlabel_;
    struct { ARITH_EXP arith_exp_; SCHEDULE_HEAD schedule_head_; } abscheduleheadat_;
    struct { ARITH_EXP arith_exp_; SCHEDULE_HEAD schedule_head_; } acscheduleheadin_;
    struct { BIT_EXP bit_exp_; SCHEDULE_HEAD schedule_head_; } adscheduleheadon_;
  } u;
};

SCHEDULE_HEAD make_AAscheduleHeadLabel(LABEL_VAR p0);
SCHEDULE_HEAD make_ABscheduleHeadAt(SCHEDULE_HEAD p0, ARITH_EXP p1);
SCHEDULE_HEAD make_ACscheduleHeadIn(SCHEDULE_HEAD p0, ARITH_EXP p1);
SCHEDULE_HEAD make_ADscheduleHeadOn(SCHEDULE_HEAD p0, BIT_EXP p1);

struct SCHEDULE_PHRASE_
{
  int line_number, char_number;
  enum { is_AAschedule_phrase, is_ABschedule_phrase, is_ACschedule_phrase } kind;
  union
  {
    struct { SCHEDULE_HEAD schedule_head_; } aaschedule_phrase_;
    struct { ARITH_EXP arith_exp_; SCHEDULE_HEAD schedule_head_; } abschedule_phrase_;
    struct { SCHEDULE_PHRASE schedule_phrase_; } acschedule_phrase_;
  } u;
};

SCHEDULE_PHRASE make_AAschedule_phrase(SCHEDULE_HEAD p0);
SCHEDULE_PHRASE make_ABschedule_phrase(SCHEDULE_HEAD p0, ARITH_EXP p1);
SCHEDULE_PHRASE make_ACschedule_phrase(SCHEDULE_PHRASE p0);

struct SCHEDULE_CONTROL_
{
  int line_number, char_number;
  enum { is_AAschedule_control, is_ABschedule_control, is_ACschedule_control } kind;
  union
  {
    struct { STOPPING stopping_; } aaschedule_control_;
    struct { TIMING timing_; } abschedule_control_;
    struct { STOPPING stopping_; TIMING timing_; } acschedule_control_;
  } u;
};

SCHEDULE_CONTROL make_AAschedule_control(STOPPING p0);
SCHEDULE_CONTROL make_ABschedule_control(TIMING p0);
SCHEDULE_CONTROL make_ACschedule_control(TIMING p0, STOPPING p1);

struct TIMING_
{
  int line_number, char_number;
  enum { is_AAtimingEvery, is_ABtimingAfter, is_ACtiming } kind;
  union
  {
    struct { ARITH_EXP arith_exp_; REPEAT repeat_; } aatimingevery_;
    struct { ARITH_EXP arith_exp_; REPEAT repeat_; } abtimingafter_;
    struct { REPEAT repeat_; } actiming_;
  } u;
};

TIMING make_AAtimingEvery(REPEAT p0, ARITH_EXP p1);
TIMING make_ABtimingAfter(REPEAT p0, ARITH_EXP p1);
TIMING make_ACtiming(REPEAT p0);

struct REPEAT_
{
  int line_number, char_number;
  enum { is_AArepeat } kind;
  union
  {
  } u;
};

REPEAT make_AArepeat(void);

struct STOPPING_
{
  int line_number, char_number;
  enum { is_AAstopping, is_ABstopping } kind;
  union
  {
    struct { ARITH_EXP arith_exp_; WHILE_KEY while_key_; } aastopping_;
    struct { BIT_EXP bit_exp_; WHILE_KEY while_key_; } abstopping_;
  } u;
};

STOPPING make_AAstopping(WHILE_KEY p0, ARITH_EXP p1);
STOPPING make_ABstopping(WHILE_KEY p0, BIT_EXP p1);

struct SIGNAL_CLAUSE_
{
  int line_number, char_number;
  enum { is_AAsignal_clause, is_ABsignal_clause, is_ACsignal_clause } kind;
  union
  {
    struct { EVENT_VAR event_var_; } aasignal_clause_;
    struct { EVENT_VAR event_var_; } absignal_clause_;
    struct { EVENT_VAR event_var_; } acsignal_clause_;
  } u;
};

SIGNAL_CLAUSE make_AAsignal_clause(EVENT_VAR p0);
SIGNAL_CLAUSE make_ABsignal_clause(EVENT_VAR p0);
SIGNAL_CLAUSE make_ACsignal_clause(EVENT_VAR p0);

struct PERCENT_MACRO_NAME_
{
  int line_number, char_number;
  enum { is_FNpercent_macro_name } kind;
  union
  {
    struct { IDENTIFIER identifier_; } fnpercent_macro_name_;
  } u;
};

PERCENT_MACRO_NAME make_FNpercent_macro_name(IDENTIFIER p0);

struct PERCENT_MACRO_HEAD_
{
  int line_number, char_number;
  enum { is_AApercent_macro_head, is_ABpercent_macro_head } kind;
  union
  {
    struct { PERCENT_MACRO_NAME percent_macro_name_; } aapercent_macro_head_;
    struct { PERCENT_MACRO_ARG percent_macro_arg_; PERCENT_MACRO_HEAD percent_macro_head_; } abpercent_macro_head_;
  } u;
};

PERCENT_MACRO_HEAD make_AApercent_macro_head(PERCENT_MACRO_NAME p0);
PERCENT_MACRO_HEAD make_ABpercent_macro_head(PERCENT_MACRO_HEAD p0, PERCENT_MACRO_ARG p1);

struct PERCENT_MACRO_ARG_
{
  int line_number, char_number;
  enum { is_AApercent_macro_arg, is_ABpercent_macro_arg } kind;
  union
  {
    struct { NAME_VAR name_var_; } aapercent_macro_arg_;
    struct { CONSTANT constant_; } abpercent_macro_arg_;
  } u;
};

PERCENT_MACRO_ARG make_AApercent_macro_arg(NAME_VAR p0);
PERCENT_MACRO_ARG make_ABpercent_macro_arg(CONSTANT p0);

struct CASE_ELSE_
{
  int line_number, char_number;
  enum { is_AAcase_else } kind;
  union
  {
    struct { ARITH_EXP arith_exp_; } aacase_else_;
  } u;
};

CASE_ELSE make_AAcase_else(ARITH_EXP p0);

struct WHILE_KEY_
{
  int line_number, char_number;
  enum { is_AAwhileKeyWhile, is_ABwhileKeyUntil } kind;
  union
  {
  } u;
};

WHILE_KEY make_AAwhileKeyWhile(void);
WHILE_KEY make_ABwhileKeyUntil(void);

struct WHILE_CLAUSE_
{
  int line_number, char_number;
  enum { is_AAwhile_clause, is_ABwhile_clause } kind;
  union
  {
    struct { BIT_EXP bit_exp_; WHILE_KEY while_key_; } aawhile_clause_;
    struct { RELATIONAL_EXP relational_exp_; WHILE_KEY while_key_; } abwhile_clause_;
  } u;
};

WHILE_CLAUSE make_AAwhile_clause(WHILE_KEY p0, BIT_EXP p1);
WHILE_CLAUSE make_ABwhile_clause(WHILE_KEY p0, RELATIONAL_EXP p1);

struct FOR_LIST_
{
  int line_number, char_number;
  enum { is_AAfor_list, is_ABfor_listDiscrete } kind;
  union
  {
    struct { ARITH_EXP arith_exp_; FOR_KEY for_key_; ITERATION_CONTROL iteration_control_; } aafor_list_;
    struct { FOR_KEY for_key_; ITERATION_BODY iteration_body_; } abfor_listdiscrete_;
  } u;
};

FOR_LIST make_AAfor_list(FOR_KEY p0, ARITH_EXP p1, ITERATION_CONTROL p2);
FOR_LIST make_ABfor_listDiscrete(FOR_KEY p0, ITERATION_BODY p1);

struct ITERATION_BODY_
{
  int line_number, char_number;
  enum { is_AAiteration_body, is_ABiteration_body } kind;
  union
  {
    struct { ARITH_EXP arith_exp_; } aaiteration_body_;
    struct { ARITH_EXP arith_exp_; ITERATION_BODY iteration_body_; } abiteration_body_;
  } u;
};

ITERATION_BODY make_AAiteration_body(ARITH_EXP p0);
ITERATION_BODY make_ABiteration_body(ITERATION_BODY p0, ARITH_EXP p1);

struct ITERATION_CONTROL_
{
  int line_number, char_number;
  enum { is_AAiteration_controlTo, is_ABiteration_controlToBy } kind;
  union
  {
    struct { ARITH_EXP arith_exp_; } aaiteration_controlto_;
    struct { ARITH_EXP arith_exp_1, arith_exp_2; } abiteration_controltoby_;
  } u;
};

ITERATION_CONTROL make_AAiteration_controlTo(ARITH_EXP p0);
ITERATION_CONTROL make_ABiteration_controlToBy(ARITH_EXP p0, ARITH_EXP p1);

struct FOR_KEY_
{
  int line_number, char_number;
  enum { is_AAforKey, is_ABforKeyTemporary } kind;
  union
  {
    struct { ARITH_VAR arith_var_; EQUALS equals_; } aaforkey_;
    struct { IDENTIFIER identifier_; } abforkeytemporary_;
  } u;
};

FOR_KEY make_AAforKey(ARITH_VAR p0, EQUALS p1);
FOR_KEY make_ABforKeyTemporary(IDENTIFIER p0);

struct TEMPORARY_STMT_
{
  int line_number, char_number;
  enum { is_AAtemporary_stmt } kind;
  union
  {
    struct { DECLARE_BODY declare_body_; } aatemporary_stmt_;
  } u;
};

TEMPORARY_STMT make_AAtemporary_stmt(DECLARE_BODY p0);

struct CONSTANT_
{
  int line_number, char_number;
  enum { is_AAconstant, is_ABconstant, is_ACconstant, is_ADconstant } kind;
  union
  {
    struct { NUMBER number_; } aaconstant_;
    struct { COMPOUND_NUMBER compound_number_; } abconstant_;
    struct { BIT_CONST bit_const_; } acconstant_;
    struct { CHAR_CONST char_const_; } adconstant_;
  } u;
};

CONSTANT make_AAconstant(NUMBER p0);
CONSTANT make_ABconstant(COMPOUND_NUMBER p0);
CONSTANT make_ACconstant(BIT_CONST p0);
CONSTANT make_ADconstant(CHAR_CONST p0);

struct ARRAY_HEAD_
{
  int line_number, char_number;
  enum { is_AAarray_head, is_ABarray_head } kind;
  union
  {
    struct { ARRAY_HEAD array_head_; LITERAL_EXP_OR_STAR literal_exp_or_star_; } abarray_head_;
  } u;
};

ARRAY_HEAD make_AAarray_head(void);
ARRAY_HEAD make_ABarray_head(ARRAY_HEAD p0, LITERAL_EXP_OR_STAR p1);

struct MINOR_ATTR_LIST_
{
  int line_number, char_number;
  enum { is_AAminor_attr_list, is_ABminor_attr_list } kind;
  union
  {
    struct { MINOR_ATTRIBUTE minor_attribute_; } aaminor_attr_list_;
    struct { MINOR_ATTRIBUTE minor_attribute_; MINOR_ATTR_LIST minor_attr_list_; } abminor_attr_list_;
  } u;
};

MINOR_ATTR_LIST make_AAminor_attr_list(MINOR_ATTRIBUTE p0);
MINOR_ATTR_LIST make_ABminor_attr_list(MINOR_ATTR_LIST p0, MINOR_ATTRIBUTE p1);

struct MINOR_ATTRIBUTE_
{
  int line_number, char_number;
  enum { is_AAminorAttributeStatic, is_ABminorAttributeAutomatic, is_ACminorAttributeDense, is_ADminorAttributeAligned, is_AEminorAttributeAccess, is_AFminorAttributeLock, is_AGminorAttributeRemote, is_AHminorAttributeRigid, is_AIminorAttributeRepeatedConstant, is_AJminorAttributeStar, is_AKminorAttributeLatched, is_ALminorAttributeNonHal } kind;
  union
  {
    struct { LITERAL_EXP_OR_STAR literal_exp_or_star_; } afminorattributelock_;
    struct { INIT_OR_CONST_HEAD init_or_const_head_; REPEATED_CONSTANT repeated_constant_; } aiminorattributerepeatedconstant_;
    struct { INIT_OR_CONST_HEAD init_or_const_head_; } ajminorattributestar_;
    struct { LEVEL level_; } alminorattributenonhal_;
  } u;
};

MINOR_ATTRIBUTE make_AAminorAttributeStatic(void);
MINOR_ATTRIBUTE make_ABminorAttributeAutomatic(void);
MINOR_ATTRIBUTE make_ACminorAttributeDense(void);
MINOR_ATTRIBUTE make_ADminorAttributeAligned(void);
MINOR_ATTRIBUTE make_AEminorAttributeAccess(void);
MINOR_ATTRIBUTE make_AFminorAttributeLock(LITERAL_EXP_OR_STAR p0);
MINOR_ATTRIBUTE make_AGminorAttributeRemote(void);
MINOR_ATTRIBUTE make_AHminorAttributeRigid(void);
MINOR_ATTRIBUTE make_AIminorAttributeRepeatedConstant(INIT_OR_CONST_HEAD p0, REPEATED_CONSTANT p1);
MINOR_ATTRIBUTE make_AJminorAttributeStar(INIT_OR_CONST_HEAD p0);
MINOR_ATTRIBUTE make_AKminorAttributeLatched(void);
MINOR_ATTRIBUTE make_ALminorAttributeNonHal(LEVEL p0);

struct INIT_OR_CONST_HEAD_
{
  int line_number, char_number;
  enum { is_AAinit_or_const_headInitial, is_ABinit_or_const_headConstant, is_ACinit_or_const_headRepeatedConstant } kind;
  union
  {
    struct { INIT_OR_CONST_HEAD init_or_const_head_; REPEATED_CONSTANT repeated_constant_; } acinit_or_const_headrepeatedconstant_;
  } u;
};

INIT_OR_CONST_HEAD make_AAinit_or_const_headInitial(void);
INIT_OR_CONST_HEAD make_ABinit_or_const_headConstant(void);
INIT_OR_CONST_HEAD make_ACinit_or_const_headRepeatedConstant(INIT_OR_CONST_HEAD p0, REPEATED_CONSTANT p1);

struct REPEATED_CONSTANT_
{
  int line_number, char_number;
  enum { is_AArepeated_constant, is_ABrepeated_constantMark, is_ACrepeated_constantMark, is_ADrepeated_constantMark, is_AErepeated_constantMark } kind;
  union
  {
    struct { EXPRESSION expression_; } aarepeated_constant_;
    struct { REPEAT_HEAD repeat_head_; VARIABLE variable_; } abrepeated_constantmark_;
    struct { CONSTANT constant_; REPEAT_HEAD repeat_head_; } acrepeated_constantmark_;
    struct { NESTED_REPEAT_HEAD nested_repeat_head_; REPEATED_CONSTANT repeated_constant_; } adrepeated_constantmark_;
    struct { REPEAT_HEAD repeat_head_; } aerepeated_constantmark_;
  } u;
};

REPEATED_CONSTANT make_AArepeated_constant(EXPRESSION p0);
REPEATED_CONSTANT make_ABrepeated_constantMark(REPEAT_HEAD p0, VARIABLE p1);
REPEATED_CONSTANT make_ACrepeated_constantMark(REPEAT_HEAD p0, CONSTANT p1);
REPEATED_CONSTANT make_ADrepeated_constantMark(NESTED_REPEAT_HEAD p0, REPEATED_CONSTANT p1);
REPEATED_CONSTANT make_AErepeated_constantMark(REPEAT_HEAD p0);

struct REPEAT_HEAD_
{
  int line_number, char_number;
  enum { is_AArepeat_head } kind;
  union
  {
    struct { ARITH_EXP arith_exp_; } aarepeat_head_;
  } u;
};

REPEAT_HEAD make_AArepeat_head(ARITH_EXP p0);

struct NESTED_REPEAT_HEAD_
{
  int line_number, char_number;
  enum { is_AAnested_repeat_head, is_ABnested_repeat_head } kind;
  union
  {
    struct { REPEAT_HEAD repeat_head_; } aanested_repeat_head_;
    struct { NESTED_REPEAT_HEAD nested_repeat_head_; REPEATED_CONSTANT repeated_constant_; } abnested_repeat_head_;
  } u;
};

NESTED_REPEAT_HEAD make_AAnested_repeat_head(REPEAT_HEAD p0);
NESTED_REPEAT_HEAD make_ABnested_repeat_head(NESTED_REPEAT_HEAD p0, REPEATED_CONSTANT p1);

struct DCL_LIST_COMMA_
{
  int line_number, char_number;
  enum { is_AAdcl_list_comma } kind;
  union
  {
    struct { DECLARATION_LIST declaration_list_; } aadcl_list_comma_;
  } u;
};

DCL_LIST_COMMA make_AAdcl_list_comma(DECLARATION_LIST p0);

struct LITERAL_EXP_OR_STAR_
{
  int line_number, char_number;
  enum { is_AAliteralExp, is_ABliteralStar } kind;
  union
  {
    struct { ARITH_EXP arith_exp_; } aaliteralexp_;
  } u;
};

LITERAL_EXP_OR_STAR make_AAliteralExp(ARITH_EXP p0);
LITERAL_EXP_OR_STAR make_ABliteralStar(void);

struct TYPE_SPEC_
{
  int line_number, char_number;
  enum { is_AAtypeSpecStruct, is_ABtypeSpecBit, is_ACtypeSpecChar, is_ADtypeSpecArith, is_AEtypeSpecEvent } kind;
  union
  {
    struct { STRUCT_SPEC struct_spec_; } aatypespecstruct_;
    struct { BIT_SPEC bit_spec_; } abtypespecbit_;
    struct { CHAR_SPEC char_spec_; } actypespecchar_;
    struct { ARITH_SPEC arith_spec_; } adtypespecarith_;
  } u;
};

TYPE_SPEC make_AAtypeSpecStruct(STRUCT_SPEC p0);
TYPE_SPEC make_ABtypeSpecBit(BIT_SPEC p0);
TYPE_SPEC make_ACtypeSpecChar(CHAR_SPEC p0);
TYPE_SPEC make_ADtypeSpecArith(ARITH_SPEC p0);
TYPE_SPEC make_AEtypeSpecEvent(void);

struct BIT_SPEC_
{
  int line_number, char_number;
  enum { is_AAbitSpecBoolean, is_ABbitSpecBoolean } kind;
  union
  {
    struct { LITERAL_EXP_OR_STAR literal_exp_or_star_; } abbitspecboolean_;
  } u;
};

BIT_SPEC make_AAbitSpecBoolean(void);
BIT_SPEC make_ABbitSpecBoolean(LITERAL_EXP_OR_STAR p0);

struct CHAR_SPEC_
{
  int line_number, char_number;
  enum { is_AAchar_spec } kind;
  union
  {
    struct { LITERAL_EXP_OR_STAR literal_exp_or_star_; } aachar_spec_;
  } u;
};

CHAR_SPEC make_AAchar_spec(LITERAL_EXP_OR_STAR p0);

struct STRUCT_SPEC_
{
  int line_number, char_number;
  enum { is_AAstruct_spec } kind;
  union
  {
    struct { STRUCT_SPEC_BODY struct_spec_body_; STRUCT_TEMPLATE struct_template_; } aastruct_spec_;
  } u;
};

STRUCT_SPEC make_AAstruct_spec(STRUCT_TEMPLATE p0, STRUCT_SPEC_BODY p1);

struct STRUCT_SPEC_BODY_
{
  int line_number, char_number;
  enum { is_AAstruct_spec_body, is_ABstruct_spec_body } kind;
  union
  {
    struct { LITERAL_EXP_OR_STAR literal_exp_or_star_; STRUCT_SPEC_HEAD struct_spec_head_; } abstruct_spec_body_;
  } u;
};

STRUCT_SPEC_BODY make_AAstruct_spec_body(void);
STRUCT_SPEC_BODY make_ABstruct_spec_body(STRUCT_SPEC_HEAD p0, LITERAL_EXP_OR_STAR p1);

struct STRUCT_TEMPLATE_
{
  int line_number, char_number;
  enum { is_FMstruct_template } kind;
  union
  {
    struct { STRUCTURE_ID structure_id_; } fmstruct_template_;
  } u;
};

STRUCT_TEMPLATE make_FMstruct_template(STRUCTURE_ID p0);

struct STRUCT_SPEC_HEAD_
{
  int line_number, char_number;
  enum { is_AAstruct_spec_head } kind;
  union
  {
  } u;
};

STRUCT_SPEC_HEAD make_AAstruct_spec_head(void);

struct ARITH_SPEC_
{
  int line_number, char_number;
  enum { is_AAarith_spec, is_ABarith_spec, is_ACarith_spec } kind;
  union
  {
    struct { PREC_SPEC prec_spec_; } aaarith_spec_;
    struct { SQ_DQ_NAME sq_dq_name_; } abarith_spec_;
    struct { PREC_SPEC prec_spec_; SQ_DQ_NAME sq_dq_name_; } acarith_spec_;
  } u;
};

ARITH_SPEC make_AAarith_spec(PREC_SPEC p0);
ARITH_SPEC make_ABarith_spec(SQ_DQ_NAME p0);
ARITH_SPEC make_ACarith_spec(SQ_DQ_NAME p0, PREC_SPEC p1);

struct COMPILATION_
{
  int line_number, char_number;
  enum { is_AAcompilation, is_ABcompilation, is_ACcompilation, is_ADcompilation, is_AEcompilation, is_AFcompilation, is_AGcompilation, is_AHcompilation, is_AZcompilationInitOrConst } kind;
  union
  {
    struct { ANY_STATEMENT any_statement_; } aacompilation_;
    struct { ANY_STATEMENT any_statement_; COMPILATION compilation_; } abcompilation_;
    struct { DECLARE_STATEMENT declare_statement_; } accompilation_;
    struct { COMPILATION compilation_; DECLARE_STATEMENT declare_statement_; } adcompilation_;
    struct { STRUCTURE_STMT structure_stmt_; } aecompilation_;
    struct { COMPILATION compilation_; STRUCTURE_STMT structure_stmt_; } afcompilation_;
    struct { REPLACE_STMT replace_stmt_; } agcompilation_;
    struct { COMPILATION compilation_; REPLACE_STMT replace_stmt_; } ahcompilation_;
    struct { EXPRESSION expression_; INIT_OR_CONST_HEAD init_or_const_head_; } azcompilationinitorconst_;
  } u;
};

COMPILATION make_AAcompilation(ANY_STATEMENT p0);
COMPILATION make_ABcompilation(COMPILATION p0, ANY_STATEMENT p1);
COMPILATION make_ACcompilation(DECLARE_STATEMENT p0);
COMPILATION make_ADcompilation(COMPILATION p0, DECLARE_STATEMENT p1);
COMPILATION make_AEcompilation(STRUCTURE_STMT p0);
COMPILATION make_AFcompilation(COMPILATION p0, STRUCTURE_STMT p1);
COMPILATION make_AGcompilation(REPLACE_STMT p0);
COMPILATION make_AHcompilation(COMPILATION p0, REPLACE_STMT p1);
COMPILATION make_AZcompilationInitOrConst(INIT_OR_CONST_HEAD p0, EXPRESSION p1);

struct BLOCK_DEFINITION_
{
  int line_number, char_number;
  enum { is_AAblock_definition, is_ABblock_definition } kind;
  union
  {
    struct { BLOCK_STMT block_stmt_; CLOSING closing_; } aablock_definition_;
    struct { BLOCK_BODY block_body_; BLOCK_STMT block_stmt_; CLOSING closing_; } abblock_definition_;
  } u;
};

BLOCK_DEFINITION make_AAblock_definition(BLOCK_STMT p0, CLOSING p1);
BLOCK_DEFINITION make_ABblock_definition(BLOCK_STMT p0, BLOCK_BODY p1, CLOSING p2);

struct BLOCK_STMT_
{
  int line_number, char_number;
  enum { is_AAblock_stmt } kind;
  union
  {
    struct { BLOCK_STMT_TOP block_stmt_top_; } aablock_stmt_;
  } u;
};

BLOCK_STMT make_AAblock_stmt(BLOCK_STMT_TOP p0);

struct BLOCK_STMT_TOP_
{
  int line_number, char_number;
  enum { is_AAblockTopAccess, is_ABblockTopRigid, is_ACblockTopHead, is_ADblockTopExclusive, is_AEblockTopReentrant } kind;
  union
  {
    struct { BLOCK_STMT_TOP block_stmt_top_; } aablocktopaccess_;
    struct { BLOCK_STMT_TOP block_stmt_top_; } abblocktoprigid_;
    struct { BLOCK_STMT_HEAD block_stmt_head_; } acblocktophead_;
    struct { BLOCK_STMT_HEAD block_stmt_head_; } adblocktopexclusive_;
    struct { BLOCK_STMT_HEAD block_stmt_head_; } aeblocktopreentrant_;
  } u;
};

BLOCK_STMT_TOP make_AAblockTopAccess(BLOCK_STMT_TOP p0);
BLOCK_STMT_TOP make_ABblockTopRigid(BLOCK_STMT_TOP p0);
BLOCK_STMT_TOP make_ACblockTopHead(BLOCK_STMT_HEAD p0);
BLOCK_STMT_TOP make_ADblockTopExclusive(BLOCK_STMT_HEAD p0);
BLOCK_STMT_TOP make_AEblockTopReentrant(BLOCK_STMT_HEAD p0);

struct BLOCK_STMT_HEAD_
{
  int line_number, char_number;
  enum { is_AAblockHeadProgram, is_ABblockHeadCompool, is_ACblockHeadTask, is_ADblockHeadUpdate, is_AEblockHeadUpdate, is_AFblockHeadFunction, is_AGblockHeadFunction, is_AHblockHeadProcedure, is_AIblockHeadProcedure } kind;
  union
  {
    struct { LABEL_EXTERNAL label_external_; } aablockheadprogram_;
    struct { LABEL_EXTERNAL label_external_; } abblockheadcompool_;
    struct { LABEL_DEFINITION label_definition_; } acblockheadtask_;
    struct { LABEL_DEFINITION label_definition_; } adblockheadupdate_;
    struct { FUNCTION_NAME function_name_; } afblockheadfunction_;
    struct { FUNCTION_NAME function_name_; FUNC_STMT_BODY func_stmt_body_; } agblockheadfunction_;
    struct { PROCEDURE_NAME procedure_name_; } ahblockheadprocedure_;
    struct { PROCEDURE_NAME procedure_name_; PROC_STMT_BODY proc_stmt_body_; } aiblockheadprocedure_;
  } u;
};

BLOCK_STMT_HEAD make_AAblockHeadProgram(LABEL_EXTERNAL p0);
BLOCK_STMT_HEAD make_ABblockHeadCompool(LABEL_EXTERNAL p0);
BLOCK_STMT_HEAD make_ACblockHeadTask(LABEL_DEFINITION p0);
BLOCK_STMT_HEAD make_ADblockHeadUpdate(LABEL_DEFINITION p0);
BLOCK_STMT_HEAD make_AEblockHeadUpdate(void);
BLOCK_STMT_HEAD make_AFblockHeadFunction(FUNCTION_NAME p0);
BLOCK_STMT_HEAD make_AGblockHeadFunction(FUNCTION_NAME p0, FUNC_STMT_BODY p1);
BLOCK_STMT_HEAD make_AHblockHeadProcedure(PROCEDURE_NAME p0);
BLOCK_STMT_HEAD make_AIblockHeadProcedure(PROCEDURE_NAME p0, PROC_STMT_BODY p1);

struct LABEL_EXTERNAL_
{
  int line_number, char_number;
  enum { is_AAlabel_external, is_ABlabel_external } kind;
  union
  {
    struct { LABEL_DEFINITION label_definition_; } aalabel_external_;
    struct { LABEL_DEFINITION label_definition_; } ablabel_external_;
  } u;
};

LABEL_EXTERNAL make_AAlabel_external(LABEL_DEFINITION p0);
LABEL_EXTERNAL make_ABlabel_external(LABEL_DEFINITION p0);

struct CLOSING_
{
  int line_number, char_number;
  enum { is_AAclosing, is_ABclosing, is_ADclosing, is_ACclosing } kind;
  union
  {
    struct { LABEL label_; } abclosing_;
    struct { NoArgUserFuncIdentifierToken noarguserfuncidentifiertoken_; } adclosing_;
    struct { CLOSING closing_; LABEL_DEFINITION label_definition_; } acclosing_;
  } u;
};

CLOSING make_AAclosing(void);
CLOSING make_ABclosing(LABEL p0);
CLOSING make_ADclosing(NoArgUserFuncIdentifierToken p0);
CLOSING make_ACclosing(LABEL_DEFINITION p0, CLOSING p1);

struct BLOCK_BODY_
{
  int line_number, char_number;
  enum { is_ABblock_body, is_ADblock_body, is_ACblock_body } kind;
  union
  {
    struct { DECLARE_GROUP declare_group_; } abblock_body_;
    struct { ANY_STATEMENT any_statement_; } adblock_body_;
    struct { ANY_STATEMENT any_statement_; BLOCK_BODY block_body_; } acblock_body_;
  } u;
};

BLOCK_BODY make_ABblock_body(DECLARE_GROUP p0);
BLOCK_BODY make_ADblock_body(ANY_STATEMENT p0);
BLOCK_BODY make_ACblock_body(BLOCK_BODY p0, ANY_STATEMENT p1);

struct FUNCTION_NAME_
{
  int line_number, char_number;
  enum { is_AAfunction_name, is_ABfunction_name, is_ACfunction_name } kind;
  union
  {
    struct { LABEL_EXTERNAL label_external_; } aafunction_name_;
    struct { NoArgUserFuncIdentifierToken noarguserfuncidentifiertoken_; } abfunction_name_;
    struct { NoArgUserFuncIdentifierToken noarguserfuncidentifiertoken_; } acfunction_name_;
  } u;
};

FUNCTION_NAME make_AAfunction_name(LABEL_EXTERNAL p0);
FUNCTION_NAME make_ABfunction_name(NoArgUserFuncIdentifierToken p0);
FUNCTION_NAME make_ACfunction_name(NoArgUserFuncIdentifierToken p0);

struct PROCEDURE_NAME_
{
  int line_number, char_number;
  enum { is_AAprocedure_name } kind;
  union
  {
    struct { LABEL_EXTERNAL label_external_; } aaprocedure_name_;
  } u;
};

PROCEDURE_NAME make_AAprocedure_name(LABEL_EXTERNAL p0);

struct FUNC_STMT_BODY_
{
  int line_number, char_number;
  enum { is_AAfunc_stmt_body, is_ABfunc_stmt_body, is_ACfunc_stmt_body } kind;
  union
  {
    struct { PARAMETER_LIST parameter_list_; } aafunc_stmt_body_;
    struct { TYPE_SPEC type_spec_; } abfunc_stmt_body_;
    struct { PARAMETER_LIST parameter_list_; TYPE_SPEC type_spec_; } acfunc_stmt_body_;
  } u;
};

FUNC_STMT_BODY make_AAfunc_stmt_body(PARAMETER_LIST p0);
FUNC_STMT_BODY make_ABfunc_stmt_body(TYPE_SPEC p0);
FUNC_STMT_BODY make_ACfunc_stmt_body(PARAMETER_LIST p0, TYPE_SPEC p1);

struct PROC_STMT_BODY_
{
  int line_number, char_number;
  enum { is_AAproc_stmt_body, is_ABproc_stmt_body, is_ACproc_stmt_body } kind;
  union
  {
    struct { PARAMETER_LIST parameter_list_; } aaproc_stmt_body_;
    struct { ASSIGN_LIST assign_list_; } abproc_stmt_body_;
    struct { ASSIGN_LIST assign_list_; PARAMETER_LIST parameter_list_; } acproc_stmt_body_;
  } u;
};

PROC_STMT_BODY make_AAproc_stmt_body(PARAMETER_LIST p0);
PROC_STMT_BODY make_ABproc_stmt_body(ASSIGN_LIST p0);
PROC_STMT_BODY make_ACproc_stmt_body(PARAMETER_LIST p0, ASSIGN_LIST p1);

struct DECLARE_GROUP_
{
  int line_number, char_number;
  enum { is_AAdeclare_group, is_ABdeclare_group } kind;
  union
  {
    struct { DECLARE_ELEMENT declare_element_; } aadeclare_group_;
    struct { DECLARE_ELEMENT declare_element_; DECLARE_GROUP declare_group_; } abdeclare_group_;
  } u;
};

DECLARE_GROUP make_AAdeclare_group(DECLARE_ELEMENT p0);
DECLARE_GROUP make_ABdeclare_group(DECLARE_GROUP p0, DECLARE_ELEMENT p1);

struct DECLARE_ELEMENT_
{
  int line_number, char_number;
  enum { is_AAdeclareElementDeclare, is_ABdeclareElementReplace, is_ACdeclareElementStructure, is_ADdeclareElementEquate } kind;
  union
  {
    struct { DECLARE_STATEMENT declare_statement_; } aadeclareelementdeclare_;
    struct { REPLACE_STMT replace_stmt_; } abdeclareelementreplace_;
    struct { STRUCTURE_STMT structure_stmt_; } acdeclareelementstructure_;
    struct { IDENTIFIER identifier_; VARIABLE variable_; } addeclareelementequate_;
  } u;
};

DECLARE_ELEMENT make_AAdeclareElementDeclare(DECLARE_STATEMENT p0);
DECLARE_ELEMENT make_ABdeclareElementReplace(REPLACE_STMT p0);
DECLARE_ELEMENT make_ACdeclareElementStructure(STRUCTURE_STMT p0);
DECLARE_ELEMENT make_ADdeclareElementEquate(IDENTIFIER p0, VARIABLE p1);

struct PARAMETER_
{
  int line_number, char_number;
  enum { is_AAparameter, is_ABparameter, is_ACparameter, is_ADparameter, is_AEparameter, is_AFparameter } kind;
  union
  {
    struct { IdentifierToken identifiertoken_; } aaparameter_;
    struct { BitIdentifierToken bitidentifiertoken_; } abparameter_;
    struct { CharIdentifierToken charidentifiertoken_; } acparameter_;
    struct { StructIdentifierToken structidentifiertoken_; } adparameter_;
    struct { EventToken eventtoken_; } aeparameter_;
    struct { LabelToken labeltoken_; } afparameter_;
  } u;
};

PARAMETER make_AAparameter(IdentifierToken p0);
PARAMETER make_ABparameter(BitIdentifierToken p0);
PARAMETER make_ACparameter(CharIdentifierToken p0);
PARAMETER make_ADparameter(StructIdentifierToken p0);
PARAMETER make_AEparameter(EventToken p0);
PARAMETER make_AFparameter(LabelToken p0);

struct PARAMETER_LIST_
{
  int line_number, char_number;
  enum { is_AAparameter_list } kind;
  union
  {
    struct { PARAMETER parameter_; PARAMETER_HEAD parameter_head_; } aaparameter_list_;
  } u;
};

PARAMETER_LIST make_AAparameter_list(PARAMETER_HEAD p0, PARAMETER p1);

struct PARAMETER_HEAD_
{
  int line_number, char_number;
  enum { is_AAparameter_head, is_ABparameter_head } kind;
  union
  {
    struct { PARAMETER parameter_; PARAMETER_HEAD parameter_head_; } abparameter_head_;
  } u;
};

PARAMETER_HEAD make_AAparameter_head(void);
PARAMETER_HEAD make_ABparameter_head(PARAMETER_HEAD p0, PARAMETER p1);

struct DECLARE_STATEMENT_
{
  int line_number, char_number;
  enum { is_AAdeclare_statement } kind;
  union
  {
    struct { DECLARE_BODY declare_body_; } aadeclare_statement_;
  } u;
};

DECLARE_STATEMENT make_AAdeclare_statement(DECLARE_BODY p0);

struct ASSIGN_LIST_
{
  int line_number, char_number;
  enum { is_AAassign_list } kind;
  union
  {
    struct { ASSIGN assign_; PARAMETER_LIST parameter_list_; } aaassign_list_;
  } u;
};

ASSIGN_LIST make_AAassign_list(ASSIGN p0, PARAMETER_LIST p1);

struct TEXT_
{
  int line_number, char_number;
  enum { is_FQtext } kind;
  union
  {
    struct { TextToken texttoken_; } fqtext_;
  } u;
};

TEXT make_FQtext(TextToken p0);

struct REPLACE_STMT_
{
  int line_number, char_number;
  enum { is_AAreplace_stmt } kind;
  union
  {
    struct { REPLACE_HEAD replace_head_; TEXT text_; } aareplace_stmt_;
  } u;
};

REPLACE_STMT make_AAreplace_stmt(REPLACE_HEAD p0, TEXT p1);

struct REPLACE_HEAD_
{
  int line_number, char_number;
  enum { is_AAreplace_head, is_ABreplace_head } kind;
  union
  {
    struct { IDENTIFIER identifier_; } aareplace_head_;
    struct { ARG_LIST arg_list_; IDENTIFIER identifier_; } abreplace_head_;
  } u;
};

REPLACE_HEAD make_AAreplace_head(IDENTIFIER p0);
REPLACE_HEAD make_ABreplace_head(IDENTIFIER p0, ARG_LIST p1);

struct ARG_LIST_
{
  int line_number, char_number;
  enum { is_AAarg_list, is_ABarg_list } kind;
  union
  {
    struct { IDENTIFIER identifier_; } aaarg_list_;
    struct { ARG_LIST arg_list_; IDENTIFIER identifier_; } abarg_list_;
  } u;
};

ARG_LIST make_AAarg_list(IDENTIFIER p0);
ARG_LIST make_ABarg_list(ARG_LIST p0, IDENTIFIER p1);

struct STRUCTURE_STMT_
{
  int line_number, char_number;
  enum { is_AAstructure_stmt } kind;
  union
  {
    struct { STRUCT_STMT_HEAD struct_stmt_head_; STRUCT_STMT_TAIL struct_stmt_tail_; } aastructure_stmt_;
  } u;
};

STRUCTURE_STMT make_AAstructure_stmt(STRUCT_STMT_HEAD p0, STRUCT_STMT_TAIL p1);

struct STRUCT_STMT_HEAD_
{
  int line_number, char_number;
  enum { is_AAstruct_stmt_head, is_ABstruct_stmt_head, is_ACstruct_stmt_head } kind;
  union
  {
    struct { LEVEL level_; STRUCTURE_ID structure_id_; } aastruct_stmt_head_;
    struct { LEVEL level_; MINOR_ATTR_LIST minor_attr_list_; STRUCTURE_ID structure_id_; } abstruct_stmt_head_;
    struct { DECLARATION declaration_; LEVEL level_; STRUCT_STMT_HEAD struct_stmt_head_; } acstruct_stmt_head_;
  } u;
};

STRUCT_STMT_HEAD make_AAstruct_stmt_head(STRUCTURE_ID p0, LEVEL p1);
STRUCT_STMT_HEAD make_ABstruct_stmt_head(STRUCTURE_ID p0, MINOR_ATTR_LIST p1, LEVEL p2);
STRUCT_STMT_HEAD make_ACstruct_stmt_head(STRUCT_STMT_HEAD p0, DECLARATION p1, LEVEL p2);

struct STRUCT_STMT_TAIL_
{
  int line_number, char_number;
  enum { is_AAstruct_stmt_tail } kind;
  union
  {
    struct { DECLARATION declaration_; } aastruct_stmt_tail_;
  } u;
};

STRUCT_STMT_TAIL make_AAstruct_stmt_tail(DECLARATION p0);

struct INLINE_DEFINITION_
{
  int line_number, char_number;
  enum { is_AAinline_definition, is_ABinline_definition, is_ACinline_definition, is_ADinline_definition } kind;
  union
  {
    struct { ARITH_INLINE arith_inline_; } aainline_definition_;
    struct { BIT_INLINE bit_inline_; } abinline_definition_;
    struct { CHAR_INLINE char_inline_; } acinline_definition_;
    struct { STRUCTURE_EXP structure_exp_; } adinline_definition_;
  } u;
};

INLINE_DEFINITION make_AAinline_definition(ARITH_INLINE p0);
INLINE_DEFINITION make_ABinline_definition(BIT_INLINE p0);
INLINE_DEFINITION make_ACinline_definition(CHAR_INLINE p0);
INLINE_DEFINITION make_ADinline_definition(STRUCTURE_EXP p0);

struct ARITH_INLINE_
{
  int line_number, char_number;
  enum { is_ACprimary, is_AZprimary } kind;
  union
  {
    struct { ARITH_INLINE_DEF arith_inline_def_; CLOSING closing_; } acprimary_;
    struct { ARITH_INLINE_DEF arith_inline_def_; BLOCK_BODY block_body_; CLOSING closing_; } azprimary_;
  } u;
};

ARITH_INLINE make_ACprimary(ARITH_INLINE_DEF p0, CLOSING p1);
ARITH_INLINE make_AZprimary(ARITH_INLINE_DEF p0, BLOCK_BODY p1, CLOSING p2);

struct ARITH_INLINE_DEF_
{
  int line_number, char_number;
  enum { is_AAarith_inline_def, is_ABarith_inline_def } kind;
  union
  {
    struct { ARITH_SPEC arith_spec_; } aaarith_inline_def_;
  } u;
};

ARITH_INLINE_DEF make_AAarith_inline_def(ARITH_SPEC p0);
ARITH_INLINE_DEF make_ABarith_inline_def(void);

struct BIT_INLINE_
{
  int line_number, char_number;
  enum { is_AGbit_prim, is_AZbit_prim } kind;
  union
  {
    struct { BIT_INLINE_DEF bit_inline_def_; CLOSING closing_; } agbit_prim_;
    struct { BIT_INLINE_DEF bit_inline_def_; BLOCK_BODY block_body_; CLOSING closing_; } azbit_prim_;
  } u;
};

BIT_INLINE make_AGbit_prim(BIT_INLINE_DEF p0, CLOSING p1);
BIT_INLINE make_AZbit_prim(BIT_INLINE_DEF p0, BLOCK_BODY p1, CLOSING p2);

struct BIT_INLINE_DEF_
{
  int line_number, char_number;
  enum { is_AAbit_inline_def } kind;
  union
  {
    struct { BIT_SPEC bit_spec_; } aabit_inline_def_;
  } u;
};

BIT_INLINE_DEF make_AAbit_inline_def(BIT_SPEC p0);

struct CHAR_INLINE_
{
  int line_number, char_number;
  enum { is_ADchar_prim, is_AZchar_prim } kind;
  union
  {
    struct { CHAR_INLINE_DEF char_inline_def_; CLOSING closing_; } adchar_prim_;
    struct { BLOCK_BODY block_body_; CHAR_INLINE_DEF char_inline_def_; CLOSING closing_; } azchar_prim_;
  } u;
};

CHAR_INLINE make_ADchar_prim(CHAR_INLINE_DEF p0, CLOSING p1);
CHAR_INLINE make_AZchar_prim(CHAR_INLINE_DEF p0, BLOCK_BODY p1, CLOSING p2);

struct CHAR_INLINE_DEF_
{
  int line_number, char_number;
  enum { is_AAchar_inline_def } kind;
  union
  {
    struct { CHAR_SPEC char_spec_; } aachar_inline_def_;
  } u;
};

CHAR_INLINE_DEF make_AAchar_inline_def(CHAR_SPEC p0);

struct STRUC_INLINE_DEF_
{
  int line_number, char_number;
  enum { is_AAstruc_inline_def } kind;
  union
  {
    struct { STRUCT_SPEC struct_spec_; } aastruc_inline_def_;
  } u;
};

STRUC_INLINE_DEF make_AAstruc_inline_def(STRUCT_SPEC p0);



#endif
