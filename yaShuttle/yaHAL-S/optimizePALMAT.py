#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Copyright:      None - the author (Ron Burkey) declares this software to
                be in the Public Domain, with no rights reserved.
Filename:       optimizePALMAT.py
Purpose:        Optimize PALMAT instructions generated by the preminary 
                implementation of the "modern" HAL/S compiler.
History:        2023-02-18 RSB  Created. 

Just to be clear, any "optimization" performed is primitive.  That's putting it
charitably.  However, some liberties taken by the code-generation process are
just such low-hanging fruit that it was too tempting to resist.
"""

#-----------------------------------------------------------------------------
# This optimization doesn't provide any speedups, but results in a filesize
# reduction by eliminating "source" fields in instructions without a "label"
# field, when those "source" fields are the same as the preceding instruction.
# This is particularly useful in expressions, when all of the instructions for
# a given expression tend to have the same cross-reference to source code ...
# though if I were doing it correctly, perhaps they wouldn't.
def eliminateRedundantCrossReferences(scope):
    instructions = scope["instructions"]
    # Must check the instructions in reverse order, or else we'd end up 
    # checking instructions vs s preceding instruction which had already had
    # oyd "source" field purged.
    for i in range(len(instructions)-1, 0, -1):
        current = instructions[i]
        if "label" in current or "source" not in current:
            continue
        preceding = instructions[i - 1]
        if "source" not in preceding or \
                current["source"] != preceding["source"]:
            continue
        current.pop("source")

#-----------------------------------------------------------------------------
# This optimization relates to the fact that when a symbolic label is inserted,
# it is done at a "noop" instruction ... whereas the label can usually just
# be put into the non-noop succeeding the noop, eliminating the useless noop.
def eliminateUselessNoops(PALMAT, scope):
    instructions = scope["instructions"]
    thisScope = scope["self"]
    # Must check the instructions in reverse order, since we have to remove
    # noop instructions as we find them.
    for i in range(len(instructions)-2, -1, -1):
        current = instructions[i]
        if "label" not in current or "noop" not in current:
            continue
        next = instructions[i + 1]
        if "label" in next:
            # Can't add a 2nd label to an instruction already having one.
            # Actually, that's not entirely true, since we could do something
            # globally (throughout all scopes in which both symbolic labels
            # are accessible) to replace the two labels by a single label.
            # Some other time, perhaps ...
            continue
        next["label"] = current["label"]
        instructions.pop(i)
        # Okay, we've moved the label from the noop and removed the useless
        # noop.  However, there's a problem now, because all of the symbolic
        # labels at higher instruction addresses are now wrong in the 
        # "identifiers" list of this scope or some ancestor scope.  We have
        # to seek them all out and fix them.  (If there were any hard-coded
        # references to addresses, they'd all be wrong too.  I think I've 
        # avoided that trap, but we'll see.)
        j = thisScope
        while j != None:
            testScope = PALMAT["scopes"][j]
            testIdentifiers = testScope["identifiers"]
            for identifier in testIdentifiers:
                attributes = testIdentifiers[identifier]
                if "label" not in attributes:
                    continue
                address = attributes["label"]
                if address[0] != thisScope or address[1] <= i:
                    continue
                address[1] -= 1
            j = testScope["parent"]

#-----------------------------------------------------------------------------
# This is the top-level optimization function.  The optimizations are done
# in-place on the provided PALMAT structure.
def optimizePALMAT(PALMAT):
    
    # Here are optimizations confined to individual scopes, more-or-less.
    for scope in PALMAT["scopes"]:
        eliminateRedundantCrossReferences(scope)
        eliminateUselessNoops(PALMAT, scope)
        
