#ifndef PRINTER_HEADER
#define PRINTER_HEADER

#include "Absyn.h"

/* Certain applications may improve performance by changing the buffer size */
#define BUFFER_INITIAL 2000
/* You may wish to change _L_PAREN or _R_PAREN */
#define _L_PAREN '('
#define _R_PAREN ')'

/* The following are simple heuristics for rendering terminals */
/* You may wish to change them */
void renderCC(Char c);
void renderCS(String s);
void indent(void);
void backup(void);


char *printCOMPILATION(COMPILATION p);

void ppDECLARE_BODY(DECLARE_BODY p, int i);
void ppATTRIBUTES(ATTRIBUTES p, int i);
void ppDECLARATION(DECLARATION p, int i);
void ppARRAY_SPEC(ARRAY_SPEC p, int i);
void ppTYPE_AND_MINOR_ATTR(TYPE_AND_MINOR_ATTR p, int i);
void ppIDENTIFIER(IDENTIFIER p, int i);
void ppSQ_DQ_NAME(SQ_DQ_NAME p, int i);
void ppDOUBLY_QUAL_NAME_HEAD(DOUBLY_QUAL_NAME_HEAD p, int i);
void ppARITH_CONV(ARITH_CONV p, int i);
void ppDECLARATION_LIST(DECLARATION_LIST p, int i);
void ppNAME_ID(NAME_ID p, int i);
void ppARITH_EXP(ARITH_EXP p, int i);
void ppTERM(TERM p, int i);
void ppPLUS(PLUS p, int i);
void ppMINUS(MINUS p, int i);
void ppPRODUCT(PRODUCT p, int i);
void ppFACTOR(FACTOR p, int i);
void ppEXPONENTIATION(EXPONENTIATION p, int i);
void ppPRIMARY(PRIMARY p, int i);
void ppARITH_VAR(ARITH_VAR p, int i);
void ppPRE_PRIMARY(PRE_PRIMARY p, int i);
void ppNUMBER(NUMBER p, int i);
void ppLEVEL(LEVEL p, int i);
void ppCOMPOUND_NUMBER(COMPOUND_NUMBER p, int i);
void ppSIMPLE_NUMBER(SIMPLE_NUMBER p, int i);
void ppMODIFIED_ARITH_FUNC(MODIFIED_ARITH_FUNC p, int i);
void ppSHAPING_HEAD(SHAPING_HEAD p, int i);
void ppCALL_LIST(CALL_LIST p, int i);
void ppLIST_EXP(LIST_EXP p, int i);
void ppEXPRESSION(EXPRESSION p, int i);
void ppARITH_ID(ARITH_ID p, int i);
void ppNO_ARG_ARITH_FUNC(NO_ARG_ARITH_FUNC p, int i);
void ppARITH_FUNC(ARITH_FUNC p, int i);
void ppBIT_FUNC(BIT_FUNC p, int i);
void ppSUBSCRIPT(SUBSCRIPT p, int i);
void ppQUALIFIER(QUALIFIER p, int i);
void ppSCALE_HEAD(SCALE_HEAD p, int i);
void ppPREC_SPEC(PREC_SPEC p, int i);
void ppSUB_START(SUB_START p, int i);
void ppSUB_HEAD(SUB_HEAD p, int i);
void ppSUB(SUB p, int i);
void ppSUB_RUN_HEAD(SUB_RUN_HEAD p, int i);
void ppSUB_EXP(SUB_EXP p, int i);
void ppPOUND_EXPRESSION(POUND_EXPRESSION p, int i);
void ppBIT_EXP(BIT_EXP p, int i);
void ppBIT_FACTOR(BIT_FACTOR p, int i);
void ppBIT_CAT(BIT_CAT p, int i);
void ppOR(OR p, int i);
void ppCHAR_VERTICAL_BAR(CHAR_VERTICAL_BAR p, int i);
void ppAND(AND p, int i);
void ppBIT_PRIM(BIT_PRIM p, int i);
void ppCAT(CAT p, int i);
void ppNOT(NOT p, int i);
void ppBIT_VAR(BIT_VAR p, int i);
void ppLABEL_VAR(LABEL_VAR p, int i);
void ppEVENT_VAR(EVENT_VAR p, int i);
void ppBIT_CONST_HEAD(BIT_CONST_HEAD p, int i);
void ppBIT_CONST(BIT_CONST p, int i);
void ppRADIX(RADIX p, int i);
void ppCHAR_STRING(CHAR_STRING p, int i);
void ppSUBBIT_HEAD(SUBBIT_HEAD p, int i);
void ppSUBBIT_KEY(SUBBIT_KEY p, int i);
void ppBIT_FUNC_HEAD(BIT_FUNC_HEAD p, int i);
void ppBIT_ID(BIT_ID p, int i);
void ppLABEL(LABEL p, int i);
void ppEVENT(EVENT p, int i);
void ppSUB_OR_QUALIFIER(SUB_OR_QUALIFIER p, int i);
void ppBIT_QUALIFIER(BIT_QUALIFIER p, int i);
void ppCHAR_EXP(CHAR_EXP p, int i);
void ppCHAR_PRIM(CHAR_PRIM p, int i);
void ppCHAR_FUNC_HEAD(CHAR_FUNC_HEAD p, int i);
void ppCHAR_VAR(CHAR_VAR p, int i);
void ppCHAR_CONST(CHAR_CONST p, int i);
void ppCHAR_FUNC(CHAR_FUNC p, int i);
void ppCHAR_ID(CHAR_ID p, int i);
void ppNAME_EXP(NAME_EXP p, int i);
void ppNAME_KEY(NAME_KEY p, int i);
void ppNAME_VAR(NAME_VAR p, int i);
void ppVARIABLE(VARIABLE p, int i);
void ppSTRUCTURE_EXP(STRUCTURE_EXP p, int i);
void ppSTRUCT_FUNC_HEAD(STRUCT_FUNC_HEAD p, int i);
void ppSTRUCTURE_VAR(STRUCTURE_VAR p, int i);
void ppSTRUCT_FUNC(STRUCT_FUNC p, int i);
void ppQUAL_STRUCT(QUAL_STRUCT p, int i);
void ppSTRUCTURE_ID(STRUCTURE_ID p, int i);
void ppASSIGNMENT(ASSIGNMENT p, int i);
void ppEQUALS(EQUALS p, int i);
void ppSTATEMENT(STATEMENT p, int i);
void ppBASIC_STATEMENT(BASIC_STATEMENT p, int i);
void ppOTHER_STATEMENT(OTHER_STATEMENT p, int i);
void ppIF_STATEMENT(IF_STATEMENT p, int i);
void ppIF_CLAUSE(IF_CLAUSE p, int i);
void ppTRUE_PART(TRUE_PART p, int i);
void ppIF(IF p, int i);
void ppTHEN(THEN p, int i);
void ppRELATIONAL_EXP(RELATIONAL_EXP p, int i);
void ppRELATIONAL_FACTOR(RELATIONAL_FACTOR p, int i);
void ppREL_PRIM(REL_PRIM p, int i);
void ppCOMPARISON(COMPARISON p, int i);
void ppANY_STATEMENT(ANY_STATEMENT p, int i);
void ppON_PHRASE(ON_PHRASE p, int i);
void ppON_CLAUSE(ON_CLAUSE p, int i);
void ppLABEL_DEFINITION(LABEL_DEFINITION p, int i);
void ppCALL_KEY(CALL_KEY p, int i);
void ppASSIGN(ASSIGN p, int i);
void ppCALL_ASSIGN_LIST(CALL_ASSIGN_LIST p, int i);
void ppDO_GROUP_HEAD(DO_GROUP_HEAD p, int i);
void ppENDING(ENDING p, int i);
void ppREAD_KEY(READ_KEY p, int i);
void ppWRITE_KEY(WRITE_KEY p, int i);
void ppREAD_PHRASE(READ_PHRASE p, int i);
void ppWRITE_PHRASE(WRITE_PHRASE p, int i);
void ppREAD_ARG(READ_ARG p, int i);
void ppWRITE_ARG(WRITE_ARG p, int i);
void ppFILE_EXP(FILE_EXP p, int i);
void ppFILE_HEAD(FILE_HEAD p, int i);
void ppIO_CONTROL(IO_CONTROL p, int i);
void ppWAIT_KEY(WAIT_KEY p, int i);
void ppTERMINATOR(TERMINATOR p, int i);
void ppTERMINATE_LIST(TERMINATE_LIST p, int i);
void ppSCHEDULE_HEAD(SCHEDULE_HEAD p, int i);
void ppSCHEDULE_PHRASE(SCHEDULE_PHRASE p, int i);
void ppSCHEDULE_CONTROL(SCHEDULE_CONTROL p, int i);
void ppTIMING(TIMING p, int i);
void ppREPEAT(REPEAT p, int i);
void ppSTOPPING(STOPPING p, int i);
void ppSIGNAL_CLAUSE(SIGNAL_CLAUSE p, int i);
void ppPERCENT_MACRO_NAME(PERCENT_MACRO_NAME p, int i);
void ppPERCENT_MACRO_HEAD(PERCENT_MACRO_HEAD p, int i);
void ppPERCENT_MACRO_ARG(PERCENT_MACRO_ARG p, int i);
void ppCASE_ELSE(CASE_ELSE p, int i);
void ppWHILE_KEY(WHILE_KEY p, int i);
void ppWHILE_CLAUSE(WHILE_CLAUSE p, int i);
void ppFOR_LIST(FOR_LIST p, int i);
void ppITERATION_BODY(ITERATION_BODY p, int i);
void ppITERATION_CONTROL(ITERATION_CONTROL p, int i);
void ppFOR_KEY(FOR_KEY p, int i);
void ppTEMPORARY_STMT(TEMPORARY_STMT p, int i);
void ppCONSTANT(CONSTANT p, int i);
void ppARRAY_HEAD(ARRAY_HEAD p, int i);
void ppMINOR_ATTR_LIST(MINOR_ATTR_LIST p, int i);
void ppMINOR_ATTRIBUTE(MINOR_ATTRIBUTE p, int i);
void ppINIT_OR_CONST_HEAD(INIT_OR_CONST_HEAD p, int i);
void ppREPEATED_CONSTANT(REPEATED_CONSTANT p, int i);
void ppREPEAT_HEAD(REPEAT_HEAD p, int i);
void ppNESTED_REPEAT_HEAD(NESTED_REPEAT_HEAD p, int i);
void ppDCL_LIST_COMMA(DCL_LIST_COMMA p, int i);
void ppLITERAL_EXP_OR_STAR(LITERAL_EXP_OR_STAR p, int i);
void ppTYPE_SPEC(TYPE_SPEC p, int i);
void ppBIT_SPEC(BIT_SPEC p, int i);
void ppCHAR_SPEC(CHAR_SPEC p, int i);
void ppSTRUCT_SPEC(STRUCT_SPEC p, int i);
void ppSTRUCT_SPEC_BODY(STRUCT_SPEC_BODY p, int i);
void ppSTRUCT_TEMPLATE(STRUCT_TEMPLATE p, int i);
void ppSTRUCT_SPEC_HEAD(STRUCT_SPEC_HEAD p, int i);
void ppARITH_SPEC(ARITH_SPEC p, int i);
void ppCOMPILATION(COMPILATION p, int i);
void ppBLOCK_DEFINITION(BLOCK_DEFINITION p, int i);
void ppBLOCK_STMT(BLOCK_STMT p, int i);
void ppBLOCK_STMT_TOP(BLOCK_STMT_TOP p, int i);
void ppBLOCK_STMT_HEAD(BLOCK_STMT_HEAD p, int i);
void ppLABEL_EXTERNAL(LABEL_EXTERNAL p, int i);
void ppCLOSING(CLOSING p, int i);
void ppBLOCK_BODY(BLOCK_BODY p, int i);
void ppFUNCTION_NAME(FUNCTION_NAME p, int i);
void ppPROCEDURE_NAME(PROCEDURE_NAME p, int i);
void ppFUNC_STMT_BODY(FUNC_STMT_BODY p, int i);
void ppPROC_STMT_BODY(PROC_STMT_BODY p, int i);
void ppDECLARE_GROUP(DECLARE_GROUP p, int i);
void ppDECLARE_ELEMENT(DECLARE_ELEMENT p, int i);
void ppPARAMETER(PARAMETER p, int i);
void ppPARAMETER_LIST(PARAMETER_LIST p, int i);
void ppPARAMETER_HEAD(PARAMETER_HEAD p, int i);
void ppDECLARE_STATEMENT(DECLARE_STATEMENT p, int i);
void ppASSIGN_LIST(ASSIGN_LIST p, int i);
void ppTEXT(TEXT p, int i);
void ppREPLACE_STMT(REPLACE_STMT p, int i);
void ppREPLACE_HEAD(REPLACE_HEAD p, int i);
void ppARG_LIST(ARG_LIST p, int i);
void ppSTRUCTURE_STMT(STRUCTURE_STMT p, int i);
void ppSTRUCT_STMT_HEAD(STRUCT_STMT_HEAD p, int i);
void ppSTRUCT_STMT_TAIL(STRUCT_STMT_TAIL p, int i);
void ppINLINE_DEFINITION(INLINE_DEFINITION p, int i);
void ppARITH_INLINE(ARITH_INLINE p, int i);
void ppARITH_INLINE_DEF(ARITH_INLINE_DEF p, int i);
void ppBIT_INLINE(BIT_INLINE p, int i);
void ppBIT_INLINE_DEF(BIT_INLINE_DEF p, int i);
void ppCHAR_INLINE(CHAR_INLINE p, int i);
void ppCHAR_INLINE_DEF(CHAR_INLINE_DEF p, int i);
void ppSTRUC_INLINE_DEF(STRUC_INLINE_DEF p, int i);

char *showCOMPILATION(COMPILATION p);

void shDECLARE_BODY(DECLARE_BODY p);
void shATTRIBUTES(ATTRIBUTES p);
void shDECLARATION(DECLARATION p);
void shARRAY_SPEC(ARRAY_SPEC p);
void shTYPE_AND_MINOR_ATTR(TYPE_AND_MINOR_ATTR p);
void shIDENTIFIER(IDENTIFIER p);
void shSQ_DQ_NAME(SQ_DQ_NAME p);
void shDOUBLY_QUAL_NAME_HEAD(DOUBLY_QUAL_NAME_HEAD p);
void shARITH_CONV(ARITH_CONV p);
void shDECLARATION_LIST(DECLARATION_LIST p);
void shNAME_ID(NAME_ID p);
void shARITH_EXP(ARITH_EXP p);
void shTERM(TERM p);
void shPLUS(PLUS p);
void shMINUS(MINUS p);
void shPRODUCT(PRODUCT p);
void shFACTOR(FACTOR p);
void shEXPONENTIATION(EXPONENTIATION p);
void shPRIMARY(PRIMARY p);
void shARITH_VAR(ARITH_VAR p);
void shPRE_PRIMARY(PRE_PRIMARY p);
void shNUMBER(NUMBER p);
void shLEVEL(LEVEL p);
void shCOMPOUND_NUMBER(COMPOUND_NUMBER p);
void shSIMPLE_NUMBER(SIMPLE_NUMBER p);
void shMODIFIED_ARITH_FUNC(MODIFIED_ARITH_FUNC p);
void shSHAPING_HEAD(SHAPING_HEAD p);
void shCALL_LIST(CALL_LIST p);
void shLIST_EXP(LIST_EXP p);
void shEXPRESSION(EXPRESSION p);
void shARITH_ID(ARITH_ID p);
void shNO_ARG_ARITH_FUNC(NO_ARG_ARITH_FUNC p);
void shARITH_FUNC(ARITH_FUNC p);
void shBIT_FUNC(BIT_FUNC p);
void shSUBSCRIPT(SUBSCRIPT p);
void shQUALIFIER(QUALIFIER p);
void shSCALE_HEAD(SCALE_HEAD p);
void shPREC_SPEC(PREC_SPEC p);
void shSUB_START(SUB_START p);
void shSUB_HEAD(SUB_HEAD p);
void shSUB(SUB p);
void shSUB_RUN_HEAD(SUB_RUN_HEAD p);
void shSUB_EXP(SUB_EXP p);
void shPOUND_EXPRESSION(POUND_EXPRESSION p);
void shBIT_EXP(BIT_EXP p);
void shBIT_FACTOR(BIT_FACTOR p);
void shBIT_CAT(BIT_CAT p);
void shOR(OR p);
void shCHAR_VERTICAL_BAR(CHAR_VERTICAL_BAR p);
void shAND(AND p);
void shBIT_PRIM(BIT_PRIM p);
void shCAT(CAT p);
void shNOT(NOT p);
void shBIT_VAR(BIT_VAR p);
void shLABEL_VAR(LABEL_VAR p);
void shEVENT_VAR(EVENT_VAR p);
void shBIT_CONST_HEAD(BIT_CONST_HEAD p);
void shBIT_CONST(BIT_CONST p);
void shRADIX(RADIX p);
void shCHAR_STRING(CHAR_STRING p);
void shSUBBIT_HEAD(SUBBIT_HEAD p);
void shSUBBIT_KEY(SUBBIT_KEY p);
void shBIT_FUNC_HEAD(BIT_FUNC_HEAD p);
void shBIT_ID(BIT_ID p);
void shLABEL(LABEL p);
void shEVENT(EVENT p);
void shSUB_OR_QUALIFIER(SUB_OR_QUALIFIER p);
void shBIT_QUALIFIER(BIT_QUALIFIER p);
void shCHAR_EXP(CHAR_EXP p);
void shCHAR_PRIM(CHAR_PRIM p);
void shCHAR_FUNC_HEAD(CHAR_FUNC_HEAD p);
void shCHAR_VAR(CHAR_VAR p);
void shCHAR_CONST(CHAR_CONST p);
void shCHAR_FUNC(CHAR_FUNC p);
void shCHAR_ID(CHAR_ID p);
void shNAME_EXP(NAME_EXP p);
void shNAME_KEY(NAME_KEY p);
void shNAME_VAR(NAME_VAR p);
void shVARIABLE(VARIABLE p);
void shSTRUCTURE_EXP(STRUCTURE_EXP p);
void shSTRUCT_FUNC_HEAD(STRUCT_FUNC_HEAD p);
void shSTRUCTURE_VAR(STRUCTURE_VAR p);
void shSTRUCT_FUNC(STRUCT_FUNC p);
void shQUAL_STRUCT(QUAL_STRUCT p);
void shSTRUCTURE_ID(STRUCTURE_ID p);
void shASSIGNMENT(ASSIGNMENT p);
void shEQUALS(EQUALS p);
void shSTATEMENT(STATEMENT p);
void shBASIC_STATEMENT(BASIC_STATEMENT p);
void shOTHER_STATEMENT(OTHER_STATEMENT p);
void shIF_STATEMENT(IF_STATEMENT p);
void shIF_CLAUSE(IF_CLAUSE p);
void shTRUE_PART(TRUE_PART p);
void shIF(IF p);
void shTHEN(THEN p);
void shRELATIONAL_EXP(RELATIONAL_EXP p);
void shRELATIONAL_FACTOR(RELATIONAL_FACTOR p);
void shREL_PRIM(REL_PRIM p);
void shCOMPARISON(COMPARISON p);
void shANY_STATEMENT(ANY_STATEMENT p);
void shON_PHRASE(ON_PHRASE p);
void shON_CLAUSE(ON_CLAUSE p);
void shLABEL_DEFINITION(LABEL_DEFINITION p);
void shCALL_KEY(CALL_KEY p);
void shASSIGN(ASSIGN p);
void shCALL_ASSIGN_LIST(CALL_ASSIGN_LIST p);
void shDO_GROUP_HEAD(DO_GROUP_HEAD p);
void shENDING(ENDING p);
void shREAD_KEY(READ_KEY p);
void shWRITE_KEY(WRITE_KEY p);
void shREAD_PHRASE(READ_PHRASE p);
void shWRITE_PHRASE(WRITE_PHRASE p);
void shREAD_ARG(READ_ARG p);
void shWRITE_ARG(WRITE_ARG p);
void shFILE_EXP(FILE_EXP p);
void shFILE_HEAD(FILE_HEAD p);
void shIO_CONTROL(IO_CONTROL p);
void shWAIT_KEY(WAIT_KEY p);
void shTERMINATOR(TERMINATOR p);
void shTERMINATE_LIST(TERMINATE_LIST p);
void shSCHEDULE_HEAD(SCHEDULE_HEAD p);
void shSCHEDULE_PHRASE(SCHEDULE_PHRASE p);
void shSCHEDULE_CONTROL(SCHEDULE_CONTROL p);
void shTIMING(TIMING p);
void shREPEAT(REPEAT p);
void shSTOPPING(STOPPING p);
void shSIGNAL_CLAUSE(SIGNAL_CLAUSE p);
void shPERCENT_MACRO_NAME(PERCENT_MACRO_NAME p);
void shPERCENT_MACRO_HEAD(PERCENT_MACRO_HEAD p);
void shPERCENT_MACRO_ARG(PERCENT_MACRO_ARG p);
void shCASE_ELSE(CASE_ELSE p);
void shWHILE_KEY(WHILE_KEY p);
void shWHILE_CLAUSE(WHILE_CLAUSE p);
void shFOR_LIST(FOR_LIST p);
void shITERATION_BODY(ITERATION_BODY p);
void shITERATION_CONTROL(ITERATION_CONTROL p);
void shFOR_KEY(FOR_KEY p);
void shTEMPORARY_STMT(TEMPORARY_STMT p);
void shCONSTANT(CONSTANT p);
void shARRAY_HEAD(ARRAY_HEAD p);
void shMINOR_ATTR_LIST(MINOR_ATTR_LIST p);
void shMINOR_ATTRIBUTE(MINOR_ATTRIBUTE p);
void shINIT_OR_CONST_HEAD(INIT_OR_CONST_HEAD p);
void shREPEATED_CONSTANT(REPEATED_CONSTANT p);
void shREPEAT_HEAD(REPEAT_HEAD p);
void shNESTED_REPEAT_HEAD(NESTED_REPEAT_HEAD p);
void shDCL_LIST_COMMA(DCL_LIST_COMMA p);
void shLITERAL_EXP_OR_STAR(LITERAL_EXP_OR_STAR p);
void shTYPE_SPEC(TYPE_SPEC p);
void shBIT_SPEC(BIT_SPEC p);
void shCHAR_SPEC(CHAR_SPEC p);
void shSTRUCT_SPEC(STRUCT_SPEC p);
void shSTRUCT_SPEC_BODY(STRUCT_SPEC_BODY p);
void shSTRUCT_TEMPLATE(STRUCT_TEMPLATE p);
void shSTRUCT_SPEC_HEAD(STRUCT_SPEC_HEAD p);
void shARITH_SPEC(ARITH_SPEC p);
void shCOMPILATION(COMPILATION p);
void shBLOCK_DEFINITION(BLOCK_DEFINITION p);
void shBLOCK_STMT(BLOCK_STMT p);
void shBLOCK_STMT_TOP(BLOCK_STMT_TOP p);
void shBLOCK_STMT_HEAD(BLOCK_STMT_HEAD p);
void shLABEL_EXTERNAL(LABEL_EXTERNAL p);
void shCLOSING(CLOSING p);
void shBLOCK_BODY(BLOCK_BODY p);
void shFUNCTION_NAME(FUNCTION_NAME p);
void shPROCEDURE_NAME(PROCEDURE_NAME p);
void shFUNC_STMT_BODY(FUNC_STMT_BODY p);
void shPROC_STMT_BODY(PROC_STMT_BODY p);
void shDECLARE_GROUP(DECLARE_GROUP p);
void shDECLARE_ELEMENT(DECLARE_ELEMENT p);
void shPARAMETER(PARAMETER p);
void shPARAMETER_LIST(PARAMETER_LIST p);
void shPARAMETER_HEAD(PARAMETER_HEAD p);
void shDECLARE_STATEMENT(DECLARE_STATEMENT p);
void shASSIGN_LIST(ASSIGN_LIST p);
void shTEXT(TEXT p);
void shREPLACE_STMT(REPLACE_STMT p);
void shREPLACE_HEAD(REPLACE_HEAD p);
void shARG_LIST(ARG_LIST p);
void shSTRUCTURE_STMT(STRUCTURE_STMT p);
void shSTRUCT_STMT_HEAD(STRUCT_STMT_HEAD p);
void shSTRUCT_STMT_TAIL(STRUCT_STMT_TAIL p);
void shINLINE_DEFINITION(INLINE_DEFINITION p);
void shARITH_INLINE(ARITH_INLINE p);
void shARITH_INLINE_DEF(ARITH_INLINE_DEF p);
void shBIT_INLINE(BIT_INLINE p);
void shBIT_INLINE_DEF(BIT_INLINE_DEF p);
void shCHAR_INLINE(CHAR_INLINE p);
void shCHAR_INLINE_DEF(CHAR_INLINE_DEF p);
void shSTRUC_INLINE_DEF(STRUC_INLINE_DEF p);

void ppNeqToken(String s, int i);
void ppLeToken(String s, int i);
void ppGeToken(String s, int i);
void ppNoArgUserFuncIdentifierToken(String s, int i);
void ppBitIdentifierToken(String s, int i);
void ppBitFunctionIdentifierToken(String s, int i);
void ppCharFunctionIdentifierToken(String s, int i);
void ppCharIdentifierToken(String s, int i);
void ppStructIdentifierToken(String s, int i);
void ppStructFunctionIdentifierToken(String s, int i);
void ppLabelToken(String s, int i);
void ppEventToken(String s, int i);
void ppArithFieldToken(String s, int i);
void ppIdentifierToken(String s, int i);
void ppStringToken(String s, int i);
void ppTextToken(String s, int i);
void ppLevelToken(String s, int i);
void ppNumberToken(String s, int i);
void ppCompoundToken(String s, int i);
void shNeqToken(String s);
void shLeToken(String s);
void shGeToken(String s);
void shNoArgUserFuncIdentifierToken(String s);
void shBitIdentifierToken(String s);
void shBitFunctionIdentifierToken(String s);
void shCharFunctionIdentifierToken(String s);
void shCharIdentifierToken(String s);
void shStructIdentifierToken(String s);
void shStructFunctionIdentifierToken(String s);
void shLabelToken(String s);
void shEventToken(String s);
void shArithFieldToken(String s);
void shIdentifierToken(String s);
void shStringToken(String s);
void shTextToken(String s);
void shLevelToken(String s);
void shNumberToken(String s);
void shCompoundToken(String s);
void ppInteger(Integer n, int i);
void ppDouble(Double d, int i);
void ppChar(Char c, int i);
void ppString(String s, int i);
void ppIdent(String s, int i);
void shInteger(Integer n);
void shDouble(Double d);
void shChar(Char c);
void shString(String s);
void shIdent(String s);
void bufAppendS(const char *s);
void bufAppendC(const char c);
void bufReset(void);
void resizeBuffer(void);

#endif

