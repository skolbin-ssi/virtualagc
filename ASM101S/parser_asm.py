#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname # noqa
from tatsu.infos import ParserConfig
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class asmBuffer(Buffer):
    def __init__(self, text, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re=None,
            eol_comments_re='@g@a@r@b@a@g@e@',
            ignorecase=False,
            namechars='',
            parseinfo=True,
        )
        config = config.replace(**settings)
        super().__init__(text, config=config)


class asmParser(Parser):
    def __init__(self, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re=None,
            eol_comments_re='@g@a@r@b@a@g@e@',
            ignorecase=False,
            namechars='',
            parseinfo=True,
            keywords=KEYWORDS,
            start='operandPrototype0',
        )
        config = config.replace(**settings)
        super().__init__(config=config)

    @tatsumasu()
    def _operandPrototype0_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._parameter_()

                    def block2():
                        self._token(',')
                        self._parameter_()
                    self._closure(block2)
                    self._pattern(' ')
                self.add_last_node_to_name('end0')
            with self._option():
                with self._group():
                    self._parameter_()

                    def block4():
                        self._token(',')
                        self._parameter_()
                    self._closure(block4)
                    self._token(',')
                    self._pattern(' ')
                self.add_last_node_to_name('end1')
            with self._option():
                with self._group():
                    self._parameter_()

                    def block6():
                        self._token(',')
                        self._parameter_()
                    self._closure(block6)
                    with self._optional():
                        self._token(',')
                        with self._optional():
                            self._token('&')
                self.add_last_node_to_name('end2')
                self._check_eof()

                self._define(
                    [],
                    ['end2']
                )
            with self._option():
                with self._group():
                    self._pattern(' *')
                self.add_last_node_to_name('end3')
                self._check_eof()

                self._define(
                    [],
                    ['end3']
                )
            self._error(
                'expecting one of: '
                ' * <parameter> <sv>'
            )

    @tatsumasu()
    def _operandInvocation0_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._replacement_()

                    def block2():
                        self._token(',')
                        self._replacement_()
                    self._closure(block2)
                    self._pattern(' ')
                self.add_last_node_to_name('end0')
            with self._option():
                with self._group():
                    self._replacement_()

                    def block4():
                        self._token(',')
                        self._replacement_()
                    self._closure(block4)
                    with self._optional():
                        self._token(',')
                        with self._optional():
                            self._token("'")
                            self._pattern("[^']*")
                self.add_last_node_to_name('end2')
                self._check_eof()

                self._define(
                    [],
                    ['end2']
                )
            with self._option():
                with self._group():
                    self._pattern(' *')
                self.add_last_node_to_name('end3')
                self._check_eof()

                self._define(
                    [],
                    ['end3']
                )
            with self._option():
                with self._group():
                    self._pattern('[^ ]+')
                    self._pattern(' *')
                self.add_last_node_to_name('end4')
                self._check_eof()

                self._define(
                    [],
                    ['end4']
                )
            self._error(
                'expecting one of: '
                '   * "\'" \'(\' \',\''
                '(?<![@#$A-Z0-9&])[@#$A-Z][@#$A-Z0-9]*'
                '<char> <identifier> <quotedString>'
                '<replacement> <substringExpression>'
                '[0-9]+ [^ ]+ [^, ()]*'
            )

    @tatsumasu()
    def _operandPrototype_(self):  # noqa
        with self._choice():
            with self._option():
                self._parameter_()
                self.add_last_node_to_name('pi')

                def block2():
                    self._token(',')
                    self._parameter_()
                    self.add_last_node_to_name('pi')

                    self._define(
                        [],
                        ['pi']
                    )
                self._closure(block2)
                self._pattern(' ')

                self._define(
                    [],
                    ['pi']
                )
            with self._option():
                self._parameter_()
                self.add_last_node_to_name('pi')

                def block5():
                    self._token(',')
                    self._parameter_()
                    self.add_last_node_to_name('pi')

                    self._define(
                        [],
                        ['pi']
                    )
                self._closure(block5)
                self._check_eof()

                self._define(
                    [],
                    ['pi']
                )
            with self._option():
                self._check_eof()
            self._error(
                'expecting one of: '
                '<parameter> <sv>'
            )

    @tatsumasu()
    def _operandInvocation_(self):  # noqa
        with self._optional():
            self._replacement_()
            self.add_last_node_to_name('pi')

            def block1():
                self._token(',')
                self._replacement_()
                self.add_last_node_to_name('pi')

                self._define(
                    [],
                    ['pi']
                )
            self._closure(block1)

            self._define(
                [],
                ['pi']
            )

    @tatsumasu()
    def _nameCode_(self):  # noqa
        with self._choice():
            with self._option():
                self._variable_()
                self.add_last_node_to_name('sv')
            with self._option():
                self._identifier_()
                self.add_last_node_to_name('id')
            self._error(
                'expecting one of: '
                '(?<![@#$A-Z0-9&])[@#$A-Z][@#$A-Z0-9]*'
                '<identifier> <subvar> <variable>'
            )

    @tatsumasu()
    def _nameSet_(self):  # noqa
        with self._choice():
            with self._option():
                self._sv_()
                self.add_last_node_to_name('sv')
                self._check_eof()

                self._define(
                    [],
                    ['sv']
                )
            with self._option():
                self._sv_()
                self.add_last_node_to_name('sv')
                self._token('(')
                self._arithmeticExpression_()
                self.add_last_node_to_name('exp')
                self._token(')')
                self._check_eof()

                self._define(
                    [],
                    ['exp', 'sv']
                )
            self._error(
                'expecting one of: '
                '&[@#$A-Z][@#$A-Z0-9]* <sv>'
            )

    @tatsumasu()
    def _nameSet0_(self):  # noqa
        with self._choice():
            with self._option():
                self._sv_()
                self.add_last_node_to_name('sv')
                self._token('(')
                self._arithmeticExpression_()
                self.add_last_node_to_name('exp')
                self._token(')')

                self._define(
                    [],
                    ['exp', 'sv']
                )
            with self._option():
                self._sv_()
                self.add_last_node_to_name('sv')
            self._error(
                'expecting one of: '
                '&[@#$A-Z][@#$A-Z0-9]* <sv>'
            )

    @tatsumasu()
    def _nameMacrodef_(self):  # noqa
        with self._choice():
            with self._option():
                self._sequenceSymbol_()
                self._check_eof()
            with self._option():
                self._subName_()

                def block1():
                    self._token('.')
                    self._subName_()
                self._closure(block1)
                self._check_eof()
            self._error(
                'expecting one of: '
                '<identifier> <sequenceSymbol> <subName>'
                '<variable> [.][@#$A-Z][@#$A-Z0-9]*'
            )

    @tatsumasu()
    def _subName_(self):  # noqa
        with self._choice():
            with self._option():
                self._variable_()
            with self._option():
                self._identifier_()
            self._error(
                'expecting one of: '
                '(?<![@#$A-Z0-9&])[@#$A-Z][@#$A-Z0-9]*'
                '<identifier> <subvar> <variable>'
            )

    @tatsumasu()
    def _operationAll_(self):  # noqa
        self._subOperation_()

        def block0():
            self._token('.')
            self._subOperation_()
        self._closure(block0)
        self._check_eof()

    @tatsumasu()
    def _subOperation_(self):  # noqa
        with self._choice():
            with self._option():
                self._variable_()
            with self._option():
                self._identifier_()
            self._error(
                'expecting one of: '
                '(?<![@#$A-Z0-9&])[@#$A-Z][@#$A-Z0-9]*'
                '<identifier> <subvar> <variable>'
            )

    @tatsumasu()
    def _rrAll_(self):  # noqa
        with self._optional():
            self._arithmeticExpression_()
            self.add_last_node_to_name('R1')
            self._token(',')

            self._define(
                [],
                ['R1']
            )
        self._arithmeticExpression_()
        self.add_last_node_to_name('R2')
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(' ')
                with self._option():
                    self._check_eof()
                self._error(
                    'expecting one of: '
                )

        self._define(
            [],
            ['R1', 'R2']
        )

    @tatsumasu()
    def _lfxiAll_(self):  # noqa
        with self._optional():
            self._register_()
            self.add_last_node_to_name('R1')
            self._token(',')

            self._define(
                [],
                ['R1']
            )
        with self._group():
            with self._choice():
                with self._option():
                    self._token('-2')
                with self._option():
                    self._token('-1')
                with self._option():
                    self._register_()
                self._error(
                    'expecting one of: '
                    "'-1' '-2' <register>"
                )
        self.add_last_node_to_name('R2')
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(' ')
                with self._option():
                    self._check_eof()
                self._error(
                    'expecting one of: '
                )

        self._define(
            [],
            ['R1', 'R2']
        )

    @tatsumasu()
    def _rsAll_(self):  # noqa
        with self._choice():
            with self._option():
                with self._optional():
                    self._register_()
                    self.add_last_node_to_name('R1')
                    self._token(',')

                    self._define(
                        [],
                        ['R1']
                    )
                self._token('=')
                self._lconstant_()
                self.add_last_node_to_name('L2')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern(' ')
                        with self._option():
                            self._check_eof()
                        self._error(
                            'expecting one of: '
                        )

                self._define(
                    [],
                    ['L2', 'R1']
                )
            with self._option():
                with self._optional():
                    self._register_()
                    self.add_last_node_to_name('R1')
                    self._token(',')

                    self._define(
                        [],
                        ['R1']
                    )
                self._arithmeticExpression_()
                self.add_last_node_to_name('D2')
                self._token('(')
                self._register_()
                self.add_last_node_to_name('B2')
                self._token(')')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern(' ')
                        with self._option():
                            self._check_eof()
                        self._error(
                            'expecting one of: '
                        )

                self._define(
                    [],
                    ['B2', 'D2', 'R1']
                )
            with self._option():
                with self._optional():
                    self._register_()
                    self.add_last_node_to_name('R1')
                    self._token(',')

                    self._define(
                        [],
                        ['R1']
                    )
                self._arithmeticExpression_()
                self.add_last_node_to_name('D2')
                self._token('(')
                self._register_()
                self.add_last_node_to_name('X2')
                self._token(',')
                self._register_()
                self.add_last_node_to_name('B2')
                self._token(')')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern(' ')
                        with self._option():
                            self._check_eof()
                        self._error(
                            'expecting one of: '
                        )

                self._define(
                    [],
                    ['B2', 'D2', 'R1', 'X2']
                )
            with self._option():
                with self._optional():
                    self._register_()
                    self.add_last_node_to_name('R1')
                    self._token(',')

                    self._define(
                        [],
                        ['R1']
                    )
                self._arithmeticExpression_()
                self.add_last_node_to_name('D2')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern(' ')
                        with self._option():
                            self._check_eof()
                        self._error(
                            'expecting one of: '
                        )

                self._define(
                    [],
                    ['D2', 'R1']
                )
            self._error(
                'expecting one of: '
                '"B\'" "L\'" "X\'" \'*\' \'=\''
                '(?<![@#$A-Z0-9&])[@#$A-Z][@#$A-Z0-9]*'
                '-?[0-9]+ <arithmeticExpression>'
                '<constant> <identifier> <register>'
                '<subvar> <term> <variable>'
            )

    @tatsumasu()
    def _riAll_(self):  # noqa
        self._register_()
        self.add_last_node_to_name('R2')
        self._token(',')
        self._arithmeticExpression_()
        self.add_last_node_to_name('I1')
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(' ')
                with self._option():
                    self._check_eof()
                self._error(
                    'expecting one of: '
                )

        self._define(
            [],
            ['I1', 'R2']
        )

    @tatsumasu()
    def _siAll_(self):  # noqa
        with self._choice():
            with self._option():
                self._arithmeticExpression_()
                self.add_last_node_to_name('D2')
                self._token('(')
                self._register_()
                self.add_last_node_to_name('B2')
                self._token('),')
                self._arithmeticExpression_()
                self.add_last_node_to_name('I1')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern(' ')
                        with self._option():
                            self._check_eof()
                        self._error(
                            'expecting one of: '
                        )

                self._define(
                    [],
                    ['B2', 'D2', 'I1']
                )
            with self._option():
                self._arithmeticExpression_()
                self.add_last_node_to_name('D2')
                self._token(',')
                self._arithmeticExpression_()
                self.add_last_node_to_name('I1')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern(' ')
                        with self._option():
                            self._check_eof()
                        self._error(
                            'expecting one of: '
                        )

                self._define(
                    [],
                    ['D2', 'I1']
                )
            self._error(
                'expecting one of: '
                '<arithmeticExpression> <term>'
            )

    @tatsumasu()
    def _mscAll_(self):  # noqa
        with self._choice():
            with self._option():
                self._constant_()
                self._token(',')
                self._identifier_()
                self._token('(')
                self._constant_()
                self._token(')')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern(' ')
                        with self._option():
                            self._check_eof()
                        self._error(
                            'expecting one of: '
                        )
            with self._option():
                self._constant_()
                self._token(',')
                self._identifier_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern(' ')
                        with self._option():
                            self._check_eof()
                        self._error(
                            'expecting one of: '
                        )
            with self._option():
                self._arithmeticExpression_()
                self._token('(')
                self._constant_()
                self._token(')')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern(' ')
                        with self._option():
                            self._check_eof()
                        self._error(
                            'expecting one of: '
                        )
            with self._option():
                self._arithmeticExpression_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern(' ')
                        with self._option():
                            self._check_eof()
                        self._error(
                            'expecting one of: '
                        )
            self._error(
                'expecting one of: '
                '"B\'" "L\'" "X\'" \'*\' -?[0-9]+'
                '<arithmeticExpression> <constant> <term>'
            )

    @tatsumasu()
    def _bceAll_(self):  # noqa
        with self._choice():
            with self._option():
                self._arithmeticExpression_()
                self._token('(')
                self._constant_()
                self._token(')')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern(' ')
                        with self._option():
                            self._check_eof()
                        self._error(
                            'expecting one of: '
                        )
            with self._option():
                self._arithmeticExpression_()
                self._token(',')
                self._arithmeticExpression_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern(' ')
                        with self._option():
                            self._check_eof()
                        self._error(
                            'expecting one of: '
                        )
            with self._option():
                self._arithmeticExpression_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern(' ')
                        with self._option():
                            self._check_eof()
                        self._error(
                            'expecting one of: '
                        )
            self._error(
                'expecting one of: '
                '<arithmeticExpression> <term>'
            )

    @tatsumasu()
    def _aifAll_(self):  # noqa
        self._token('(')
        self._booleanExpression_()
        self._token(')')
        self._sequenceSymbol_()

    @tatsumasu()
    def _quotedString_(self):  # noqa
        self._token("'")
        self._pattern("[^']*")

        def block0():
            self._token("''")
            self._pattern("[^']*")
        self._closure(block0)
        self._token("'")

    @tatsumasu()
    def _identifier_(self):  # noqa
        self._pattern('(?<![@#$A-Z0-9&])[@#$A-Z][@#$A-Z0-9]*')

    @tatsumasu()
    def _variable_(self):  # noqa
        with self._choice():
            with self._option():
                self._subvar_()
                self._variable_()
            with self._option():
                self._subvar_()
                self._token('.')
                self._variable_()
            with self._option():
                self._subvar_()
                self._token('(')
                self._arithmeticExpression_()
                self._token(')')
            with self._option():
                self._subvar_()
            self._error(
                'expecting one of: '
                '<subvar> <sv>'
            )

    @tatsumasu()
    def _subvar_(self):  # noqa
        self._sv_()

    @tatsumasu()
    def _sequenceSymbol_(self):  # noqa
        self._pattern('[.][@#$A-Z][@#$A-Z0-9]*')

    @tatsumasu()
    def _constant_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('-?[0-9]+')
            with self._option():
                self._token("X'")
                self._pattern('[0-9A-F]+')
                self._token("'")
            with self._option():
                self._token("B'")
                self._pattern('[0-1]+')
                self._token("'")
            with self._option():
                self._token("L'")
                self._identifier_()
            with self._option():
                self._token('*')
            self._error(
                'expecting one of: '
                '"B\'" "L\'" "X\'" \'*\' -?[0-9]+'
            )

    @tatsumasu()
    def _lconstant_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('C')
                self.add_last_node_to_name('T')
                with self._optional():
                    self._token('L')
                    self._pattern('[0-9]+')
                    self.add_last_node_to_name('L')

                    self._define(
                        [],
                        ['L']
                    )
                self._token("'")
                with self._group():
                    self._pattern("[^']*")

                    def block4():
                        self._token("''")
                        self._pattern("[^']*")
                    self._closure(block4)
                self.add_last_node_to_name('C')
                self._token("'")

                self._define(
                    [],
                    ['C', 'L', 'T']
                )
            with self._option():
                self._pattern('X')
                self.add_last_node_to_name('T')
                with self._optional():
                    self._token('L')
                    self._pattern('[0-9]+')
                    self.add_last_node_to_name('L')

                    self._define(
                        [],
                        ['L']
                    )
                self._token("'")
                self._pattern('[0-9A-F]+')
                self.add_last_node_to_name('X')
                self._token("'")

                self._define(
                    [],
                    ['L', 'T', 'X']
                )
            with self._option():
                self._pattern('B')
                self.add_last_node_to_name('T')
                with self._optional():
                    self._token('L')
                    self._pattern('[0-9]+')
                    self.add_last_node_to_name('L')

                    self._define(
                        [],
                        ['L']
                    )
                self._token("'")
                self._pattern('[0-1]+')
                self.add_last_node_to_name('B')
                self._token("'")

                self._define(
                    [],
                    ['B', 'L', 'T']
                )
            with self._option():
                self._pattern('F')
                self.add_last_node_to_name('T')
                with self._optional():
                    self._token('L')
                    self._pattern('[0-9]+')
                    self.add_last_node_to_name('L')

                    self._define(
                        [],
                        ['L']
                    )
                with self._optional():
                    self._token('S')
                    self._pattern('-?[0-9]+')
                    self.add_last_node_to_name('S')

                    self._define(
                        [],
                        ['S']
                    )
                self._token("'")
                self._floatNumber_()
                self.add_last_node_to_name('F')
                self._token("'")

                self._define(
                    [],
                    ['F', 'L', 'S', 'T']
                )
            with self._option():
                self._pattern('H')
                self.add_last_node_to_name('T')
                with self._optional():
                    self._token('L')
                    self._pattern('[0-9]+')
                    self.add_last_node_to_name('L')

                    self._define(
                        [],
                        ['L']
                    )
                with self._optional():
                    self._token('S')
                    self._pattern('-?[0-9]+')
                    self.add_last_node_to_name('S')

                    self._define(
                        [],
                        ['S']
                    )
                self._token("'")
                self._floatNumber_()
                self.add_last_node_to_name('H')
                self._token("'")

                self._define(
                    [],
                    ['H', 'L', 'S', 'T']
                )
            with self._option():
                self._pattern('E')
                self.add_last_node_to_name('T')
                with self._optional():
                    self._token('L')
                    self._pattern('[0-9]+')
                    self.add_last_node_to_name('L')

                    self._define(
                        [],
                        ['L']
                    )
                with self._optional():
                    self._token('S')
                    self._pattern('-?[0-9]+')
                    self.add_last_node_to_name('S')

                    self._define(
                        [],
                        ['S']
                    )
                self._token("'")
                self._floatNumber_()
                self.add_last_node_to_name('E')
                self._token("'")

                self._define(
                    [],
                    ['E', 'L', 'S', 'T']
                )
            with self._option():
                self._pattern('D')
                self.add_last_node_to_name('T')
                with self._optional():
                    self._token('L')
                    self._pattern('[0-9]+')
                    self.add_last_node_to_name('L')

                    self._define(
                        [],
                        ['L']
                    )
                with self._optional():
                    self._token('S')
                    self._pattern('-?[0-9]+')
                    self.add_last_node_to_name('S')

                    self._define(
                        [],
                        ['S']
                    )
                self._token("'")
                self._floatNumber_()
                self.add_last_node_to_name('D')
                self._token("'")

                self._define(
                    [],
                    ['D', 'L', 'S', 'T']
                )
            with self._option():
                self._pattern('Y')
                self.add_last_node_to_name('T')
                with self._optional():
                    self._token('L')
                    self._pattern('[0-9]+')
                    self.add_last_node_to_name('L')

                    self._define(
                        [],
                        ['L']
                    )
                self._token('(')
                self._identifier_()
                self.add_last_node_to_name('T')
                self._token(')')

                self._define(
                    [],
                    ['L', 'T']
                )
            with self._option():
                self._pattern('Z')
                self.add_last_node_to_name('T')
                with self._optional():
                    self._token('L')
                    self._pattern('[0-9]+')
                    self.add_last_node_to_name('L')

                    self._define(
                        [],
                        ['L']
                    )
                self._token('(')
                self._token(',')
                self._arithmeticExpression_()
                self.add_last_node_to_name('A1')
                self._token(',')
                self._arithmeticExpression_()
                self.add_last_node_to_name('A2')
                self._token(')')

                self._define(
                    [],
                    ['A1', 'A2', 'L', 'T']
                )
            self._error(
                'expecting one of: '
                'B C D E F H X Y Z'
            )

    @tatsumasu()
    def _char_(self):  # noqa
        with self._choice():
            with self._option():
                self._substringExpression_()
            with self._option():
                self._quotedString_()
            self._error(
                'expecting one of: '
                '"\'" <quotedString> <substringExpression>'
            )

    @tatsumasu()
    def _substringExpression_(self):  # noqa
        self._quotedString_()
        self._token('(')
        self._arithmeticExpression_()
        self._token(',')
        self._arithmeticExpression_()
        self._token(')')

    @tatsumasu()
    def _sdTerm_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('[0-9]+')
            with self._option():
                self._token("X'")
                self._pattern('[0-9A-F]+')
                self._token("'")
            with self._option():
                self._token("B'")
                self._pattern('[0-1]+')
                self._token("'")
            with self._option():
                self._token('C')
                self._char_()
            self._error(
                'expecting one of: '
                '"B\'" "X\'" \'C\' [0-9]+'
            )

    @tatsumasu()
    def _dcOperands_(self):  # noqa
        self._dcOperand_()

        def block0():
            self._token(',')
            self._dcOperand_()
        self._closure(block0)
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(' ')
                with self._option():
                    self._check_eof()
                self._error(
                    'expecting one of: '
                )

    @tatsumasu()
    def _dcOperand_(self):  # noqa
        with self._choice():
            with self._option():
                with self._optional():
                    self._number_()
                    self.add_last_node_to_name('d')
                self._token('C')
                self.add_last_node_to_name('t')
                with self._optional():
                    self._len_()
                    self.add_last_node_to_name('l')
                self._quotedString_()
                self.add_last_node_to_name('v')

                self._define(
                    [],
                    ['d', 'l', 't', 'v']
                )
            with self._option():
                with self._optional():
                    self._number_()
                    self.add_last_node_to_name('d')
                self._token('X')
                self.add_last_node_to_name('t')
                with self._optional():
                    self._len_()
                    self.add_last_node_to_name('l')
                self._quotedHexString_()
                self.add_last_node_to_name('v')

                self._define(
                    [],
                    ['d', 'l', 't', 'v']
                )
            with self._option():
                with self._optional():
                    self._number_()
                    self.add_last_node_to_name('d')
                self._token('B')
                self.add_last_node_to_name('t')
                with self._optional():
                    self._len_()
                    self.add_last_node_to_name('l')
                self._quotedBinaryString_()
                self.add_last_node_to_name('v')

                self._define(
                    [],
                    ['d', 'l', 't', 'v']
                )
            with self._option():
                with self._optional():
                    self._number_()
                    self.add_last_node_to_name('d')
                self._pattern('[FHED]')
                self.add_last_node_to_name('t')
                with self._optional():
                    self._len_()
                    self.add_last_node_to_name('l')
                self._quotedFloatList_()
                self.add_last_node_to_name('v')

                self._define(
                    [],
                    ['d', 'l', 't', 'v']
                )
            with self._option():
                with self._optional():
                    self._number_()
                    self.add_last_node_to_name('d')
                self._pattern('[AY]')
                self.add_last_node_to_name('t')
                with self._optional():
                    self._len_()
                    self.add_last_node_to_name('l')
                self._addresses_()
                self.add_last_node_to_name('v')

                self._define(
                    [],
                    ['d', 'l', 't', 'v']
                )
            self._error(
                'expecting one of: '
                "'(' 'B' 'C' 'X' <number> [0-9]+ [AY]"
                '[FHED]'
            )

    @tatsumasu()
    def _dsOperands_(self):  # noqa
        self._dsOperand_()

        def block0():
            self._token(',')
            self._dsOperand_()
        self._closure(block0)
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(' ')
                with self._option():
                    self._check_eof()
                self._error(
                    'expecting one of: '
                )

    @tatsumasu()
    def _dsOperand_(self):  # noqa
        with self._choice():
            with self._option():
                with self._optional():
                    self._number_()
                    self.add_last_node_to_name('d')
                self._token('C')
                self.add_last_node_to_name('t')
                with self._optional():
                    self._len_()
                    self.add_last_node_to_name('l')
                with self._optional():
                    self._quotedString_()
                    self.add_last_node_to_name('v')

                self._define(
                    [],
                    ['d', 'l', 't', 'v']
                )
            with self._option():
                with self._optional():
                    self._number_()
                    self.add_last_node_to_name('d')
                self._token('X')
                self.add_last_node_to_name('t')
                with self._optional():
                    self._len_()
                    self.add_last_node_to_name('l')
                with self._optional():
                    self._quotedHexString_()
                    self.add_last_node_to_name('v')

                self._define(
                    [],
                    ['d', 'l', 't', 'v']
                )
            with self._option():
                with self._optional():
                    self._number_()
                    self.add_last_node_to_name('d')
                self._token('B')
                self.add_last_node_to_name('t')
                with self._optional():
                    self._len_()
                    self.add_last_node_to_name('l')
                with self._optional():
                    self._quotedBinaryString_()
                    self.add_last_node_to_name('v')

                self._define(
                    [],
                    ['d', 'l', 't', 'v']
                )
            with self._option():
                with self._optional():
                    self._number_()
                    self.add_last_node_to_name('d')
                self._pattern('[FHED]')
                self.add_last_node_to_name('t')
                with self._optional():
                    self._len_()
                    self.add_last_node_to_name('l')
                with self._optional():
                    self._quotedFloatList_()
                    self.add_last_node_to_name('v')

                self._define(
                    [],
                    ['d', 'l', 't', 'v']
                )
            with self._option():
                with self._optional():
                    self._number_()
                    self.add_last_node_to_name('d')
                self._pattern('[AY]')
                self.add_last_node_to_name('t')
                with self._optional():
                    self._len_()
                    self.add_last_node_to_name('l')
                with self._optional():
                    self._addresses_()
                    self.add_last_node_to_name('v')

                self._define(
                    [],
                    ['d', 'l', 't', 'v']
                )
            self._error(
                'expecting one of: '
                "'(' 'B' 'C' 'X' <number> [0-9]+ [AY]"
                '[FHED]'
            )

    @tatsumasu()
    def _addresses_(self):  # noqa
        self._token('(')
        self._arithmeticExpression_()

        def block0():
            self._token(',')
            self._arithmeticExpression_()
        self._closure(block0)
        self._token(')')

    @tatsumasu()
    def _len_(self):  # noqa
        self._token('L')
        with self._optional():
            self._token('.')
        with self._optional():
            with self._choice():
                with self._option():
                    self._token('+')
                with self._option():
                    self._token('-')
                self._error(
                    'expecting one of: '
                    "'+' '-'"
                )
        self._number_()

    @tatsumasu()
    def _scale_(self):  # noqa
        self._token('S')
        with self._optional():
            with self._choice():
                with self._option():
                    self._token('+')
                with self._option():
                    self._token('-')
                self._error(
                    'expecting one of: '
                    "'+' '-'"
                )
        self._number_()

    @tatsumasu()
    def _exp_(self):  # noqa
        self._token('E')
        with self._optional():
            with self._choice():
                with self._option():
                    self._token('+')
                with self._option():
                    self._token('-')
                self._error(
                    'expecting one of: '
                    "'+' '-'"
                )
        self._number_()

    @tatsumasu()
    def _number_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern('[0-9]+')
                with self._option():
                    self._token('(')
                    self._arithmeticExpression_()
                    self._token(')')
                self._error(
                    'expecting one of: '
                    "'(' [0-9]+"
                )

    @tatsumasu()
    def _quotedHexString_(self):  # noqa
        self._token("'")
        self._pattern('[A-F0-9]+')
        self._token("'")

    @tatsumasu()
    def _quotedBinaryString_(self):  # noqa
        self._token("'")
        self._pattern('[01]+')
        self._token("'")

    @tatsumasu()
    def _quotedFloatList_(self):  # noqa
        self._token("'")
        self._floatNumber_()

        def block0():
            self._token(',')
            self._floatNumber_()
        self._closure(block0)
        self._token("'")

    @tatsumasu()
    def _floatNumber_(self):  # noqa
        with self._choice():
            with self._option():
                with self._optional():
                    self._pattern('[-+]')
                self._pattern('[0-9]+')
                with self._optional():
                    self._token('.')
                    self._pattern('[0-9]*')
                with self._optional():
                    self._token('E')
                    self._pattern('[-+]?[0-9]+')
            with self._option():
                with self._optional():
                    self._pattern('[-+]')
                self._token('.')
                self._pattern('[0-9]+')
                with self._optional():
                    self._token('E')
                    self._pattern('[-+]?[0-9]+')
            self._error(
                'expecting one of: '
                "'.' [-+] [0-9]+"
            )

    @tatsumasu()
    def _quotedFixedList_(self):  # noqa
        self._token("'")
        self._fixedNumber_()

        def block0():
            self._token(',')
            self._fixedNumber_()
        self._closure(block0)
        self._token("'")

    @tatsumasu()
    def _fixedNumber_(self):  # noqa
        with self._choice():
            with self._option():
                with self._optional():
                    self._pattern('[-+]')
                self._pattern('[0-9]+')
                with self._optional():
                    self._token('.')
                    self._pattern('[0-9]*')
            with self._option():
                with self._optional():
                    self._pattern('[-+]')
                self._token('.')
                self._pattern('[0-9]+')
            self._error(
                'expecting one of: '
                "'.' [-+] [0-9]+"
            )

    @tatsumasu()
    def _register_(self):  # noqa
        with self._choice():
            with self._option():
                self._constant_()
            with self._option():
                self._identifier_()
            with self._option():
                self._variable_()
            self._error(
                'expecting one of: '
                '"B\'" "L\'" "X\'" \'*\''
                '(?<![@#$A-Z0-9&])[@#$A-Z][@#$A-Z0-9]*'
                '-?[0-9]+ <constant> <identifier>'
                '<subvar> <sv> <variable>'
            )

    @tatsumasu()
    def _immediate_(self):  # noqa
        with self._choice():
            with self._option():
                self._constant_()
            with self._option():
                self._identifier_()
            with self._option():
                self._variable_()
            self._error(
                'expecting one of: '
                '"B\'" "L\'" "X\'" \'*\''
                '(?<![@#$A-Z0-9&])[@#$A-Z][@#$A-Z0-9]*'
                '-?[0-9]+ <constant> <identifier>'
                '<subvar> <sv> <variable>'
            )

    @tatsumasu()
    def _arithmeticExpressionOnly_(self):  # noqa
        self._arithmeticExpression_()
        self._check_eof()

    @tatsumasu()
    def _arithmeticExpression_(self):  # noqa
        self._term_()

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('+')
                    with self._option():
                        self._token('-')
                    self._error(
                        'expecting one of: '
                        "'+' '-'"
                    )
            self._term_()
        self._closure(block0)

    @tatsumasu()
    def _term_(self):  # noqa
        self._factor_()

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('*')
                    with self._option():
                        self._token('/')
                    self._error(
                        'expecting one of: '
                        "'*' '/'"
                    )
            self._factor_()
        self._closure(block0)

    @tatsumasu()
    def _factor_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern("[NKLSI]'")
                self._variable_()
            with self._option():
                self._constant_()
            with self._option():
                self._identifier_()
            with self._option():
                self._variable_()
            with self._option():
                self._token('(')
                self._arithmeticExpression_()
                self._token(')')
            with self._option():
                self._token('*')
            self._error(
                'expecting one of: '
                '"B\'" "L\'" "X\'" \'(\' \'*\''
                '(?<![@#$A-Z0-9&])[@#$A-Z][@#$A-Z0-9]*'
                '-?[0-9]+ <constant> <identifier>'
                "<subvar> <sv> <variable> [NKLSI]'"
            )

    @tatsumasu()
    def _booleanExpressionOnly_(self):  # noqa
        self._booleanExpression_()
        self._check_eof()

    @tatsumasu()
    def _booleanExpression_(self):  # noqa
        self._booleanTerm_()

        def block0():
            self._pattern(' *')
            self._token('OR')
            self._pattern(' *')
            self._booleanTerm_()
        self._closure(block0)

    @tatsumasu()
    def _booleanTerm_(self):  # noqa
        self._notFactor_()

        def block0():
            self._pattern(' *')
            self._token('AND')
            self._pattern(' *')
            self._notFactor_()
        self._closure(block0)

    @tatsumasu()
    def _notFactor_(self):  # noqa
        with self._optional():
            self._pattern(' *')
            self._token('NOT')
            self._pattern(' *')
        self._booleanFactor_()

    @tatsumasu()
    def _booleanFactor_(self):  # noqa
        with self._choice():
            with self._option():
                self._token("D'")
                self._identifier_()
            with self._option():
                self._token("D'")
                self._sv_()
            with self._option():
                self._relationalExpression_()
            with self._option():
                self._variable_()
            with self._option():
                self._token('(')
                self._booleanExpression_()
                self._token(')')
            with self._option():
                self._booleanLiteral_()
            self._error(
                'expecting one of: '
                '"D\'" \'(\' \'0\' \'1\' <arithmeticExpression>'
                '<booleanLiteral> <characterExpression>'
                '<relationalExpression> <subvar> <sv>'
                '<term> <variable>'
            )

    @tatsumasu()
    def _booleanLiteral_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('0')
            with self._option():
                self._token('1')
            self._error(
                'expecting one of: '
                "'0' '1'"
            )

    @tatsumasu()
    def _relationalExpression_(self):  # noqa
        with self._choice():
            with self._option():
                self._arithmeticExpression_()
                self._pattern(' *')
                self._relOp_()
                self._pattern(' *')
                self._arithmeticExpression_()
            with self._option():
                self._characterExpression_()
                self._pattern(' *')
                self._relOp_()
                self._pattern(' *')
                self._characterExpression_()
            self._error(
                'expecting one of: '
                '"\'" "T\'" <arithmeticExpression>'
                '<characterExpression> <factor>'
                '<quotedString> <term>'
            )

    @tatsumasu()
    def _relOp_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('EQ')
            with self._option():
                self._token('NE')
            with self._option():
                self._token('LT')
            with self._option():
                self._token('GT')
            with self._option():
                self._token('LE')
            with self._option():
                self._token('GE')
            self._error(
                'expecting one of: '
                "'EQ' 'GE' 'GT' 'LE' 'LT' 'NE'"
            )

    @tatsumasu()
    def _characterExpressionOnly_(self):  # noqa
        self._characterExpression_()
        self._check_eof()

    @tatsumasu()
    def _characterExpression_(self):  # noqa
        with self._choice():
            with self._option():
                self._quotedString_()
                with self._optional():
                    self._substringNotation_()

                def block1():
                    with self._optional():
                        self._token('.')
                    self._characterExpression_()
                self._closure(block1)
            with self._option():
                self._token("T'")
                self._identifier_()
            with self._option():
                self._token("T'")
                self._sv_()
            self._error(
                'expecting one of: '
                '"\'" "T\'" <quotedString>'
            )

    @tatsumasu()
    def _substringNotation_(self):  # noqa
        self._token('(')
        self._arithmeticExpression_()
        self._token(',')
        self._arithmeticExpression_()
        self._token(')')

    @tatsumasu()
    def _parameter_(self):  # noqa
        with self._choice():
            with self._option():
                self._sv_()
                self._token('=')
                self._pattern('[^, ]*')
            with self._option():
                self._sv_()
            self._error(
                'expecting one of: '
                '&[@#$A-Z][@#$A-Z0-9]* <sv>'
            )

    @tatsumasu()
    def _sv_(self):  # noqa
        self._pattern('&[@#$A-Z][@#$A-Z0-9]*')

    @tatsumasu()
    def _list_(self):  # noqa
        self._listItem_()

        def block0():
            self._token(',')
            self._listItem_()
        self._closure(block0)

    @tatsumasu()
    def _listItem_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('(')
                self._list_()
                self._token(')')
            with self._option():
                self._pattern('[^ ,()]*')
            self._error(
                'expecting one of: '
                "'(' [^ ,()]*"
            )

    @tatsumasu()
    def _replacement_(self):  # noqa
        with self._choice():
            with self._option():
                self._identifier_()
                self._token('=')
                self._token("'")
                self._pattern("[^']*")

                def block1():
                    self._token("''")
                    self._pattern('[^;]*')
                self._closure(block1)
                self._token("'")
            with self._option():
                self._identifier_()
                self._token('=')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern('[0-9]+')
                        with self._option():
                            self._identifier_()
                        self._error(
                            'expecting one of: '
                            '<identifier> [0-9]+'
                        )
                self._token('(')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern('[0-9]+')
                        with self._option():
                            self._identifier_()
                        self._error(
                            'expecting one of: '
                            '<identifier> [0-9]+'
                        )
                self._token(')')
            with self._option():
                self._identifier_()
                self._token('=')
                self._token('(')
                self._list_()
                self._token(')')
            with self._option():
                self._identifier_()
                self._token('=')
                self._pattern('[^, ()]*')
            with self._option():
                self._char_()
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern('[0-9]+')
                        with self._option():
                            self._identifier_()
                        self._error(
                            'expecting one of: '
                            '<identifier> [0-9]+'
                        )
                self._token('(')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._pattern('[0-9]+')
                        with self._option():
                            self._identifier_()
                        self._error(
                            'expecting one of: '
                            '<identifier> [0-9]+'
                        )
                self._token(')')
            with self._option():
                self._token('(')
                self._list_()
                self._token(')')
            with self._option():
                self._pattern('[^, ()]*')
            self._error(
                'expecting one of: '
                '"\'" \'(\''
                '(?<![@#$A-Z0-9&])[@#$A-Z][@#$A-Z0-9]*'
                '<char> <identifier> <quotedString>'
                '<substringExpression> [0-9]+ [^, ()]*'
            )

    @tatsumasu()
    def _mnote_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('[0-9]+')
                self.add_last_node_to_name('sev')
                self._token(',')
                self._quotedString_()
                self.add_last_node_to_name('msg')

                self._define(
                    [],
                    ['msg', 'sev']
                )
            with self._option():
                self._token('*')
                self.add_last_node_to_name('com')
                self._token(',')
                self._quotedString_()
                self.add_last_node_to_name('msg')

                self._define(
                    [],
                    ['com', 'msg']
                )
            with self._option():
                self._quotedString_()
                self.add_last_node_to_name('msg')
            self._error(
                'expecting one of: '
                '"\'" \'*\' <quotedString> [0-9]+'
            )

    @tatsumasu()
    def _identifierList_(self):  # noqa
        self._pidentifier_()

        def block0():
            self._token(',')
            self._pidentifier_()
        self._closure(block0)
        self._check_eof()

    @tatsumasu()
    def _pidentifier_(self):  # noqa
        self._pattern('[#@$A-Z][#@$A-Z0-9]*')

    @tatsumasu()
    def _anything_(self):  # noqa
        self._pattern('.*')
        self._check_eof()

    @tatsumasu()
    def _equOperand_(self):  # noqa
        self._arithmeticExpression_()
        self.add_last_node_to_name('v')
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(' ')
                with self._option():
                    self._check_eof()
                self._error(
                    'expecting one of: '
                )

        self._define(
            [],
            ['v']
        )

    @tatsumasu()
    def _expressions_(self):  # noqa
        self._arithmeticExpression_()
        self.add_last_node_to_name('r')

        def block1():
            self._token(',')
            self._arithmeticExpression_()
            self.add_last_node_to_name('r')

            self._define(
                [],
                ['r']
            )
        self._closure(block1)
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(' ')
                with self._option():
                    self._check_eof()
                self._error(
                    'expecting one of: '
                )

        self._define(
            [],
            ['r']
        )


class asmSemantics:
    def operandPrototype0(self, ast):  # noqa
        return ast

    def operandInvocation0(self, ast):  # noqa
        return ast

    def operandPrototype(self, ast):  # noqa
        return ast

    def operandInvocation(self, ast):  # noqa
        return ast

    def nameCode(self, ast):  # noqa
        return ast

    def nameSet(self, ast):  # noqa
        return ast

    def nameSet0(self, ast):  # noqa
        return ast

    def nameMacrodef(self, ast):  # noqa
        return ast

    def subName(self, ast):  # noqa
        return ast

    def operationAll(self, ast):  # noqa
        return ast

    def subOperation(self, ast):  # noqa
        return ast

    def rrAll(self, ast):  # noqa
        return ast

    def lfxiAll(self, ast):  # noqa
        return ast

    def rsAll(self, ast):  # noqa
        return ast

    def riAll(self, ast):  # noqa
        return ast

    def siAll(self, ast):  # noqa
        return ast

    def mscAll(self, ast):  # noqa
        return ast

    def bceAll(self, ast):  # noqa
        return ast

    def aifAll(self, ast):  # noqa
        return ast

    def quotedString(self, ast):  # noqa
        return ast

    def identifier(self, ast):  # noqa
        return ast

    def variable(self, ast):  # noqa
        return ast

    def subvar(self, ast):  # noqa
        return ast

    def sequenceSymbol(self, ast):  # noqa
        return ast

    def constant(self, ast):  # noqa
        return ast

    def lconstant(self, ast):  # noqa
        return ast

    def char(self, ast):  # noqa
        return ast

    def substringExpression(self, ast):  # noqa
        return ast

    def sdTerm(self, ast):  # noqa
        return ast

    def dcOperands(self, ast):  # noqa
        return ast

    def dcOperand(self, ast):  # noqa
        return ast

    def dsOperands(self, ast):  # noqa
        return ast

    def dsOperand(self, ast):  # noqa
        return ast

    def addresses(self, ast):  # noqa
        return ast

    def len(self, ast):  # noqa
        return ast

    def scale(self, ast):  # noqa
        return ast

    def exp(self, ast):  # noqa
        return ast

    def number(self, ast):  # noqa
        return ast

    def quotedHexString(self, ast):  # noqa
        return ast

    def quotedBinaryString(self, ast):  # noqa
        return ast

    def quotedFloatList(self, ast):  # noqa
        return ast

    def floatNumber(self, ast):  # noqa
        return ast

    def quotedFixedList(self, ast):  # noqa
        return ast

    def fixedNumber(self, ast):  # noqa
        return ast

    def register(self, ast):  # noqa
        return ast

    def immediate(self, ast):  # noqa
        return ast

    def arithmeticExpressionOnly(self, ast):  # noqa
        return ast

    def arithmeticExpression(self, ast):  # noqa
        return ast

    def term(self, ast):  # noqa
        return ast

    def factor(self, ast):  # noqa
        return ast

    def booleanExpressionOnly(self, ast):  # noqa
        return ast

    def booleanExpression(self, ast):  # noqa
        return ast

    def booleanTerm(self, ast):  # noqa
        return ast

    def notFactor(self, ast):  # noqa
        return ast

    def booleanFactor(self, ast):  # noqa
        return ast

    def booleanLiteral(self, ast):  # noqa
        return ast

    def relationalExpression(self, ast):  # noqa
        return ast

    def relOp(self, ast):  # noqa
        return ast

    def characterExpressionOnly(self, ast):  # noqa
        return ast

    def characterExpression(self, ast):  # noqa
        return ast

    def substringNotation(self, ast):  # noqa
        return ast

    def parameter(self, ast):  # noqa
        return ast

    def sv(self, ast):  # noqa
        return ast

    def list(self, ast):  # noqa
        return ast

    def listItem(self, ast):  # noqa
        return ast

    def replacement(self, ast):  # noqa
        return ast

    def mnote(self, ast):  # noqa
        return ast

    def identifierList(self, ast):  # noqa
        return ast

    def pidentifier(self, ast):  # noqa
        return ast

    def anything(self, ast):  # noqa
        return ast

    def equOperand(self, ast):  # noqa
        return ast

    def expressions(self, ast):  # noqa
        return ast


def main(filename, **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = asmParser()
    return parser.parse(
        text,
        filename=filename,
        **kwargs
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, asmParser, name='asm')
    data = asjson(ast)
    print(json.dumps(data, indent=2))
