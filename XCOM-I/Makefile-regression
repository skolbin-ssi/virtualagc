# Licensing:	Declared by the author (Ronald Burkey) to be Public Domain
#		in the U.S., and can be freely distributed or modified in 
#		any desired way whatsoever.
# Filename:	Makefile-regression
# Purpose:	Performs a regression test on the XCOM-I framework.
# Reference:	https://www.ibiblio.org/apollo/Shuttle.html
# Contact:	info@sandroid.org
# Mod history:	2024-03-30 RSB	Wrote
#		2024-06-09 RSB	Split off from the main XCOM-I Makefile.
#
# Regression Tests
# ----------------
#
# Included with the source code for the XCOM-I program itself is a folder
# (Tests/) which contains various XPL and XPL/I sample programs.  A number of
# those sample programs are intended to be tests of XCOM-I itself.  The 
# instructions below explain how to run those tests.
#
#	NOTE: These tests have been tailored for my own system,
#	which runs Linux.  I'm sure they would require adaptation
#	on Windows or Mac OS, because the extra utility programs
#	needed to complete some of the tests are either different
#	or else have somewhat different syntax on those other
#	platforms.
#
# First, `cd` into the folder containing the XCOM-I.py source code.  A copy
# of this Makefile will also be in that folder.  (But this Makefile may be in
# other folders as well, so don't let that confuse you.)
#
# Second, use the command `make -f Makefile-regression`.  Note that the CC, 
# EXTRA, and XEXTRA variables described in Makefile.template can optionally 
# be used as well.
#
# This process should now have created various additional folders, with names
# like bitsizeDemo/, bitsizeDemoCommon/, and so forth, which contain the 
# executables for the XPL test programs it has built, and possibly test
# results for them.  (If folders by that name previously existed, they have 
# been removed.)

# Just in case of working with .exe files in WINE.  If you need to explicitly
# run exe programs with WINE (on some systems, this seems to be automatic, but
# on others you can  make it explicit, set EXER=wine on the command line.
export WINEDEBUG=-all
export EXER=

ifeq ($(strip $(CC)),)
	CC = gcc
endif
ifeq ($(CC), cl)
        OUT = /Fe:
        LIBS =
        EXT = 
        RDYNAMIC = 
        NULL = NUL
        PERCENT = %%
        export PYTHONUTF8 := 1
else ifeq ($(findstring mingw,$(CC)),mingw)
        SHELL = /bin/bash
        OUT = -o
        LIBS = -lm
        EXT = .exe
        RDYNAMIC =
        NULL = /dev/null
        PERCENT = %
else
        SHELL = /bin/bash
        OUT = -o
        LIBS = -lm
        RDYNAMIC = -rdynamic
        EXT = 
        NULL = /dev/null
        PERCENT = %
endif

XPLI_APPS = bitsizeDemo bitsizeDemoCommon bitsizeDemoCommonIn
XPL_APPS = Example-6.18.3 Example-6.18.4 Example-6.18.5 Example-6.18.6
XPL_APPS += breakCharactersDemo
XPL_APPS += ANALYZER SKELETON

# Here are the principles behind the tests:
#   1.	Various test programs from the Tests/ folder are built.
#   2.  The test programs are run, and output data collected from them.
#   3.  The output data is either checked directly, or more-usually, compared
#	against other the collected data files or compared to previously-
#	determined-correct "regression" files.
#   4.  The only manual step is occasional determination that the "regression"
#	files are valid.
.PHONY: tests
all: testclean $(XPL_APPS) $(XPLI_APPS)
	@$(EXER) bitsizeDemo$(EXT) >bitsizeDemo.build/out.txt
	@cd bitsizeDemo.build && \
	csplit -s out.txt \
	       "$(PERCENT)^Address Allocations .*$(PERCENT)" \
	       "/^Initial Values .*/" \
	       $(PERCENT)"^Assignments .*"$(PERCENT)
	-@cd bitsizeDemo.build && \
	egrep --invert-match \
	       "(^Assignments |^.?PAGE [0-9]|^$$)" xx01 > xxxxA
	@diff --strip-trailing-cr -s -q bitsizeDemo.build/out.txt Tests/bitsizeDemo.regression
	
	@$(EXER) bitsizeDemoCommon$(EXT) --commono=bitsizeDemoCommon.build/COMMON.out >bitsizeDemoCommon.build/out.txt

	@cd bitsizeDemoCommon.build && \
	csplit -s out.txt \
	       "$(PERCENT)^Address Allocations .*$(PERCENT)" \
	       "/^Initial Values .*/" \
	       "$(PERCENT)^Assignments .*$(PERCENT)"
	-@cd bitsizeDemoCommon.build && \
	cat xx00 xx01 | \
	egrep --invert-match "(^Address Allocations |^Assignments |^.PAGE [0-9]|^$$)" > xxxx
	-@cd bitsizeDemoCommon.build && \
	egrep --invert-match "(^Assignments |^.?PAGE [0-9]|^$$)" xx01 > xxxxA
	@diff --strip-trailing-cr -s -q bitsizeDemo.build/xxxxA bitsizeDemoCommon.build/xxxxA
	
	@$(EXER) bitsizeDemoCommonIn$(EXT) --commoni=bitsizeDemoCommon.build/COMMON.out --commono=bitsizeDemoCommonIn.build/COMMON.out >bitsizeDemoCommonIn.build/out.txt
	@cd bitsizeDemoCommonIn.build && \
	csplit -s out.txt "$(PERCENT)^COMMON .*$(PERCENT)"
	-@cd bitsizeDemoCommonIn.build && \
	cat xx00 | \
	egrep --invert-match "(^COMMON |^.?PAGE [0-9]|^$$)" > xxxx
	@diff --strip-trailing-cr -s -q bitsizeDemoCommon.build/xxxxA bitsizeDemoCommonIn.build/xxxx
	@sed "s/^;.*//" bitsizeDemoCommon.build/COMMON.out >bitsizeDemoCommon.build/COMMONa.out
	@sed "s/^;.*//" bitsizeDemoCommonIn.build/COMMON.out >bitsizeDemoCommonIn.build/COMMONa.out
	@diff --strip-trailing-cr -s -q bitsizeDemoCommon.build/COMMONa.out bitsizeDemoCommonIn.build/COMMONa.out

	@$(EXER) Example-6.18.3$(EXT) <Tests/testdata.txt >Example-6.18.3.build/out.txt
	@diff --strip-trailing-cr -s -q Example-6.18.3.build/out.txt Tests/Example-6.18.3.regression
	
	@$(EXER) Example-6.18.4$(EXT) <Tests/testdata.txt >Example-6.18.4.build/out.txt
	@diff --strip-trailing-cr -s -q Example-6.18.4.build/out.txt Tests/Example-6.18.4.regression
	
	@$(EXER) Example-6.18.6$(EXT) | \
	egrep "^[0-9]+" | \
	$(EXER) Example-6.18.5$(EXT) >Example-6.18.5.build/out.txt && \
	diff --strip-trailing-cr -s -q Example-6.18.5.build/out.txt Tests/Example-6.18.5-and-6.regression
	
	@$(EXER) breakCharactersDemo$(EXT) >breakCharactersDemo.build/out.txt
	@diff --strip-trailing-cr -s -q breakCharactersDemo.build/out.txt Tests/breakCharactersDemo.regression
	
	@$(EXER) ANALYZER$(EXT) <Tests/SKELETON.bnf | \
	egrep --invert-match "ANALYZER VERSION|^TODAY IS|^TIME USED|^TOTAL TIME" \
	>ANALYZER.build/out.txt && \
	egrep --invert-match "ANALYZER VERSION|^TODAY IS|^TIME USED|^TOTAL TIME" \
	Tests/ANALYZER-SKELETON.regression >ANALYZER.build/out.regression && \
	diff --strip-trailing-cr -s -q ANALYZER.build/out.txt ANALYZER.build/out.regression
	@echo ======================== All regression tests passed! ========================

.PHONY: testclean
testclean:
	-@rm -rf $(XPL_APPS) $(XPLI_APPS)

.PHONY: $(XPL_APPS)
$(XPL_APPS): 
	@python3 XCOM-I.py $(XEXTRA) --xpl --keep-unused $(PEXTRA) Tests/$@.xpl
	make -s -C $@.build

.PHONY: $(XPLI_APPS)
$(XPLI_APPS): 
	@python3 XCOM-I.py $(XEXTRA) --keep-unused $(PEXTRA) Tests/$@.xpl
	make -s -C $@.build

